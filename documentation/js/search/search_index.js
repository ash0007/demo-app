var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AIBInput.html",[0,0.097,1,2.303]],["body/classes/AIBInput.html",[0,0.122,1,3.225,2,0.737,3,0.124,4,0.11,5,0.11,6,1.716,7,0.222,8,0.373,9,2.052,10,3.238,11,3.119,12,3.018,13,3.376,14,3.376,15,2.71,16,0.845,17,3.994,18,3.994,19,0.357,20,2.805,21,1.985,22,0.018,23,0.83,24,0.99,25,2.649,26,1.115,27,0.76,28,0.344,29,0.925,30,3.376,31,2.649,32,3.62,33,2.649,34,2.649,35,2.649,36,2.649,37,2.649,38,2.587,39,3.043,40,2.649,41,1.86,42,0.806,43,1.042,44,2.805,45,2.836,46,2.649,47,2.649,48,0.418,49,1.596,50,1.493,51,1.071,52,1.86,53,1.493,54,1.86,55,1.252,56,2.71,57,1.86,58,1.86,59,1.86,60,1.86,61,1.86,62,1.86,63,1.86,64,2.251,65,1.86,66,1.86,67,1.86,68,1.86,69,3.461,70,2.251,71,2.251,72,2.251,73,1.095,74,2.116,75,2.251,76,2.251,77,2.805,78,0.721,79,1.493,80,2.87,81,0.644,82,2.805,83,1.86,84,1.86,85,1.86,86,0.799,87,1.493,88,3.376,89,3.376,90,1.86,91,1.86,92,3.376,93,1.86,94,3.238,95,1.86,96,1.86,97,3.376,98,1.86,99,2.251,100,2.805,101,0.807,102,3.376,103,1.86,104,1.86,105,1.86,106,0.972,107,1.86,108,1.878,109,3.376,110,3.376,111,1.003,112,1.86,113,1.86,114,0.935,115,3.376,116,1.596,117,1.596,118,1.323,119,1.493,120,1.252,121,1.86,122,1.596,123,1.86,124,1.86,125,1.126,126,1.86,127,1.86,128,0.319,129,1.86,130,1.86,131,1.86,132,1.86,133,1.86,134,1.403,135,1.323,136,1.86,137,2.805,138,1.86,139,1.86,140,1.86,141,1.86,142,1.86,143,1.86,144,2.251,145,2.391,146,1.86,147,1.86,148,1.86,149,2.251,150,1.493,151,1.493,152,3.018,153,1.493,154,1.493,155,2.251,156,1.493,157,1.493,158,1.493,159,3.018,160,1.493,161,1.493,162,1.493,163,1.493,164,1.493,165,1.493,166,1.493,167,1.493,168,1.493,169,1.493,170,1.493,171,3.018,172,1.493,173,2.71,174,2.71,175,1.493,176,2.71,177,1.493,178,1.493,179,1.493,180,1.493,181,1.493,182,2.251,183,1.163,184,2.71,185,0.972,186,1.493,187,1.493,188,2.251,189,1.493,190,1.493,191,2.251,192,2.251,193,1.493,194,1.493,195,2.251,196,1.493,197,1.493,198,1.493,199,1.493,200,1.493,201,1.493,202,1.493,203,2.251,204,1.493,205,0.009,206,0.009]],["title/classes/AIBOutput.html",[0,0.097,69,2.303]],["body/classes/AIBOutput.html",[0,0.122,1,3.476,2,0.744,3,0.125,4,0.111,5,0.111,6,1.733,7,0.223,8,0.376,9,2.036,10,2.727,11,2.972,12,2.269,13,1.879,14,1.879,15,1.508,16,0.851,19,0.361,20,1.879,21,1.931,22,0.018,23,0.81,24,1.012,26,0.621,27,0.423,28,0.316,29,0.515,30,2.826,32,3.507,38,1.733,39,2.563,42,0.54,43,1.007,44,1.879,45,2.132,48,0.423,49,1.612,50,1.508,51,1.082,52,1.879,53,1.508,54,1.879,55,1.264,56,2.727,57,1.879,58,1.879,59,1.879,60,1.879,61,1.879,62,1.879,63,1.879,64,2.269,65,1.879,66,1.879,67,1.879,68,1.879,69,3.652,70,3.033,71,3.033,72,3.033,73,1.178,74,2.851,75,3.033,76,2.269,77,3.397,78,0.866,79,2.727,80,2.883,81,0.647,82,2.826,83,1.879,84,1.879,85,1.879,86,0.801,87,2.727,88,3.397,89,3.397,90,1.879,91,1.879,92,3.397,93,1.879,94,3.252,95,1.879,96,1.879,97,3.397,98,1.879,99,2.269,100,2.826,101,0.815,102,3.397,103,1.879,104,1.879,105,1.879,106,1.974,107,1.879,108,1.884,109,3.397,110,3.397,111,1.008,112,1.879,113,1.879,114,0.94,115,3.397,116,3.242,117,1.612,118,1.337,119,1.508,120,1.264,121,1.879,122,1.612,123,1.879,124,1.879,125,1.138,126,1.879,127,1.879,128,0.322,129,1.879,130,1.879,131,1.879,132,1.879,133,1.879,134,1.418,135,1.337,136,1.879,137,2.826,138,1.879,139,1.879,140,1.879,141,1.879,142,1.879,143,1.879,144,2.269,145,2.397,146,1.879,147,1.879,148,1.879,149,2.269,150,1.508,151,1.508,152,3.033,153,1.508,154,1.508,155,2.269,156,1.508,157,1.508,158,1.508,159,3.033,160,1.508,161,1.508,162,1.508,163,1.508,164,1.508,165,1.508,166,1.508,167,1.508,168,1.508,169,1.508,170,1.508,171,3.033,172,1.508,173,2.727,174,2.727,175,1.508,176,2.727,177,1.508,178,1.508,179,1.508,180,1.508,181,1.508,182,2.269,183,1.172,184,2.727,185,0.982,186,1.508,187,1.508,188,2.269,189,1.508,190,1.508,191,2.269,192,2.269,193,1.508,194,1.508,195,2.269,196,1.508,197,1.508,198,1.508,199,1.508,200,1.508,201,1.508,202,1.508,203,2.269,204,1.508,205,0.009,206,0.009,207,2.305,208,4.025,209,2.286,210,2.676,211,2.676,212,2.676,213,2.676,214,2.676,215,2.676,216,2.676,217,2.676]],["title/components/AppComponent.html",[218,0.847,219,1.472]],["body/components/AppComponent.html",[0,0.102,3,0.188,4,0.167,5,0.167,7,0.167,8,0.503,16,1.139,19,0.725,22,0.018,24,1.041,26,1.249,27,1.023,28,0.338,29,1.036,42,1.224,43,1.008,48,0.636,73,0.94,78,0.808,81,0.484,106,1.478,135,2.012,205,0.012,206,0.012,209,1.903,218,1.495,219,2.492,220,2.411,221,1.903,222,1.903,223,1.903,224,2.162,225,3.47,226,1.139,227,2.335,228,1.903,229,2.881,230,2.648,231,2.69,232,2.073,233,6.064,234,2.073,235,5.384,236,6.064,237,5.577,238,5.384,239,6.064,240,6.473,241,2.492,242,4.028,243,5.577,244,5.384,245,4.638,246,5.384,247,4.028,248,4.028,249,4.028,250,4.028,251,3.78,252,4.028,253,5.98,254,4.028,255,5.384,256,5.384,257,4.028,258,0.978,259,0.704,260,4.028,261,2.609,262,5.384,263,4.028,264,3.47,265,4.028,266,4.028,267,3.47,268,4.028,269,3.47,270,4.028,271,4.028,272,4.028,273,4.028,274,4.638,275,4.028,276,1.903,277,3.488,278,3.103,279,4.028,280,4.028,281,1.903,282,2.544,283,1.884,284,1.903,285,3.059,286,1.903,287,1.903,288,1.713,289,1.903,290,1.629,291,1.903,292,1.41,293,1.903,294,1.345,295,1.713,296,1.903,297,1.478,298,1.903,299,1.551,300,1.903,301,1.903,302,1.551,303,1.903,304,1.551,305,1.903,306,1.551,307,1.903,308,1.903,309,1.903]],["title/modules/AppModule.html",[310,1.338,311,2.684]],["body/modules/AppModule.html",[0,0.11,3,0.204,4,0.181,5,0.181,22,0.018,48,1.213,116,2.628,205,0.013,206,0.013,219,2.915,230,1.527,258,1.059,259,0.762,292,2.484,294,2.371,297,2.604,299,2.733,302,2.733,304,2.733,306,2.733,311,5.493,312,2.826,313,3.984,314,3.758,315,3.758,316,3.758,317,3.758,318,4.598,319,4.371,320,3.36,321,4.362,322,5.674,323,4.888,324,5.674,325,4.888,326,5.674,327,3.758,328,3.36,329,4.362,330,4.362,331,5.674,332,4.362,333,5.674,334,4.362,335,5.674,336,4.362,337,4.362,338,3.758,339,6.307,340,4.085,341,4.362,342,3.36,343,4.362,344,3.36,345,4.362,346,5.674,347,2.826,348,3.758,349,2.628,350,3.758,351,4.362,352,3.36,353,4.362,354,4.362,355,4.362]],["title/modules/AppRoutingModule.html",[310,1.338,318,2.476]],["body/modules/AppRoutingModule.html",[0,0.14,3,0.259,4,0.23,5,0.23,22,0.018,48,1.19,81,0.668,205,0.015,206,0.015,258,1.348,259,0.97,290,2.245,294,1.854,297,2.037,312,3.596,318,4.271,323,4.782,325,5.68,338,4.782,348,4.782,349,3.344,350,4.782,356,5.551,357,5.551,358,6.593,359,5.417,360,4.276,361,5.551,362,3.898,363,5.551,364,5.551,365,5.551]],["title/classes/BinUtil.html",[0,0.097,366,2.944]],["body/classes/BinUtil.html",[0,0.118,1,2.819,2,0.705,3,0.118,4,0.105,5,0.105,6,1.641,7,0.217,8,0.361,9,1.976,10,2.638,11,3.007,12,2.177,13,1.779,14,1.779,15,1.428,16,0.817,20,1.779,21,1.908,22,0.018,23,0.802,24,1.029,26,0.896,27,0.61,28,0.201,29,0.743,30,2.712,32,3.454,38,1.641,39,2.985,42,0.779,43,0.936,44,1.779,45,2.773,48,0.4,49,1.527,50,1.428,51,1.025,52,1.779,53,1.428,54,1.779,55,1.197,56,2.638,57,1.779,58,1.779,59,1.779,60,1.779,61,1.779,62,1.779,63,1.779,64,2.177,65,1.779,66,1.779,67,1.779,68,1.779,69,3.394,70,2.177,71,2.177,72,2.177,73,1.078,74,2.046,75,2.177,76,2.177,77,2.712,78,0.702,79,1.428,80,2.815,81,0.629,82,2.712,83,1.779,84,1.779,85,1.779,86,0.787,87,1.428,88,3.286,89,3.286,90,1.779,91,1.779,92,3.286,93,1.779,94,3.176,95,1.779,96,1.779,97,3.286,98,1.779,99,2.177,100,2.712,101,0.772,102,3.286,103,1.779,104,1.779,105,1.779,106,2.481,107,1.779,108,1.853,109,3.286,110,3.286,111,0.984,112,1.779,113,1.779,114,0.914,115,3.286,116,1.527,117,1.527,118,1.266,119,1.428,120,1.197,121,1.779,122,1.527,123,1.779,124,1.779,125,1.078,126,1.779,127,1.779,128,0.305,129,1.779,130,1.779,131,1.779,132,1.779,133,1.779,134,1.342,135,1.266,136,1.779,137,2.712,138,1.779,139,1.779,140,1.779,141,1.779,142,1.779,143,1.779,144,2.177,145,2.672,146,3.286,147,1.779,148,1.779,149,2.177,150,2.638,151,1.428,152,2.95,153,2.638,154,1.428,155,2.95,156,1.428,157,1.428,158,2.638,159,2.95,160,1.428,161,1.428,162,1.428,163,1.428,164,2.638,165,1.428,166,1.428,167,1.428,168,1.428,169,1.428,170,2.638,171,2.95,172,1.428,173,2.638,174,2.638,175,2.638,176,2.638,177,1.428,178,2.638,179,1.428,180,1.428,181,2.177,182,2.95,183,1.524,184,2.638,185,0.93,186,1.428,187,1.428,188,2.177,189,1.428,190,1.428,191,2.177,192,2.177,193,1.428,194,1.428,195,2.177,196,1.428,197,1.428,198,1.428,199,1.428,200,2.177,201,1.428,202,1.428,203,2.638,204,1.428,205,0.009,206,0.009,209,3.142,366,1.952,367,3.862,368,3.327,369,3.327,370,2.534,371,2.534,372,2.534,373,2.534,374,2.534,375,2.534,376,2.534,377,2.534,378,2.534,379,2.534,380,2.534,381,2.534,382,1.078]],["title/classes/BinarySystem.html",[0,0.097,383,2.476]],["body/classes/BinarySystem.html",[0,0.101,2,0.734,3,0.123,4,0.109,5,0.109,7,0.109,8,0.372,9,1.945,10,2.703,11,3.269,12,2.703,15,2.703,16,0.842,19,0.536,21,2.085,22,0.018,23,0.844,24,1.069,26,1.239,27,0.844,28,0.372,29,1.028,32,3.805,38,1.709,39,3.617,41,4.794,42,1.078,43,0.888,45,3.493,50,2.244,53,2.703,56,1.487,64,3.232,70,1.487,71,2.244,72,1.487,73,1.152,74,1.397,75,1.487,78,1.038,79,1.487,80,2.669,81,0.793,86,0.821,87,1.487,94,2.244,99,1.487,108,1.755,111,0.838,114,0.461,118,2.396,119,2.703,120,1.246,144,1.487,145,2.352,149,1.487,150,1.487,151,1.487,152,3.011,153,1.487,154,1.487,155,2.244,156,2.244,157,1.487,158,1.487,159,3.011,160,1.487,161,1.487,162,1.487,163,1.487,164,1.487,165,1.487,166,1.487,167,1.487,168,1.487,169,1.487,170,1.487,171,3.011,172,1.487,173,2.703,174,2.703,175,1.487,176,2.703,177,1.487,178,1.487,179,1.487,180,1.487,181,1.487,182,2.244,183,1.159,184,2.703,185,0.968,186,1.487,187,1.487,188,2.244,189,1.487,190,1.487,191,2.244,192,2.244,193,1.487,194,1.487,195,2.244,196,1.487,197,1.487,198,1.487,199,1.487,200,1.487,201,1.487,202,1.487,203,2.703,204,1.487,205,0.009,206,0.009,382,2.039,383,2.579,384,1.709,385,4.644,386,4.821,387,3.694,388,4.115,389,2.244,390,4.115,391,3.067,392,4.115,393,2.638,394,3.067,395,2.638,396,2.638,397,2.638,398,2.638,399,2.638,400,2.638,401,2.638,402,2.638,403,2.638,404,2.638,405,2.638,406,2.638,407,2.638,408,2.638,409,2.638,410,2.638,411,2.638,412,2.638,413,2.638,414,2.032,415,0.247,416,3.694,417,2.032,418,4.644,419,3.694,420,3.067,421,3.694,422,2.032,423,1.76,424,2.032,425,2.032,426,1.487,427,2.032,428,2.032,429,2.032,430,2.032,431,2.032,432,2.032,433,2.032,434,1.487,435,3.694,436,2.032,437,2.032,438,2.032,439,2.032,440,2.032,441,2.032,442,1.533,443,2.032,444,2.032,445,2.032,446,2.032,447,1.709]],["title/classes/BinaryUtil.html",[0,0.097,447,2.476]],["body/classes/BinaryUtil.html",[0,0.102,2,0.75,3,0.126,4,0.112,5,0.112,7,0.112,8,0.378,9,1.869,10,1.519,11,3.242,12,1.519,15,1.519,16,0.856,19,0.363,21,2.051,22,0.018,23,0.827,24,1.013,26,0.938,27,0.639,28,0.317,29,0.779,32,3.723,39,3.514,41,4.267,42,0.816,45,3.339,50,2.28,53,2.738,56,1.519,64,3.262,70,1.519,71,2.28,72,1.519,73,1.159,74,1.427,75,1.519,78,0.81,79,1.519,80,2.698,81,0.798,86,0.826,87,1.519,94,2.28,99,1.519,106,2.379,108,1.769,111,0.848,114,0.471,118,2.021,119,1.519,120,1.273,144,1.519,145,2.662,149,1.519,150,2.738,151,1.519,152,3.044,153,2.738,154,1.519,155,3.044,156,2.28,157,1.519,158,2.738,159,3.044,160,1.519,161,1.519,162,1.519,163,1.519,164,2.738,165,1.519,166,1.519,167,1.519,168,1.519,169,1.519,170,2.738,171,3.044,172,1.519,173,2.738,174,2.738,175,2.738,176,2.738,177,1.519,178,2.738,179,1.519,180,1.519,181,2.28,182,3.044,183,1.572,184,2.738,185,0.988,186,1.519,187,1.519,188,2.28,189,1.519,190,1.519,191,2.28,192,2.28,193,1.519,194,1.519,195,2.28,196,1.519,197,1.519,198,1.519,199,1.519,200,2.28,201,1.519,202,1.519,203,3.044,204,1.519,205,0.009,206,0.009,209,3.064,368,3.485,369,3.485,382,1.146,383,1.745,384,1.745,385,3.742,386,4.159,387,2.075,388,2.075,390,3.116,391,2.075,392,3.116,394,2.075,414,2.075,415,0.252,416,3.742,417,2.075,418,4.681,419,3.742,420,3.116,421,3.742,422,2.075,423,1.782,424,2.075,425,2.075,426,1.519,427,2.075,428,2.075,429,2.075,430,2.075,431,2.075,432,2.075,433,2.075,434,1.519,435,3.742,436,2.075,437,2.075,438,2.075,439,2.075,440,2.075,441,2.075,442,1.557,443,2.075,444,2.075,445,2.075,446,2.075,447,2.62,448,2.694,449,2.694,450,2.694,451,2.694,452,2.694,453,2.694,454,2.694,455,2.694,456,2.694,457,2.694]],["title/classes/BooleanMagicBox.html",[0,0.097,117,2.303]],["body/classes/BooleanMagicBox.html",[0,0.125,1,3.528,2,0.771,3,0.129,4,0.115,5,0.115,6,1.794,7,0.227,8,0.386,9,1.997,10,2.784,11,3.006,12,2.328,13,1.945,14,1.945,15,1.561,16,0.873,19,0.373,20,1.945,21,1.921,22,0.018,23,0.815,24,0.921,26,0.642,27,0.438,28,0.285,29,0.533,30,2.9,32,3.54,38,1.794,39,2.616,42,0.833,43,1.057,44,1.945,45,2.188,48,0.438,49,1.669,50,1.561,51,1.12,52,1.945,53,1.561,54,1.945,55,1.309,56,2.784,57,1.945,58,1.945,59,1.945,60,1.945,61,1.945,62,1.945,63,1.945,64,2.328,65,1.945,66,1.945,67,1.945,68,1.945,69,3.7,70,2.328,71,2.328,72,2.328,73,1.111,74,2.188,75,2.328,76,2.328,77,3.468,78,0.954,79,1.561,80,2.925,81,0.658,82,2.9,83,1.945,84,1.945,85,1.945,86,0.811,87,1.561,88,3.468,89,3.468,90,1.945,91,1.945,92,3.468,93,1.945,94,3.301,95,1.945,96,1.945,97,3.468,98,1.945,99,2.328,100,2.9,101,0.844,102,3.468,103,1.945,104,1.945,105,1.945,106,1.016,107,1.945,108,1.903,109,3.468,110,3.468,111,1.023,112,1.945,113,1.945,114,0.956,115,3.468,116,3.298,117,2.488,118,2.467,119,2.784,120,1.309,121,1.945,122,3.298,123,1.945,124,1.945,125,1.178,126,1.945,127,1.945,128,0.333,129,1.945,130,1.945,131,1.945,132,1.945,133,1.945,134,1.467,135,1.384,136,1.945,137,2.9,138,1.945,139,1.945,140,1.945,141,1.945,142,1.945,143,1.945,144,2.328,145,2.416,146,1.945,147,1.945,148,1.945,149,2.328,150,1.561,151,1.561,152,3.086,153,1.561,154,1.561,155,2.328,156,1.561,157,1.561,158,1.561,159,3.086,160,1.561,161,1.561,162,1.561,163,1.561,164,1.561,165,1.561,166,1.561,167,1.561,168,1.561,169,1.561,170,1.561,171,3.086,172,1.561,173,2.784,174,2.784,175,1.561,176,2.784,177,1.561,178,1.561,179,1.561,180,1.561,181,1.561,182,2.328,183,1.202,184,2.784,185,1.016,186,1.561,187,1.561,188,2.328,189,1.561,190,1.561,191,2.328,192,2.328,193,1.561,194,1.561,195,2.328,196,1.561,197,1.561,198,1.561,199,1.561,200,1.561,201,1.561,202,1.561,203,2.328,204,1.561,205,0.009,206,0.009,207,2.386,389,2.328,458,4.13,459,4.13,460,1.945,461,2.77,462,2.77,463,2.77,464,2.77,465,2.77]],["title/components/CanvasComponent.html",[218,0.847,288,1.625]],["body/components/CanvasComponent.html",[0,0.104,3,0.192,4,0.17,5,0.17,7,0.17,8,0.509,11,2.575,16,1.152,19,0.734,22,0.018,23,0.739,24,1.047,26,1.264,27,1.03,28,0.354,29,1.049,42,1.1,43,0.906,48,0.861,78,1.085,81,0.655,86,0.523,128,0.493,205,0.012,206,0.012,218,1.356,219,1.579,220,2.44,221,1.938,222,1.938,223,1.938,224,2.178,226,1.152,227,2.356,228,1.938,229,2.889,230,2.626,232,2.098,234,2.098,237,4.694,241,2.51,243,5.617,245,5.272,253,5.617,258,0.996,259,0.716,264,3.533,267,3.533,269,3.533,276,2.891,278,4.714,281,1.938,282,2.575,283,1.907,284,1.938,285,3.081,286,1.938,287,1.938,288,2.773,289,1.938,290,1.658,291,1.938,292,1.435,293,1.938,294,1.37,295,1.744,296,1.938,297,1.505,298,1.938,299,1.579,300,1.938,301,1.938,302,1.579,303,1.938,304,1.579,305,1.938,306,1.579,307,1.938,308,1.938,309,1.938,310,1.435,382,1.744,466,3.533,467,4.297,468,6.119,469,5.449,470,3.831,471,3.826,472,4.101,473,5.449,474,4.101,475,4.101,476,2.887,477,4.101,478,2.88,479,4.101,480,2.88,481,1.579,482,4.101,483,4.101,484,4.101,485,4.101,486,4.101,487,2.657,488,2.173,489,2.173,490,2.173,491,2.173,492,2.173,493,2.173,494,1.938,495,1.837,496,2.88,497,2.88,498,2.88,499,2.657,500,1.837]],["title/classes/Clock.html",[0,0.097,501,2.476]],["body/classes/Clock.html",[0,0.064,2,0.707,3,0.119,4,0.105,5,0.105,7,0.105,8,0.362,9,1.246,16,0.818,19,0.342,22,0.018,23,0.879,24,1.085,26,1.433,27,1.051,28,0.366,29,1.189,42,1.385,43,0.937,48,0.74,73,1.162,78,1.142,81,0.875,86,0.597,101,2.115,111,0.985,114,0.444,120,1.2,122,3.157,128,0.564,134,2.05,205,0.009,206,0.009,226,0.818,259,0.676,276,1.828,310,0.889,382,2.527,415,0.237,460,2.717,481,0.978,494,1.828,495,3.258,500,1.733,501,2.506,502,1.957,503,3.036,504,4.514,505,2.954,506,3.192,507,3.333,508,4.514,509,3.869,510,3.869,511,3.869,512,3.869,513,4.687,514,4.687,515,3.869,516,4.514,517,4.687,518,3.333,519,4.514,520,3.315,521,4.514,522,3.869,523,3.333,524,2.54,525,2.54,526,2.54,527,2.54,528,3.333,529,2.54,530,2.717,531,2.54,532,2.54,533,2.54,534,4.687,535,2.54,536,5.119,537,2.54,538,3.374,539,2.54,540,2.54,541,5.621,542,4.002,543,3.653,544,2.54,545,2.337,546,2.54,547,2.54,548,2.54,549,4.859,550,4.859,551,5.119,552,2.54,553,3.333,554,4.038,555,2.483,556,2.347,557,2.54,558,2.54,559,2.54,560,1.828,561,1.784,562,1.53,563,0.889,564,1.432,565,1.957,566,1.346,567,1.957,568,1.784,569,2.188,570,3.333,571,2.188,572,3.333,573,2.188,574,2.188,575,2.188,576,2.188,577,2.188,578,2.188,579,2.188,580,2.188,581,2.188,582,2.188,583,1.933,584,2.188,585,2.188,586,2.188,587,2.188,588,2.188,589,2.188,590,2.188,591,2.188,592,2.188,593,2.188,594,2.188,595,2.188,596,2.188,597,2.618,598,1.957,599,2.05,600,2.188,601,2.05,602,2.188,603,4.038,604,1.346,605,3.333,606,3.157,607,4.038,608,2.188,609,2.188,610,1.933,611,2.188,612,2.188,613,4.514,614,1.269,615,2.188,616,2.188,617,2.188,618,2.188,619,4.038,620,2.188,621,2.188,622,2.188,623,2.188,624,4.038,625,3.333,626,2.188,627,2.188,628,2.188,629,2.188,630,2.188,631,2.188,632,2.188,633,2.188,634,2.188,635,3.333,636,3.333,637,3.333,638,2.188]],["title/components/ClockComponent.html",[218,0.847,290,1.546]],["body/components/ClockComponent.html",[0,0.061,3,0.113,4,0.101,5,0.101,7,0.189,8,0.349,16,0.791,19,0.504,22,0.018,23,0.689,24,1.062,26,1.187,27,0.961,28,0.336,29,0.985,42,1.327,43,1.043,48,0.873,73,0.424,78,1.126,81,0.548,86,0.476,101,1.684,106,0.891,108,1.49,111,1.125,114,1.02,125,1.033,128,0.548,135,1.868,205,0.008,206,0.008,209,1.148,218,1.01,219,0.935,220,1.674,221,1.148,222,1.148,223,1.148,224,1.71,226,0.791,227,1.755,228,1.148,229,2.614,230,2.376,232,1.439,234,1.439,241,1.971,258,0.59,259,0.424,261,1.573,277,3.316,281,1.148,282,1.766,283,1.308,284,1.148,285,2.419,286,1.148,287,1.148,288,1.033,289,1.148,290,2.07,291,1.148,292,0.85,293,1.148,294,0.811,295,1.033,296,1.148,297,0.891,298,1.148,299,0.935,300,1.148,301,1.148,302,0.935,303,1.148,304,0.935,305,1.148,306,0.935,307,1.148,308,1.148,309,1.148,310,0.85,347,1.573,382,1.033,426,1.369,467,1.705,470,3.326,471,2.625,476,1.981,478,1.705,480,1.705,481,0.935,487,1.573,488,1.287,489,1.287,490,1.287,491,2.712,492,1.287,493,1.287,494,2.419,495,3.08,496,1.705,497,1.705,498,1.705,499,1.573,500,1.088,501,3.58,505,3.116,506,2.35,520,1.766,530,3.201,545,2.028,560,2.612,565,1.871,566,1.287,567,1.871,583,1.213,597,2.761,598,2.88,606,2.252,610,2.277,614,2.558,639,2.092,640,4.558,641,3.739,642,5.119,643,4.558,644,3.201,645,5.119,646,3.739,647,5.119,648,5.119,649,2.886,650,4.558,651,3.221,652,2.092,653,4.099,654,3.739,655,2.429,656,2.429,657,2.429,658,2.429,659,6.44,660,2.429,661,6.278,662,2.429,663,2.429,664,2.429,665,2.429,666,2.429,667,2.625,668,2.429,669,2.429,670,2.429,671,2.429,672,2.429,673,1.705,674,2.429,675,1.369,676,1.369,677,2.429,678,2.429,679,2.429,680,2.429,681,1.705,682,1.369,683,4.558,684,2.429,685,2.429,686,2.429,687,3.881,688,2.429,689,3.739,690,2.429,691,2.429,692,2.429,693,2.429,694,2.429,695,1.871,696,2.092,697,2.429,698,2.429,699,2.429,700,2.429,701,2.429,702,2.252,703,2.429,704,2.429,705,2.429,706,2.429,707,2.429,708,2.429,709,2.429,710,3.739,711,2.429,712,2.429,713,2.429,714,3.739,715,3.739,716,2.429,717,2.429,718,2.429,719,2.429,720,2.429,721,2.429,722,2.429,723,2.429,724,2.429,725,2.429,726,2.429,727,2.429,728,2.107,729,3.221,730,4.558,731,3.221,732,4.558,733,3.739,734,2.625,735,2.429,736,2.429,737,2.429,738,2.429,739,2.429,740,2.429,741,2.429,742,2.429,743,5.119,744,6.691,745,2.429,746,2.429,747,2.429,748,2.429,749,3.739,750,2.429,751,2.429,752,3.739,753,2.429,754,2.429,755,2.429,756,2.429,757,4.558,758,2.429,759,1.033,760,2.429,761,2.429,762,1.705,763,2.625,764,1.705,765,1.705]],["title/classes/CreateJS_Shapes.html",[0,0.097,564,2.155]],["body/classes/CreateJS_Shapes.html",[0,0.091,2,1.001,3,0.168,4,0.149,5,0.149,7,0.149,9,1.724,16,1.054,22,0.018,23,0.88,24,0.973,26,1.504,27,1.025,28,0.35,29,1.248,42,1.309,48,0.568,73,1.244,80,1.797,81,0.857,86,0.826,101,2.17,111,0.628,128,0.78,145,2.621,205,0.011,206,0.011,259,0.999,276,1.699,310,1.259,382,3.028,415,0.466,481,1.385,505,3.224,506,2.626,520,3.407,538,3.03,543,4,545,2.099,555,3.773,556,3.229,560,3.251,564,2.81,566,3.555,599,2.641,601,3.272,604,2.641,614,3.24,766,4.347,767,2.33,768,4.294,769,3.229,770,4.294,771,3.839,772,4.294,773,3.003,774,4.406,775,3.597,776,3.003,777,3.597,778,3.438,779,3.003,780,3.597,781,2.49,782,2.918,783,2.766,784,3.597,785,3.003,786,4.336,787,3.597,788,1.59,789,2.167,790,3.446,791,2.167,792,2.167,793,2.167,794,2.167,795,2.167,796,2.167,797,2.027,798,2.167,799,2.167,800,2.167,801,2.167,802,2.167,803,2.167,804,2.77,805,2.77,806,2.77,807,3.003,808,1.797,809,2.49,810,2.77,811,2.167,812,2.77,813,2.49,814,2.77,815,2.77,816,2.77,817,2.77,818,1.797,819,1.529,820,1.797,821,1.529,822,2.167,823,2.167]],["title/components/DemoComponent.html",[218,0.847,292,1.338]],["body/components/DemoComponent.html",[0,0.079,3,0.146,4,0.129,5,0.129,7,0.129,8,0.421,16,0.953,19,0.713,22,0.018,23,0.836,24,1.049,26,1.344,27,1.012,28,0.353,29,1.115,42,1.293,43,0.879,48,0.712,73,1.119,78,1.1,81,0.829,86,0.738,101,2.06,111,0.545,128,0.739,205,0.01,206,0.01,218,1.172,219,1.201,220,2.019,221,1.474,222,1.474,223,1.474,224,1.936,226,0.953,227,2.037,228,1.474,229,2.757,230,2.506,232,1.735,234,1.735,241,2.231,251,3.165,258,0.758,259,0.545,276,1.474,277,4.15,281,1.474,282,2.13,283,1.577,284,1.474,285,2.738,286,1.474,287,1.474,288,1.327,289,1.474,290,1.262,291,1.474,292,2.028,293,1.474,294,1.042,295,1.327,296,1.474,297,1.145,298,1.474,299,1.201,300,1.474,301,1.474,302,1.201,303,1.474,304,1.201,305,1.474,306,1.201,307,1.474,308,1.474,309,1.474,310,1.092,382,2.724,415,0.421,467,2.191,470,3.582,471,3.165,476,2.388,478,2.191,481,1.201,487,2.021,488,1.653,489,1.653,490,1.653,491,1.653,492,1.653,493,1.653,494,1.474,495,3.028,496,2.191,497,2.191,498,2.191,499,2.021,500,1.397,520,3.121,538,2.803,545,2.255,555,3.394,556,2.958,560,2.905,583,1.559,597,1.559,599,2.388,601,3.07,610,1.559,649,3.267,673,2.191,675,1.759,676,1.759,681,2.191,682,1.759,728,2.541,769,2.92,770,3.883,771,3.472,776,2.716,778,3.201,779,2.716,781,2.252,782,2.738,783,2.596,788,1.438,789,1.88,790,3.188,791,1.88,792,1.88,793,1.88,794,1.88,795,1.88,796,1.88,797,3.267,798,1.88,799,1.88,800,1.88,801,1.88,802,1.88,803,1.88,807,1.88,808,1.559,809,2.252,813,1.559,818,1.559,819,1.327,820,1.559,821,1.327,822,1.88,823,1.88,824,2.021,825,4.076,826,3.472,827,4.507,828,3.12,829,3.12,830,3.12,831,3.12,832,3.12,833,3.12,834,3.12,835,3.12,836,3.472,837,3.472,838,3.472,839,2.403,840,2.403,841,2.403,842,2.403,843,2.403,844,2.403,845,2.403,846,2.403,847,2.403,848,2.403,849,2.403,850,2.403,851,2.403,852,2.403,853,2.403,854,2.403]],["title/components/DrawAnimComponent.html",[218,0.847,294,1.277]],["body/components/DrawAnimComponent.html",[0,0.065,3,0.119,4,0.106,5,0.106,7,0.195,8,0.363,16,0.822,19,0.524,22,0.018,23,0.875,24,1.072,26,1.48,27,1.053,28,0.353,29,1.228,42,1.386,43,1.029,48,0.743,78,0.383,80,1.276,81,0.876,86,0.759,101,2.093,106,0.937,111,0.679,114,1.183,128,0.745,205,0.009,206,0.009,209,1.207,218,1.042,219,0.983,220,1.74,221,1.207,222,1.207,223,1.207,224,1.755,226,0.822,227,1.811,228,1.207,229,2.645,230,2.404,232,1.496,234,1.496,241,2.023,258,0.62,259,0.446,261,1.655,281,1.207,282,1.836,283,1.36,284,1.207,285,2.483,286,1.207,287,1.207,288,1.086,289,1.207,290,1.033,291,1.207,292,0.894,293,1.207,294,1.755,295,2.779,296,1.207,297,0.937,298,1.207,299,0.983,300,1.207,301,1.207,302,0.983,303,1.207,304,0.983,305,1.207,306,0.983,307,1.207,308,1.207,309,1.207,310,0.894,347,1.655,349,4.335,382,1.086,415,0.363,467,1.794,470,2.995,471,2.729,476,2.059,478,1.794,481,1.496,488,1.353,489,1.353,490,1.353,491,2.059,492,1.353,493,1.353,494,1.836,495,2.772,496,1.794,497,1.794,498,1.794,499,1.655,500,1.144,506,2.921,545,2.185,560,1.207,562,1.539,583,1.276,604,2.059,606,1.539,614,1.941,644,3.69,649,2.962,651,3.348,652,2.201,653,4.181,667,2.729,675,1.44,676,1.44,682,1.44,687,3.302,728,2.19,734,3.302,762,1.794,763,2.729,764,1.794,765,1.794,768,3.348,769,3.404,771,2.993,772,3.348,773,2.341,778,2.626,781,1.941,782,2.483,783,2.354,785,2.341,788,1.239,808,1.276,809,1.941,811,1.539,813,1.941,818,1.276,819,1.086,820,1.276,821,1.086,855,5.052,856,1.794,857,2.993,858,3.623,859,2.993,860,4.048,861,3.886,862,3.886,863,3.886,864,2.554,865,2.554,866,2.993,867,2.554,868,2.554,869,4.355,870,2.554,871,2.993,872,2.993,873,2.554,874,5.034,875,2.554,876,2.554,877,2.554,878,4.355,879,2.554,880,2.554,881,2.554,882,3.302,883,2.554,884,2.993,885,2.554,886,1.968,887,1.968,888,1.968,889,1.968,890,1.968,891,1.968,892,1.968,893,1.968,894,1.968,895,1.276,896,1.968,897,1.968,898,1.968,899,1.968,900,1.968,901,1.968,902,1.968,903,1.968,904,1.968,905,1.968,906,1.968,907,1.968,908,2.993,909,2.993,910,1.968,911,2.993,912,2.993,913,1.968,914,1.968,915,1.968,916,1.968,917,1.968,918,1.968,919,1.968,920,1.968,921,1.968,922,1.968,923,1.968,924,1.968,925,1.968,926,2.993,927,1.968,928,1.968,929,1.968,930,1.655,931,1.968,932,1.968]],["title/injectables/DynamicDataSource.html",[933,1.625,934,2.476]],["body/injectables/DynamicDataSource.html",[0,0.137,3,0.153,4,0.136,5,0.136,7,0.245,8,0.436,9,1.446,16,0.987,19,0.441,21,1.743,22,0.018,23,0.371,24,1.046,26,1.453,27,1.029,28,0.327,29,1.206,42,1.196,43,1.082,48,0.99,51,1.325,73,0.815,76,1.846,78,0.889,81,0.753,86,0.798,106,1.995,111,1.137,114,0.815,128,0.713,135,1.637,183,1.824,185,2.174,205,0.011,206,0.011,209,1.548,226,0.693,231,1.637,258,0.795,259,1.035,389,2.631,415,0.306,423,1.713,434,2.631,542,3.522,702,1.974,759,2.664,933,1.985,934,3.023,935,2.122,936,2.3,937,4.825,938,4.341,939,4.667,940,4.667,941,4.825,942,3.276,943,4.565,944,4.189,945,3.571,946,3.276,947,3.595,948,3.595,949,5.016,950,3.276,951,4.399,952,3.595,953,3.923,954,4.565,955,3.276,956,2.122,957,4.825,958,3.276,959,3.276,960,2.523,961,3.276,962,3.276,963,3.276,964,3.276,965,3.276,966,3.276,967,3.276,968,3.595,969,5.447,970,2.523,971,2.523,972,2.523,973,3.818,974,2.122,975,2.3,976,2.523,977,2.523,978,3.818,979,2.569,980,3.818,981,3.595,982,3.595,983,2.523,984,3.595,985,1.974,986,3.595,987,2.523,988,3.595,989,2.523,990,4.189,991,2.523,992,2.523,993,2.523,994,2.523,995,3.595,996,3.595,997,3.595,998,3.595,999,3.595,1000,3.595,1001,3.595,1002,3.595,1003,2.523,1004,2.523,1005,2.523,1006,2.523,1007,3.595,1008,2.523,1009,2.523,1010,2.473,1011,2.523,1012,2.523,1013,4.189,1014,3.595,1015,4.189,1016,3.595,1017,2.523,1018,3.595,1019,2.523,1020,2.523]],["title/injectables/DynamicDatabase.html",[933,1.625,945,2.303]],["body/injectables/DynamicDatabase.html",[0,0.115,2,1.261,3,0.212,4,0.188,5,0.188,7,0.188,8,0.544,16,1.23,22,0.018,24,1.051,26,1.349,27,1.015,28,0.335,29,1.119,42,1.296,48,0.919,51,2.352,73,1.303,81,0.545,86,0.863,106,2.134,114,0.791,128,0.699,183,1.693,205,0.013,206,0.013,209,2.748,231,2.264,258,1.1,259,0.791,434,3.278,702,2.73,759,2.473,933,1.927,935,2.935,945,3.504,953,4.082,956,3.767,978,3.182,979,2.141,980,3.182,1021,6.177,1022,3.904,1023,6.422,1024,6.422,1025,4.48,1026,6.776,1027,5.815,1028,5.815,1029,4.531,1030,5.01,1031,4.531,1032,5.815,1033,5.815,1034,5.815,1035,4.531,1036,6.776,1037,6.776,1038,5.815,1039,5.815,1040,6.776,1041,5.815,1042,5.815,1043,6.776,1044,5.815,1045,5.815,1046,5.815,1047,5.815,1048,5.815,1049,4.531,1050,4.531,1051,4.531,1052,4.531,1053,4.531,1054,4.531]],["title/interfaces/DynamicFlatNode.html",[415,0.357,953,2.303]],["body/interfaces/DynamicFlatNode.html",[0,0.144,3,0.167,4,0.148,5,0.148,7,0.255,8,0.463,9,1.514,21,1.585,22,0.018,23,0.645,27,0.564,28,0.321,29,0.954,43,0.824,48,1.022,51,1.443,73,1.075,76,2.011,78,0.744,81,0.778,86,0.824,106,1.309,111,1.169,114,0.866,128,0.685,135,1.783,183,1.999,185,2.258,205,0.011,206,0.011,226,0.755,231,1.783,258,0.866,259,1.075,415,0.334,423,1.819,434,2.794,542,3.69,563,1.249,702,2.15,759,2.422,933,2.108,934,2.311,936,2.505,937,4.388,938,3.987,941,4.388,943,3.818,944,2.749,945,2.986,947,2.749,948,2.749,949,4.741,951,4.322,952,2.749,953,3.896,954,3.818,957,4.741,968,2.749,969,5.545,970,2.749,971,2.749,972,2.749,973,3.999,974,2.311,975,2.505,976,2.749,977,2.749,978,4.7,979,3.163,980,4.7,981,4.982,982,3.818,983,2.749,984,3.818,985,2.15,986,3.818,987,2.749,988,3.818,989,2.749,990,4.388,991,2.749,992,2.749,993,2.749,994,2.749,995,3.818,996,3.818,997,3.818,998,3.818,999,3.818,1000,3.818,1001,3.818,1002,3.818,1003,2.749,1004,2.749,1005,2.749,1006,2.749,1007,3.818,1008,2.749,1009,2.749,1010,2.626,1011,2.749,1012,2.749,1013,4.388,1014,3.818,1015,4.388,1016,3.818,1017,2.749,1018,3.818,1019,2.749,1020,2.749]],["title/injectables/DynamicLoaderService.html",[933,1.625,1055,2.944]],["body/injectables/DynamicLoaderService.html",[0,0.147,3,0.272,4,0.241,5,0.241,19,0.966,22,0.018,24,0.873,48,0.919,205,0.015,206,0.015,231,2.906,258,1.412,259,1.016,933,2.882,935,3.768,985,3.505,1055,5.22,1056,5.838,1057,5.838,1058,5.012,1059,5.817]],["title/injectables/FinnhubApiService.html",[933,1.625,1060,2.944]],["body/injectables/FinnhubApiService.html",[0,0.135,3,0.25,4,0.221,5,0.221,7,0.221,8,0.602,19,0.932,22,0.018,24,1.038,28,0.336,48,1.018,78,1.121,120,2.525,128,0.643,205,0.015,206,0.015,231,2.67,258,1.298,259,0.934,933,2.74,935,3.462,985,3.22,1060,4.964,1061,6.189,1062,6.189,1063,4.604,1064,6.919,1065,6.919,1066,6.445,1067,5.344,1068,5.552,1069,6.445,1070,5.344,1071,5.344,1072,5.344,1073,5.344,1074,5.344,1075,5.344,1076,5.344]],["title/interfaces/IAnimateShape.html",[415,0.357,503,2.476]],["body/interfaces/IAnimateShape.html",[3,0.273,4,0.242,5,0.242,7,0.242,8,0.636,22,0.017,23,0.663,28,0.305,43,0.972,205,0.015,206,0.015,259,1.022,415,0.547,503,4.404,507,6.374,530,4.107,561,4.107,562,3.524,563,2.047,1077,5.039,1078,3.832]],["title/interfaces/ICenter.html",[415,0.357,788,1.219]],["body/interfaces/ICenter.html",[0,0.109,3,0.201,4,0.178,5,0.178,7,0.178,8,0.526,9,1.834,22,0.018,23,0.872,28,0.327,48,0.681,73,1.095,81,0.889,86,0.879,101,2.227,111,0.753,128,0.83,145,2.414,205,0.013,206,0.013,259,1.095,276,2.036,310,1.508,415,0.526,481,1.659,505,2.429,506,2.393,520,3.141,538,2.282,543,3.646,545,2.439,555,3.321,556,2.977,560,3.259,563,1.508,564,2.429,566,2.282,599,2.282,601,2.982,604,2.982,614,3.321,766,2.791,767,2.791,773,2.596,774,3.319,776,2.596,778,3.534,779,2.596,781,2.153,782,2.659,783,2.521,785,2.596,786,3.952,788,2,789,2.596,790,3.777,791,2.596,792,2.596,793,2.596,794,2.596,795,2.596,796,2.596,797,2.429,798,2.596,799,2.596,800,2.596,801,2.596,802,2.596,803,2.596,804,3.319,805,3.319,806,3.319,807,3.391,808,2.153,809,2.812,810,3.319,811,2.596,812,3.319,813,2.812,814,3.319,815,3.319,816,3.319,817,3.319,818,2.153,819,1.832,820,2.153,821,1.832,822,2.596,823,2.596]],["title/interfaces/ICenter-1.html",[111,0.559,415,0.299,788,1.021]],["body/interfaces/ICenter-1.html",[3,0.261,4,0.232,5,0.232,7,0.232,8,0.619,22,0.018,23,0.864,28,0.345,101,2.222,205,0.015,206,0.015,415,0.659,500,2.504,506,2.377,545,2.676,563,1.956,788,2.25,819,2.377,821,2.377,1079,3.925,1080,4.289,1081,5.617,1082,4.306,1083,4.306,1084,3.621,1085,2.793]],["title/interfaces/ICenter-2.html",[415,0.299,597,1.6,788,1.021]],["body/interfaces/ICenter-2.html",[0,0.101,3,0.187,4,0.166,5,0.166,7,0.166,8,0.502,19,0.541,22,0.018,23,0.847,28,0.316,43,0.667,48,0.848,73,0.938,78,1.011,81,0.877,86,0.824,101,2.22,111,0.701,128,0.81,205,0.012,206,0.012,218,1.19,226,0.849,227,2.067,229,1.545,230,1.404,232,1.545,234,1.545,241,1.545,251,2.818,258,0.974,259,0.701,276,1.896,277,4.492,292,1.404,310,1.404,415,0.502,470,3.569,476,2.126,481,1.545,487,2.599,488,2.126,489,2.126,490,2.126,491,2.126,492,2.126,493,2.126,494,1.896,495,2.894,520,2.86,538,2.126,545,2.598,555,2.845,556,2.711,560,3.054,563,1.404,583,2.005,597,2.005,599,2.126,601,2.845,610,2.005,649,2.262,673,2.818,675,2.262,676,2.262,681,2.818,682,2.262,728,3.027,776,2.418,778,3.366,779,2.418,781,2.005,782,2.537,783,2.405,788,1.93,789,2.418,790,3.647,791,2.418,792,2.418,793,2.418,794,2.418,795,2.418,796,2.418,797,3.027,798,2.418,799,2.418,800,2.418,801,2.418,802,2.418,803,2.418,807,2.418,808,2.005,809,2.683,813,2.005,818,2.005,819,1.706,820,2.005,821,1.706,822,2.418,823,2.418,824,2.599,825,3.091,826,3.091,836,4.137,837,4.137,838,4.137,839,3.091,840,3.091,841,3.091,842,3.091,843,3.091,844,3.091,845,3.091,846,3.091,847,3.091,848,3.091,849,3.091,850,3.091,851,3.091,852,3.091,853,3.091,854,3.091]],["title/interfaces/ICenter-3.html",[415,0.299,695,2.466,788,1.021]],["body/interfaces/ICenter-3.html",[0,0.09,3,0.166,4,0.147,5,0.147,7,0.205,8,0.462,19,0.479,22,0.018,23,0.871,28,0.258,43,0.59,48,0.898,78,0.533,81,0.914,86,0.852,101,2.191,111,0.863,114,1.241,128,0.825,205,0.011,206,0.011,218,1.095,226,0.751,227,1.902,229,1.368,230,1.243,232,1.368,234,1.368,241,1.368,258,0.862,259,0.62,261,2.301,294,1.186,295,2.612,310,1.243,347,2.301,349,2.14,415,0.462,470,3.01,476,1.882,481,1.902,488,1.882,489,1.882,490,1.882,491,2.618,492,1.882,493,1.882,494,2.335,495,2.751,506,2.842,545,2.453,563,1.243,583,1.775,604,2.618,606,2.14,614,2.469,644,2.494,649,2.002,653,3.99,667,2.494,675,2.002,676,2.002,682,2.002,687,3.99,728,2.785,734,2.494,762,2.494,763,3.47,764,2.494,765,2.494,769,2.301,773,2.14,778,3.069,781,1.775,782,2.335,783,2.213,785,2.14,788,1.812,808,1.775,809,2.469,811,2.14,813,2.469,818,1.775,819,1.51,820,1.775,821,1.51,855,2.494,856,2.494,857,2.736,858,2.736,859,2.736,860,2.736,866,2.736,869,3.806,871,2.736,872,2.736,874,4.974,878,3.806,882,3.47,884,2.736,886,2.736,887,2.736,888,2.736,889,2.736,890,2.736,891,2.736,892,2.736,893,2.736,894,2.736,895,1.775,896,2.736,897,2.736,898,2.736,899,2.736,900,2.736,901,2.736,902,2.736,903,2.736,904,2.736,905,2.736,906,2.736,907,2.736,908,3.806,909,3.806,910,2.736,911,3.806,912,3.806,913,2.736,914,2.736,915,2.736,916,2.736,917,2.736,918,2.736,919,2.736,920,2.736,921,2.736,922,2.736,923,2.736,924,2.736,925,2.736,926,3.806,927,2.736,928,2.736,929,2.736,930,2.301,931,2.736,932,2.736]],["title/interfaces/ICircleConfig.html",[415,0.357,1084,2.476]],["body/interfaces/ICircleConfig.html",[3,0.26,4,0.231,5,0.231,7,0.231,8,0.618,22,0.018,23,0.843,28,0.345,101,1.697,205,0.015,206,0.015,415,0.658,500,3.262,506,3.097,545,2.044,563,1.95,788,2.323,819,2.369,821,2.369,1079,3.912,1080,4.562,1081,5.611,1082,4.291,1083,4.291,1084,4.28,1085,3.301]],["title/interfaces/IClock.html",[415,0.357,568,2.684]],["body/interfaces/IClock.html",[0,0.084,3,0.156,4,0.138,5,0.138,7,0.138,8,0.442,9,0.886,22,0.018,23,0.793,27,0.526,28,0.286,43,0.554,48,0.867,73,0.959,78,1.01,81,0.907,86,0.699,101,2.132,111,1.101,114,0.582,120,1.574,122,2.007,128,0.66,134,2.502,205,0.011,206,0.011,226,0.704,259,0.825,276,2.232,310,1.166,415,0.311,481,1.282,494,2.232,495,3.379,500,1.492,501,2.158,502,2.566,503,3.06,504,4.069,505,3.554,506,3.196,508,2.87,516,2.87,518,2.87,519,4.069,520,3.182,521,4.069,523,2.87,528,2.87,530,2.339,536,4.728,538,3.163,541,5.431,542,3.555,543,2.158,545,2.403,549,5.144,550,5.144,551,5.431,553,2.87,554,2.87,555,1.765,556,2.115,560,2.232,561,2.339,562,2.007,563,1.653,564,1.878,565,2.566,566,1.765,567,2.566,568,3.317,569,2.87,570,4.069,571,2.87,572,4.069,573,2.87,574,2.87,575,2.87,576,2.87,577,2.87,578,2.87,579,2.87,580,2.87,581,2.87,582,2.87,583,2.36,584,2.87,585,2.87,586,2.87,587,2.87,588,2.87,589,2.87,590,2.87,591,2.87,592,2.87,593,2.87,594,2.87,595,2.87,596,2.87,597,2.983,598,2.566,599,2.502,600,2.87,601,2.502,602,2.87,603,4.728,604,1.765,605,4.069,606,3.598,607,4.728,608,2.87,609,2.87,610,2.36,611,2.87,612,2.87,613,5.144,614,1.664,615,2.87,616,2.87,617,2.87,618,2.87,619,4.728,620,2.87,621,2.87,622,2.87,623,2.87,624,4.728,625,4.069,626,2.87,627,2.87,628,2.87,629,2.87,630,2.87,631,2.87,632,2.87,633,2.87,634,2.87,635,4.069,636,4.069,637,4.069,638,2.87]],["title/interfaces/IGraphics.html",[415,0.357,1080,2.476]],["body/interfaces/IGraphics.html",[3,0.255,4,0.226,5,0.226,7,0.226,8,0.61,22,0.018,23,0.791,28,0.377,101,1.662,205,0.015,206,0.015,415,0.653,500,2.443,506,2.32,545,2.002,563,1.909,788,2.081,819,3.076,821,3.076,1079,3.83,1080,4.522,1081,6.007,1082,5.572,1083,5.572,1084,3.534,1085,2.726]],["title/interfaces/INumberMatrixOps.html",[415,0.357,1086,2.025]],["body/interfaces/INumberMatrixOps.html",[0,0.147,3,0.128,4,0.114,5,0.114,7,0.226,8,0.383,9,1.831,19,0.785,21,2.024,22,0.018,23,0.868,28,0.359,55,1.936,73,0.716,78,1,81,0.763,86,0.849,108,0.798,114,0.857,125,1.165,128,0.493,145,1.434,183,1.429,205,0.009,206,0.009,226,0.58,283,1.718,415,0.256,423,1.801,442,1.578,563,0.959,895,2.047,1078,4.166,1085,1.369,1086,2.6,1087,1.295,1088,3.07,1089,3.512,1090,3.512,1091,3.281,1092,3.512,1093,3.512,1094,3.82,1095,3.281,1096,3.281,1097,3.512,1098,4.184,1099,2.171,1100,2.171,1101,1.651,1102,1.545,1103,1.545,1104,2.31,1105,1.545,1106,1.545,1107,3.806,1108,1.545,1109,1.545,1110,1.545,1111,1.545,1112,1.651,1113,1.651,1114,1.651,1115,3.281,1116,2.469,1117,2.469,1118,2.469,1119,3.281,1120,2.469,1121,3.82,1122,3.685,1123,2.469,1124,3.512,1125,2.469,1126,1.651,1127,1.651,1128,2.469,1129,1.651,1130,1.651,1131,1.651,1132,1.651,1133,1.651,1134,1.651,1135,1.651,1136,2.469,1137,1.651,1138,2.469,1139,1.651,1140,1.651,1141,2.469,1142,1.651,1143,3.281,1144,1.651,1145,3.281,1146,1.651,1147,1.651,1148,2.469,1149,1.651,1150,1.651,1151,1.651,1152,1.651,1153,1.651,1154,1.452,1155,1.545,1156,1.651,1157,1.651,1158,2.957,1159,1.651,1160,1.651,1161,1.651,1162,2.912,1163,2.957,1164,1.651,1165,1.651,1166,1.651,1167,1.651,1168,1.651,1169,1.651,1170,2.469,1171,1.651,1172,1.651,1173,2.6,1174,2.469,1175,1.651,1176,2.452,1177,1.651,1178,1.651,1179,1.651,1180,1.651,1181,1.651,1182,1.651,1183,2.469,1184,2.469,1185,2.469,1186,2.469,1187,2.469,1188,3.685,1189,1.651,1190,3.281,1191,2.469,1192,1.651,1193,1.651,1194,1.651,1195,1.651,1196,2.469,1197,2.171,1198,1.452]],["title/interfaces/IShapeObject.html",[415,0.357,930,2.476]],["body/interfaces/IShapeObject.html",[0,0.088,3,0.162,4,0.144,5,0.144,7,0.201,8,0.455,19,0.468,22,0.018,23,0.873,28,0.317,29,1.277,43,0.577,48,0.887,78,0.521,81,0.912,86,0.846,101,2.076,111,0.85,114,1.234,128,0.82,205,0.011,206,0.011,218,1.078,226,0.735,227,1.873,229,1.337,230,1.216,232,1.337,234,1.337,241,1.337,258,0.843,259,0.607,261,2.25,294,1.16,295,2.587,310,1.216,347,2.25,349,2.093,415,0.455,470,2.975,476,1.84,481,1.873,488,1.84,489,1.84,490,1.84,491,2.577,492,1.84,493,1.84,494,2.299,495,2.724,506,2.822,545,2.06,563,1.216,583,1.736,604,2.577,606,2.093,614,2.431,644,2.439,649,1.958,653,3.943,667,2.439,675,1.958,676,1.958,682,1.958,687,4.661,728,2.743,734,2.439,762,2.439,763,3.416,764,2.439,765,2.439,769,2.25,773,2.093,778,3.039,781,1.736,782,2.299,783,2.179,785,2.093,788,1.94,808,1.736,809,2.431,811,2.093,813,2.431,818,1.736,819,1.477,820,1.736,821,1.477,855,2.439,856,2.439,857,2.676,858,2.676,859,2.676,860,2.676,866,2.676,869,3.748,871,2.676,872,2.676,874,4.933,878,3.748,882,4.497,884,2.676,886,2.676,887,2.676,888,2.676,889,2.676,890,2.676,891,2.676,892,2.676,893,2.676,894,2.676,895,1.736,896,2.676,897,2.676,898,2.676,899,2.676,900,2.676,901,2.676,902,2.676,903,2.676,904,2.676,905,2.676,906,2.676,907,2.676,908,3.748,909,3.748,910,2.676,911,3.748,912,3.748,913,2.676,914,2.676,915,2.676,916,2.676,917,2.676,918,2.676,919,2.676,920,2.676,921,2.676,922,2.676,923,2.676,924,2.676,925,2.676,926,3.748,927,2.676,928,2.676,929,2.676,930,3.152,931,4.686,932,4.686]],["title/interfaces/IStrokeStyle.html",[415,0.357,556,1.712]],["body/interfaces/IStrokeStyle.html",[0,0.104,3,0.192,4,0.17,5,0.17,7,0.17,8,0.51,9,1.805,22,0.018,23,0.867,28,0.354,29,1.343,48,0.649,73,1.07,81,0.881,86,0.865,101,2.069,111,0.717,128,0.817,145,2.376,205,0.012,206,0.012,259,1.07,276,3.082,310,1.437,415,0.51,481,1.581,505,2.315,506,2.319,520,3.082,538,2.176,543,3.533,545,1.507,555,3.244,556,3.041,560,3.208,563,1.437,564,2.315,566,2.176,599,2.176,601,2.889,604,2.889,614,3.259,766,2.66,767,2.66,773,2.474,774,3.163,776,2.474,778,3.487,779,2.474,781,2.052,782,2.577,783,2.442,785,2.474,786,3.829,788,1.739,789,3.93,790,4.291,791,3.689,792,3.689,793,3.93,794,3.689,795,3.689,796,3.93,797,2.315,798,2.474,799,2.474,800,2.474,801,2.474,802,2.474,803,2.474,804,3.163,805,3.163,806,3.163,807,3.286,808,2.052,809,2.725,810,3.163,811,2.474,812,3.163,813,2.725,814,3.163,815,3.163,816,3.163,817,3.163,818,2.052,819,1.746,820,2.052,821,1.746,822,2.474,823,2.474]],["title/interfaces/IStrokeStyle-1.html",[111,0.559,415,0.299,556,1.434]],["body/interfaces/IStrokeStyle-1.html",[0,0.097,3,0.179,4,0.159,5,0.159,7,0.159,8,0.487,19,0.517,22,0.018,23,0.842,28,0.346,29,1.317,43,0.638,48,0.823,73,0.91,78,0.995,81,0.869,86,0.809,101,2.085,111,0.67,128,0.798,205,0.012,206,0.012,218,1.154,226,0.811,227,2.006,229,1.477,230,1.343,232,1.477,234,1.477,241,1.477,251,2.694,258,0.932,259,0.67,276,2.999,277,4.433,292,1.343,310,1.343,415,0.487,470,3.515,476,2.033,481,1.477,487,2.486,488,2.033,489,2.033,490,2.033,491,2.033,492,2.033,493,2.033,494,1.813,495,2.842,520,2.795,538,2.033,545,2.329,555,2.76,556,2.842,560,2.999,563,1.343,583,1.917,597,1.917,599,2.033,601,2.76,610,1.917,649,2.163,673,2.694,675,2.163,676,2.163,681,2.694,682,2.163,728,2.937,776,2.312,778,3.315,779,2.312,781,1.917,782,2.462,783,2.333,788,1.662,789,3.824,790,4.218,791,3.565,792,3.565,793,3.824,794,3.565,795,3.565,796,3.824,797,2.937,798,2.312,799,2.312,800,2.312,801,2.312,802,2.312,803,2.312,807,2.312,808,1.917,809,2.603,813,1.917,818,1.917,819,1.632,820,1.917,821,1.632,822,2.312,823,2.312,824,2.486,825,2.956,826,2.956,836,4.014,837,4.014,838,4.014,839,2.956,840,2.956,841,2.956,842,2.956,843,2.956,844,2.956,845,2.956,846,2.956,847,2.956,848,2.956,849,2.956,850,2.956,851,2.956,852,2.956,853,2.956,854,2.956]],["title/components/MapComponent.html",[218,0.847,297,1.402]],["body/components/MapComponent.html",[0,0.106,3,0.195,4,0.173,5,0.173,7,0.173,8,0.516,9,1.643,16,1.167,19,0.833,22,0.018,24,1.053,27,0.872,28,0.288,42,1.247,43,1.166,48,0.872,51,2.657,73,0.964,78,0.927,81,0.664,128,0.503,205,0.013,206,0.013,218,1.369,219,1.61,220,2.472,221,1.976,222,1.976,223,1.976,224,2.195,226,1.167,227,2.379,228,1.976,229,2.897,230,2.634,232,2.125,234,2.125,241,2.53,258,1.016,259,0.731,281,1.976,282,2.608,283,1.932,284,1.976,285,3.105,286,1.976,287,1.976,288,1.779,289,1.976,290,1.691,291,1.976,292,1.464,293,1.976,294,1.397,295,1.779,296,1.976,297,2.411,298,1.976,299,1.61,300,1.976,301,1.976,302,1.61,303,1.976,304,1.61,305,1.976,306,1.61,307,1.976,308,1.976,309,1.976,319,4.252,500,2.472,610,2.09,696,3.604,882,4.339,1199,3.604,1200,6.179,1201,6.179,1202,5.52,1203,6.179,1204,5.323,1205,6.571,1206,6.571,1207,5.52,1208,4.183,1209,4.183,1210,4.183,1211,5.52,1212,4.183,1213,4.183,1214,3.604,1215,4.183,1216,3.604,1217,4.183,1218,4.183,1219,5.52,1220,4.183,1221,4.183,1222,4.183,1223,4.183,1224,4.183,1225,4.183,1226,4.183,1227,4.183,1228,4.183,1229,4.183,1230,4.183,1231,4.183]],["title/guards/MapResolver.html",[362,2.684,1232,2.944]],["body/guards/MapResolver.html",[0,0.113,3,0.21,4,0.186,5,0.186,7,0.186,16,1.222,19,0.861,22,0.018,24,1.048,26,1.041,27,0.709,28,0.234,29,0.863,42,1.362,43,0.746,48,1.01,51,2.336,73,1.249,81,0.875,86,0.814,128,0.695,185,1.646,205,0.013,206,0.013,226,0.949,231,2.241,258,1.089,259,0.784,274,3.865,360,3.456,362,4.057,933,2.457,973,5.108,974,2.906,985,2.703,1204,5.815,1216,3.865,1233,4.486,1234,3.456,1235,5.778,1236,6.75,1237,6.75,1238,7.151,1239,4.486,1240,5.778,1241,7.37,1242,6.985,1243,6.75,1244,4.486,1245,4.486,1246,4.486,1247,4.486,1248,4.486,1249,4.486,1250,3.456,1251,3.865,1252,5.778,1253,5.778,1254,5.778,1255,4.486,1256,4.486,1257,4.486,1258,6.392,1259,5.778,1260,4.486,1261,4.486,1262,4.486,1263,4.486,1264,4.486,1265,4.486,1266,5.778,1267,4.486,1268,4.486,1269,4.486,1270,4.486]],["title/classes/Matrix.html",[0,0.097,1107,1.91]],["body/classes/Matrix.html",[0,0.143,2,0.711,3,0.119,4,0.106,5,0.106,7,0.218,8,0.363,9,1.801,16,0.822,19,0.802,21,2.077,22,0.018,23,0.873,24,1.031,26,1.381,27,0.941,28,0.348,29,1.146,42,1.141,43,0.782,55,1.836,73,0.679,78,1.079,81,0.745,86,0.833,108,0.744,114,0.821,125,1.086,128,0.467,145,1.36,183,1.369,205,0.009,206,0.009,226,0.54,283,1.646,382,1.652,389,2.19,415,0.239,423,1.726,442,2.293,895,1.941,1085,1.276,1086,2.059,1087,1.207,1088,1.44,1089,2.341,1090,2.341,1091,1.539,1092,2.341,1093,2.341,1094,3.166,1095,1.539,1096,1.539,1097,2.341,1098,4.245,1099,2.059,1100,2.059,1101,1.539,1102,1.44,1103,1.44,1104,2.19,1105,1.44,1106,1.44,1107,3.824,1108,1.44,1109,1.44,1110,1.44,1111,1.44,1112,2.833,1113,2.833,1114,2.833,1115,3.166,1116,2.341,1117,2.341,1118,2.833,1119,3.588,1120,2.341,1121,3.73,1122,3.588,1123,2.341,1124,3.588,1125,2.341,1126,1.539,1127,1.539,1128,2.341,1129,1.539,1130,1.539,1131,1.539,1132,1.539,1133,1.539,1134,1.539,1135,1.539,1136,3.406,1137,1.539,1138,3.406,1139,1.539,1140,1.539,1141,2.341,1142,1.539,1143,3.166,1144,1.539,1145,3.166,1146,1.539,1147,2.341,1148,2.341,1149,1.539,1150,2.341,1151,1.539,1152,1.539,1153,1.539,1154,1.353,1155,1.44,1156,1.539,1157,1.539,1158,2.833,1159,1.539,1160,1.539,1161,1.539,1162,2.825,1163,2.833,1164,1.539,1165,1.539,1166,1.539,1167,1.539,1168,1.539,1169,1.539,1170,2.341,1171,1.539,1172,1.539,1173,2.491,1174,2.341,1175,1.539,1176,2.35,1177,1.539,1178,1.539,1179,1.539,1180,1.539,1181,1.539,1182,1.539,1183,2.341,1184,2.341,1185,2.341,1186,2.341,1187,2.341,1188,3.588,1189,1.539,1190,3.166,1191,2.341,1192,1.539,1193,1.539,1194,1.539,1195,1.539,1196,2.341,1197,2.059,1198,1.353,1271,3.348,1272,3.348,1273,2.554,1274,2.554,1275,2.554,1276,2.554,1277,2.554,1278,2.554,1279,2.554,1280,2.554,1281,2.554,1282,2.554,1283,2.554,1284,2.554,1285,2.554,1286,2.554,1287,2.554,1288,2.554,1289,2.554,1290,2.554]],["title/classes/MatrixGenerator.html",[0,0.097,1198,2.025]],["body/classes/MatrixGenerator.html",[0,0.151,2,0.811,3,0.136,4,0.121,5,0.121,7,0.211,9,1.857,19,0.871,21,2.043,22,0.018,23,0.873,24,0.437,28,0.152,55,2.027,73,0.749,78,1.016,81,0.778,86,0.863,108,0.849,114,0.889,125,1.24,128,0.516,145,1.501,183,1.482,205,0.01,206,0.01,226,0.617,283,1.781,415,0.273,423,1.867,442,1.652,895,2.143,1085,1.457,1086,2.273,1087,1.378,1088,1.643,1089,2.585,1090,2.585,1091,1.757,1092,2.585,1093,2.585,1094,3.382,1095,1.757,1096,1.757,1097,2.585,1098,4.217,1099,2.273,1100,2.273,1101,1.757,1102,1.643,1103,1.643,1104,2.418,1105,1.643,1106,1.643,1107,3.827,1108,1.643,1109,1.643,1110,1.643,1111,1.643,1112,1.757,1113,1.757,1114,1.757,1115,3.382,1116,2.585,1117,2.585,1118,2.585,1119,3.382,1120,2.585,1121,3.897,1122,3.769,1123,2.585,1124,3.604,1125,2.585,1126,1.757,1127,1.757,1128,2.585,1129,1.757,1130,1.757,1131,1.757,1132,1.757,1133,1.757,1134,1.757,1135,1.757,1136,2.585,1137,1.757,1138,2.585,1139,1.757,1140,1.757,1141,2.585,1142,1.757,1143,3.382,1144,1.757,1145,3.382,1146,1.757,1147,1.757,1148,2.585,1149,1.757,1150,1.757,1151,1.757,1152,1.757,1153,1.757,1154,1.545,1155,1.643,1156,1.757,1157,1.757,1158,3.066,1159,1.757,1160,1.757,1161,1.757,1162,2.989,1163,3.066,1164,1.757,1165,1.757,1166,1.757,1167,1.757,1168,1.757,1169,1.757,1170,2.585,1171,1.757,1172,1.757,1173,2.696,1174,2.585,1175,1.757,1176,2.543,1177,1.757,1178,1.757,1179,1.757,1180,1.757,1181,1.757,1182,1.757,1183,2.585,1184,2.585,1185,2.585,1186,2.585,1187,2.585,1188,3.769,1189,1.757,1190,3.382,1191,2.585,1192,1.757,1193,1.757,1194,1.757,1195,1.757,1196,2.585,1197,2.273,1198,2.273,1291,2.916]],["title/classes/MatrixUtil.html",[0,0.097,1173,2.025]],["body/classes/MatrixUtil.html",[0,0.146,2,0.744,3,0.125,4,0.111,5,0.111,7,0.223,8,0.376,9,1.927,16,0.851,19,0.847,21,2.017,22,0.018,23,0.866,24,0.909,26,1.122,27,0.764,28,0.301,29,0.931,42,1.086,43,0.669,55,1.902,73,0.703,78,1.041,81,0.756,86,0.843,108,0.779,114,0.845,125,1.138,128,0.484,145,2.121,183,1.566,205,0.009,206,0.009,226,0.566,283,1.693,415,0.25,423,1.775,442,1.549,895,2.011,1085,1.337,1086,2.132,1087,1.264,1088,1.508,1089,2.425,1090,2.425,1091,1.612,1092,2.425,1093,2.425,1094,3.242,1095,1.612,1096,1.612,1097,2.425,1098,4.309,1099,2.132,1100,2.132,1101,1.612,1102,1.508,1103,1.508,1104,2.269,1105,1.508,1106,1.508,1107,3.813,1108,1.508,1109,1.508,1110,1.508,1111,1.508,1112,1.612,1113,1.612,1114,1.612,1115,3.242,1116,2.425,1117,2.425,1118,2.425,1119,3.242,1120,2.425,1121,3.789,1122,3.652,1123,2.425,1124,3.476,1125,2.425,1126,1.612,1127,1.612,1128,2.425,1129,1.612,1130,1.612,1131,1.612,1132,1.612,1133,1.612,1134,1.612,1135,1.612,1136,2.425,1137,1.612,1138,2.425,1139,1.612,1140,1.612,1141,2.425,1142,1.612,1143,3.242,1144,1.612,1145,3.242,1146,1.612,1147,1.612,1148,2.425,1149,1.612,1150,1.612,1151,1.612,1152,1.612,1153,1.612,1154,1.418,1155,1.508,1156,1.612,1157,1.612,1158,2.915,1159,1.612,1160,1.612,1161,1.612,1162,3.308,1163,2.915,1164,1.612,1165,1.612,1166,1.612,1167,1.612,1168,1.612,1169,1.612,1170,2.425,1171,1.612,1172,1.612,1173,3.211,1174,3.242,1175,2.425,1176,2.417,1177,1.612,1178,1.612,1179,1.612,1180,1.612,1181,1.612,1182,2.425,1183,3.652,1184,2.425,1185,2.425,1186,2.425,1187,2.425,1188,3.652,1189,1.612,1190,3.242,1191,2.425,1192,2.425,1193,1.612,1194,3.242,1195,1.612,1196,2.425,1197,2.132,1198,1.418,1292,4.025,1293,4.025,1294,4.025,1295,4.025,1296,2.676,1297,4.025,1298,2.676,1299,2.676,1300,2.305,1301,2.676]],["title/classes/NodeType.html",[0,0.097,1302,2.476]],["body/classes/NodeType.html",[0,0.155,2,1.143,3,0.192,4,0.17,5,0.17,7,0.27,8,0.51,19,0.915,21,1.815,22,0.018,23,0.739,24,0.979,26,0.953,27,0.649,28,0.214,29,0.79,42,0.829,43,0.906,78,1.085,81,0.736,86,0.922,108,1.899,111,0.717,114,1.07,128,0.736,183,1.783,185,2.001,205,0.012,206,0.012,224,1.372,389,3.074,423,1.507,426,2.315,442,2.742,759,2.319,979,2.893,1010,3.456,1078,2.315,1162,2.052,1176,3.259,1302,3.533,1303,2.884,1304,4.717,1305,4.717,1306,5.454,1307,4.107,1308,4.107,1309,4.107,1310,4.107,1311,4.201,1312,3.163,1313,3.163,1314,4.201,1315,2.884,1316,3.279,1317,4.398,1318,3.163,1319,3.829,1320,2.884,1321,2.884,1322,2.884,1323,2.884,1324,4.398,1325,3.829,1326,4.3,1327,3.829,1328,3.163,1329,3.163,1330,2.884,1331,3.829,1332,3.163,1333,2.884,1334,2.884,1335,2.884,1336,3.163,1337,3.163,1338,3.163,1339,3.163,1340,3.533,1341,3.163,1342,3.163,1343,3.163,1344,3.163,1345,3.163,1346,3.163,1347,3.163,1348,3.163,1349,4.201,1350,3.163,1351,3.163,1352,3.163,1353,3.163]],["title/classes/NumberMatrix.html",[0,0.097,1154,2.025]],["body/classes/NumberMatrix.html",[0,0.138,2,0.655,3,0.11,4,0.098,5,0.098,7,0.209,8,0.341,9,2,16,0.772,19,0.777,21,2.041,22,0.018,23,0.868,24,1.079,26,1.395,27,0.95,28,0.375,29,1.157,42,1.214,55,1.725,73,0.638,78,1.079,81,0.723,86,0.813,108,0.685,114,0.781,125,1.001,128,0.439,145,1.277,183,1.301,205,0.008,206,0.008,226,0.772,283,1.564,382,1.552,415,0.22,423,1.64,442,2.219,895,1.824,1078,3.25,1085,1.824,1086,2.368,1087,1.112,1088,2.52,1089,3.034,1090,3.034,1091,2.693,1092,3.034,1093,3.034,1094,3.473,1095,2.693,1096,2.693,1097,3.283,1098,4.207,1099,1.934,1100,1.934,1101,1.419,1102,1.327,1103,1.327,1104,2.057,1105,1.327,1106,1.327,1107,3.862,1108,1.327,1109,1.327,1110,1.327,1111,1.327,1112,2.693,1113,2.693,1114,2.693,1115,3.034,1116,2.199,1117,2.199,1118,2.693,1119,3.473,1120,2.199,1121,3.623,1122,3.473,1123,2.199,1124,3.473,1125,2.199,1126,1.419,1127,1.419,1128,2.199,1129,1.419,1130,1.419,1131,1.419,1132,1.419,1133,1.419,1134,1.419,1135,1.419,1136,2.199,1137,1.419,1138,2.199,1139,1.419,1140,1.419,1141,2.199,1142,1.419,1143,3.034,1144,1.419,1145,3.034,1146,1.419,1147,2.199,1148,2.199,1149,1.419,1150,2.199,1151,1.419,1152,1.419,1153,1.419,1154,1.934,1155,2.52,1156,2.693,1157,1.419,1158,2.693,1159,1.419,1160,1.419,1161,2.199,1162,2.88,1163,2.693,1164,1.419,1165,1.419,1166,1.419,1167,1.419,1168,1.419,1169,2.199,1170,2.199,1171,1.419,1172,1.419,1173,2.368,1174,2.199,1175,1.419,1176,2.233,1177,1.419,1178,1.419,1179,1.419,1180,1.419,1181,1.419,1182,1.419,1183,2.199,1184,2.199,1185,2.199,1186,2.199,1187,2.199,1188,3.473,1189,1.419,1190,3.034,1191,2.199,1192,1.419,1193,1.419,1194,1.419,1195,1.419,1196,2.199,1197,1.934,1198,1.247,1271,3.145,1272,3.145,1300,3.851,1354,3.65,1355,2.354,1356,2.354,1357,2.354,1358,2.354,1359,2.354,1360,2.354,1361,2.354,1362,2.354,1363,2.354,1364,5.449,1365,2.354,1366,2.354,1367,2.354,1368,2.354,1369,2.354,1370,2.354,1371,2.354,1372,2.354,1373,2.354,1374,2.354,1375,2.354,1376,2.354]],["title/classes/NumberMatrixUtil.html",[0,0.097,1197,2.025]],["body/classes/NumberMatrixUtil.html",[0,0.15,2,0.802,3,0.135,4,0.119,5,0.119,7,0.231,8,0.398,9,1.852,19,0.868,21,2.04,22,0.018,23,0.872,24,0.638,28,0.222,55,2.009,73,0.743,78,1.057,81,0.775,86,0.86,108,0.839,114,0.883,125,1.225,128,0.511,145,1.488,183,1.471,205,0.01,206,0.01,226,0.609,283,1.769,415,0.269,423,1.855,442,1.637,895,2.125,1085,1.439,1086,2.253,1087,1.361,1088,1.624,1089,2.562,1090,2.562,1091,1.736,1092,2.562,1093,2.562,1094,3.362,1095,1.736,1096,1.736,1097,2.562,1098,4.21,1099,2.253,1100,2.253,1101,1.736,1102,1.624,1103,1.624,1104,2.397,1105,1.624,1106,1.624,1107,3.823,1108,1.624,1109,1.624,1110,1.624,1111,1.624,1112,1.736,1113,1.736,1114,1.736,1115,3.362,1116,2.562,1117,2.562,1118,2.562,1119,3.362,1120,2.562,1121,3.882,1122,3.753,1123,2.562,1124,3.586,1125,2.562,1126,1.736,1127,1.736,1128,2.562,1129,1.736,1130,1.736,1131,1.736,1132,1.736,1133,1.736,1134,1.736,1135,1.736,1136,2.562,1137,1.736,1138,2.562,1139,1.736,1140,1.736,1141,2.562,1142,1.736,1143,3.362,1144,1.736,1145,3.362,1146,1.736,1147,1.736,1148,2.562,1149,1.736,1150,1.736,1151,1.736,1152,1.736,1153,1.736,1154,1.526,1155,1.624,1156,1.736,1157,1.736,1158,3.045,1159,1.736,1160,1.736,1161,1.736,1162,2.974,1163,3.045,1164,1.736,1165,1.736,1166,1.736,1167,1.736,1168,1.736,1169,1.736,1170,2.562,1171,1.736,1172,1.736,1173,2.678,1174,3.362,1175,1.736,1176,2.525,1177,1.736,1178,1.736,1179,1.736,1180,1.736,1181,1.736,1182,1.736,1183,2.562,1184,2.562,1185,2.562,1186,2.562,1187,2.562,1188,3.753,1189,1.736,1190,3.362,1191,2.562,1192,1.736,1193,1.736,1194,1.736,1195,1.736,1196,2.562,1197,2.956,1198,1.526,1377,2.881,1378,2.881]],["title/components/StockListComponent.html",[218,0.847,299,1.472]],["body/components/StockListComponent.html",[0,0.12,3,0.222,4,0.197,5,0.197,7,0.197,16,1.268,19,0.885,22,0.018,24,0.9,27,0.948,42,0.96,43,0.997,48,0.751,205,0.014,206,0.014,218,1.455,219,1.831,220,2.686,221,2.247,222,2.247,223,2.247,224,2.304,226,1.268,227,2.529,228,2.247,229,2.951,230,2.682,232,2.309,234,2.309,241,2.656,258,1.155,259,0.831,281,2.247,282,2.834,283,2.099,284,2.247,285,3.259,286,2.247,287,2.247,288,2.023,289,2.247,290,1.923,291,2.247,292,1.665,293,2.247,294,1.589,295,2.023,296,2.247,297,1.745,298,2.247,299,2.656,300,3.582,301,2.247,302,1.831,303,2.247,304,1.831,305,2.247,306,1.831,307,2.247,308,2.247,309,2.247,352,5.06,1379,5.659,1380,4.098,1381,6.898,1382,6.569,1383,5.998,1384,4.756,1385,4.756,1386,5.998]],["title/interfaces/SystemOutput.html",[118,1.91,415,0.357]],["body/interfaces/SystemOutput.html",[0,0.109,3,0.138,4,0.122,5,0.122,7,0.122,8,0.404,9,1.901,10,1.662,11,3.263,12,1.662,15,1.662,19,0.397,21,2.084,22,0.018,23,0.838,28,0.365,32,3.789,39,3.438,41,4.41,45,3.183,50,2.438,53,2.888,56,1.662,64,3.387,70,3.181,71,3.387,72,3.181,73,1.269,74,2.989,75,3.181,78,0.847,79,1.662,80,2.819,81,0.817,86,0.848,87,1.662,94,2.438,99,1.662,108,1.828,111,0.895,114,0.515,118,2.559,119,1.662,120,1.393,144,1.662,145,2.417,149,1.662,150,1.662,151,1.662,152,3.181,153,1.662,154,1.662,155,2.438,156,2.438,157,1.662,158,1.662,159,3.181,160,1.662,161,1.662,162,1.662,163,1.662,164,1.662,165,1.662,166,1.662,167,1.662,168,1.662,169,1.662,170,1.662,171,3.181,172,1.662,173,2.888,174,2.888,175,1.662,176,2.888,177,1.662,178,1.662,179,1.662,180,1.662,181,1.662,182,2.438,183,1.259,184,2.888,185,1.082,186,1.662,187,1.662,188,2.438,189,1.662,190,1.662,191,2.438,192,2.438,193,1.662,194,1.662,195,2.438,196,1.662,197,1.662,198,1.662,199,1.662,200,1.662,201,1.662,202,1.662,203,2.888,204,1.662,205,0.01,206,0.01,383,1.91,384,1.91,385,3.946,386,4.347,387,2.271,388,2.271,390,3.332,391,2.271,392,3.332,394,2.271,414,2.271,415,0.276,416,3.946,417,2.271,418,4.838,419,3.946,420,3.332,421,3.946,422,2.271,423,1.88,424,2.271,425,2.271,426,1.662,427,2.271,428,2.271,429,2.271,430,2.271,431,2.271,432,2.271,433,2.271,434,1.662,435,3.946,436,2.271,437,2.271,438,2.271,439,2.271,440,2.271,441,2.271,442,1.665,443,2.271,444,2.271,445,2.271,446,2.271,447,1.91,460,3.037,563,1.032]],["title/classes/Tree.html",[0,0.097,224,1.277]],["body/classes/Tree.html",[0,0.156,2,1.156,3,0.194,4,0.172,5,0.172,7,0.271,8,0.514,19,0.883,21,1.823,22,0.018,23,0.698,24,0.825,26,0.964,27,0.656,28,0.287,29,0.8,43,0.691,78,1.088,81,0.741,86,0.924,108,1.908,111,0.726,114,1.076,128,0.741,183,1.793,185,2.017,205,0.012,206,0.012,224,1.836,382,1.767,423,1.525,426,2.342,442,2.825,759,2.619,979,2.91,1010,3.472,1078,2.342,1162,2.076,1176,3.275,1302,2.692,1303,2.918,1304,3.201,1305,3.201,1311,3.201,1312,3.201,1313,3.201,1314,4.234,1315,4.325,1316,3.318,1317,4.537,1318,3.201,1319,3.859,1320,2.918,1321,2.918,1322,2.918,1323,2.918,1324,4.415,1325,3.859,1326,4.325,1327,3.859,1328,3.201,1329,3.201,1330,2.918,1331,3.859,1332,3.201,1333,2.918,1334,2.918,1335,2.918,1336,3.201,1337,3.201,1338,3.201,1339,3.201,1340,3.56,1341,3.201,1342,3.201,1343,3.201,1344,3.201,1345,3.201,1346,3.201,1347,3.201,1348,3.201,1349,4.234,1350,3.201,1351,3.201,1352,3.201,1353,3.201,1387,4.155,1388,4.155]],["title/classes/Tree-1.html",[0,0.081,111,0.559,224,1.069]],["body/classes/Tree-1.html",[0,0.136,2,1.502,3,0.252,4,0.224,5,0.224,7,0.224,8,0.606,16,1.371,19,0.727,22,0.018,24,1.043,26,1.252,27,0.853,28,0.338,29,1.039,42,1.09,48,0.853,78,1.043,86,0.688,108,1.572,128,0.649,205,0.015,206,0.015,224,2.321,259,0.943,442,2.676,759,2.296,1315,4.88,1316,3.302,1317,4.2,1319,4.553,1320,3.791,1389,4.343,1390,4.651,1391,7.209,1392,6.484,1393,5.399,1394,3.791]],["title/components/TreeChildComponent.html",[218,0.847,302,1.472]],["body/components/TreeChildComponent.html",[0,0.112,3,0.207,4,0.183,5,0.183,7,0.183,11,2.705,16,1.211,19,0.855,22,0.018,24,0.952,27,0.905,28,0.231,42,0.893,43,0.735,48,0.905,205,0.013,206,0.013,218,1.406,219,1.703,220,2.564,221,2.09,222,2.09,223,2.09,224,2.52,226,1.211,227,2.444,228,2.09,229,2.921,230,2.655,232,2.204,234,2.204,241,2.585,258,1.074,259,0.773,278,3.407,281,2.09,282,2.705,283,2.004,284,2.09,285,3.172,286,2.09,287,2.09,288,1.881,289,2.09,290,1.789,291,2.09,292,1.548,293,2.09,294,1.477,295,1.881,296,2.09,297,1.623,298,2.09,299,1.703,300,2.09,301,2.09,302,2.585,303,2.09,304,1.703,305,2.09,306,1.703,307,2.09,308,2.09,309,2.09,340,4.349,342,5.172,480,4.02,495,1.981,499,2.865,500,1.981,505,2.493,729,4.933,731,3.811,783,1.981,797,2.493,956,4.113,979,2.09,1010,2.343,1316,2.843,1340,3.709,1389,4.045,1394,3.106,1395,3.811,1396,6.349,1397,5.726,1398,5.726,1399,4.423,1400,3.407,1401,5.726,1402,4.423,1403,5.726,1404,4.423,1405,4.423,1406,4.423,1407,4.423,1408,4.423,1409,4.423,1410,4.423,1411,4.423]],["title/classes/TreeDataSource.html",[0,0.097,938,2.476]],["body/classes/TreeDataSource.html",[0,0.144,2,0.993,3,0.167,4,0.148,5,0.148,7,0.255,8,0.463,9,1.514,21,1.712,22,0.018,23,0.404,24,0.923,27,0.564,28,0.321,43,0.824,48,1.022,51,1.443,73,0.866,76,2.011,78,0.744,81,0.778,86,0.824,106,1.309,111,1.169,114,0.866,128,0.685,135,1.783,183,1.658,185,2.258,205,0.011,206,0.011,226,1.048,231,1.783,258,0.866,259,1.075,415,0.334,423,1.819,434,2.794,542,3.69,702,2.15,759,2.75,933,2.108,934,2.311,936,2.505,937,4.982,938,4.189,941,4.741,943,3.818,944,2.749,945,2.986,947,2.749,948,2.749,949,4.741,951,4.322,952,2.749,953,3.708,954,3.818,957,4.982,968,2.749,969,5.545,970,2.749,971,2.749,972,2.749,973,3.999,974,2.311,975,2.505,976,2.749,977,2.749,978,3.999,979,2.691,980,3.999,981,3.818,982,4.741,983,2.749,984,4.741,985,2.15,986,3.818,987,2.749,988,3.818,989,2.749,990,4.388,991,2.749,992,2.749,993,2.749,994,2.749,995,3.818,996,3.818,997,3.818,998,3.818,999,3.818,1000,3.818,1001,3.818,1002,3.818,1003,2.749,1004,2.749,1005,2.749,1006,2.749,1007,3.818,1008,2.749,1009,2.749,1010,2.626,1011,2.749,1012,2.749,1013,4.388,1014,3.818,1015,4.388,1016,3.818,1017,2.749,1018,3.818,1019,2.749,1020,2.749,1078,2.794,1412,3.568,1413,3.568,1414,3.568,1415,3.568]],["title/classes/TreeNode.html",[0,0.097,1316,1.712]],["body/classes/TreeNode.html",[0,0.145,2,1.006,3,0.169,4,0.15,5,0.15,7,0.256,8,0.468,16,1.058,19,0.834,21,1.917,22,0.018,23,0.702,24,1.094,26,1.436,27,0.978,28,0.351,29,1.191,42,1.312,43,0.832,78,1.118,81,0.69,86,0.895,106,1.327,108,1.802,111,0.632,114,1.002,128,0.69,183,1.957,185,1.836,205,0.011,206,0.011,209,1.709,224,1.208,389,2.821,423,1.327,426,2.039,442,2.779,759,2.764,956,3.242,960,2.786,979,2.711,1010,3.721,1025,2.786,1078,3.234,1162,1.807,1176,3.093,1302,2.343,1303,2.54,1304,2.786,1305,2.786,1311,2.786,1312,2.786,1313,2.786,1314,3.855,1315,2.54,1316,3.387,1317,4.355,1318,2.786,1319,3.514,1320,2.54,1321,4.029,1322,4.029,1323,4.029,1324,4.464,1325,3.514,1326,4.029,1327,3.514,1328,4.769,1329,2.786,1330,4.347,1331,3.514,1332,2.786,1333,2.54,1334,3.514,1335,2.54,1336,3.855,1337,2.786,1338,2.786,1339,2.786,1340,3.716,1341,2.786,1342,3.855,1343,4.419,1344,3.855,1345,3.855,1346,3.855,1347,2.786,1348,2.786,1349,3.855,1350,2.786,1351,2.786,1352,2.786,1353,2.786,1416,4.311,1417,5.004,1418,5.004,1419,3.617,1420,3.617,1421,3.617,1422,3.617,1423,3.617,1424,3.617,1425,3.617,1426,3.617,1427,3.617,1428,3.617,1429,3.617]],["title/classes/TreeNode-1.html",[0,0.081,111,0.559,1316,1.434]],["body/classes/TreeNode-1.html",[0,0.114,2,1.255,3,0.211,4,0.187,5,0.187,7,0.187,8,0.542,16,1.226,19,0.608,22,0.018,23,0.511,24,1.107,26,1.345,27,0.916,28,0.365,29,1.116,42,1.17,43,0.75,78,1.118,86,0.862,108,1.313,114,0.788,205,0.013,206,0.013,259,0.788,389,3.269,442,2.757,759,2.976,960,3.475,979,3.028,1010,3.859,1025,3.475,1316,3.471,1317,3.757,1321,4.5,1322,4.5,1323,4.5,1324,4.533,1325,4.072,1326,4.5,1327,4.072,1330,4.75,1331,4.5,1333,3.168,1334,4.072,1335,3.168,1340,2.923,1389,4.491,1416,4.996,1430,6.422,1431,3.887,1432,5.799,1433,4.512,1434,4.512,1435,4.512,1436,4.512,1437,4.512,1438,4.512]],["title/components/TreeParentComponent.html",[218,0.847,304,1.472]],["body/components/TreeParentComponent.html",[0,0.108,3,0.199,4,0.176,5,0.176,7,0.176,8,0.522,11,2.641,16,1.182,19,0.84,22,0.018,24,1.031,26,0.989,27,0.985,28,0.325,29,0.82,42,1.128,43,0.929,48,0.985,108,1.241,205,0.013,206,0.013,218,1.381,219,1.641,220,2.503,221,2.014,222,2.014,223,2.014,224,2.588,226,1.182,227,2.401,228,2.014,229,2.905,230,2.641,232,2.152,234,2.152,241,2.548,258,1.035,259,0.744,281,2.014,282,2.641,283,1.956,284,2.014,285,3.128,286,2.014,287,2.014,288,1.812,289,2.014,290,1.723,291,2.014,292,1.492,293,2.014,294,1.424,295,1.812,296,2.014,297,1.564,298,2.014,299,1.641,300,2.014,301,2.014,302,1.641,303,2.014,304,2.548,305,2.014,306,1.641,307,2.014,308,2.014,309,2.014,340,4.569,344,5.433,480,3.924,759,2.377,1316,3.158,1324,3.62,1389,4.249,1394,2.993,1400,4.305,1439,3.672,1440,6.236,1441,5.589,1442,5.589,1443,4.262,1444,4.262,1445,5.589,1446,6.619,1447,4.262,1448,4.262,1449,4.262,1450,4.262,1451,4.262,1452,3.672,1453,4.262,1454,4.262,1455,5.589]],["title/components/TreeViewComponent.html",[218,0.847,306,1.472]],["body/components/TreeViewComponent.html",[0,0.104,3,0.193,4,0.171,5,0.171,7,0.171,8,0.512,16,1.158,19,0.828,22,0.018,24,0.981,27,0.865,28,0.216,42,1.105,43,1.021,48,0.971,114,1.073,125,2.329,128,0.787,205,0.012,206,0.012,218,1.361,219,1.591,220,2.453,221,1.953,222,1.953,223,1.953,224,2.58,226,1.158,227,2.365,228,1.953,229,2.892,230,2.629,231,2.737,232,2.109,234,2.109,241,2.518,258,1.004,259,0.722,281,1.953,282,2.588,283,1.917,284,1.953,285,3.09,286,1.953,287,1.953,288,1.758,289,1.953,290,1.671,291,1.953,292,1.447,293,1.953,294,1.381,295,1.758,296,1.953,297,1.517,298,1.953,299,1.591,300,1.953,301,1.953,302,1.591,303,1.953,304,1.591,305,1.953,306,2.518,307,2.902,308,1.953,309,1.953,340,4.408,759,1.758,786,2.902,956,4.408,979,2.902,1316,2.751,1389,4.1,1394,2.902,1400,4.219,1452,3.561,1456,3.561,1457,6.143,1458,5.477,1459,6.54,1460,5.477,1461,4.133,1462,4.133,1463,4.133,1464,4.133,1465,4.133,1466,4.133,1467,6.54,1468,4.133,1469,4.133,1470,4.133,1471,4.133,1472,4.133,1473,4.133,1474,4.133,1475,4.133,1476,4.133]],["title/coverage.html",[1477,4.477]],["body/coverage.html",[0,0.191,1,2.052,5,0.141,6,3.907,22,0.018,28,0.178,49,2.052,51,2.74,69,2.052,114,1.385,117,2.052,118,1.702,128,0.41,205,0.011,206,0.011,218,1.579,219,1.311,224,1.603,225,2.935,288,1.448,290,1.377,292,1.192,294,1.138,297,1.25,299,1.311,302,1.311,304,1.311,306,1.311,340,3.599,342,2.624,344,2.624,349,3.347,352,2.624,362,2.392,366,2.624,383,2.207,384,3.599,415,0.69,447,2.207,466,2.935,501,2.207,502,3.696,503,2.207,556,2.149,561,2.392,562,2.052,564,1.92,566,2.943,568,2.392,639,2.935,766,3.599,767,3.599,788,1.924,824,3.599,855,3.901,856,3.901,930,2.207,933,2.565,934,2.207,936,3.901,938,2.207,945,2.052,953,2.052,1021,2.935,1022,2.935,1055,2.624,1056,2.935,1057,2.935,1058,2.935,1060,2.624,1061,2.935,1062,2.935,1063,2.935,1077,2.935,1079,3.901,1080,2.207,1084,2.207,1086,1.805,1087,3.27,1099,1.805,1100,1.805,1107,1.702,1154,1.805,1173,1.805,1197,1.805,1198,1.805,1199,2.935,1232,2.624,1234,3.696,1250,2.624,1302,2.207,1303,3.901,1316,2.149,1379,2.935,1380,2.935,1389,3.83,1390,2.935,1395,2.935,1430,2.935,1431,2.935,1439,2.935,1456,2.935,1477,2.935,1478,3.406,1479,3.406,1480,3.406,1481,6.596,1482,6.777,1483,6.596,1484,5.555,1485,6.031,1486,3.406,1487,7.035,1488,5.22,1489,5.22,1490,7.277,1491,2.935,1492,7.277,1493,2.935,1494,2.935,1495,2.935,1496,2.935,1497,2.935,1498,5.555,1499,3.406,1500,4.799,1501,3.406,1502,6.031,1503,3.406,1504,3.406,1505,2.935,1506,4.134,1507,2.935,1508,3.406,1509,3.406]],["title/dependencies.html",[313,3.224,1510,2.758]],["body/dependencies.html",[22,0.018,205,0.015,206,0.015,258,1.322,310,1.906,313,3.824,327,5.615,328,5.021,360,4.195,481,2.509,974,3.528,975,3.824,1068,4.692,1214,4.692,1511,5.446,1512,7.647,1513,5.446,1514,6.518,1515,5.446,1516,5.446,1517,5.446,1518,5.446,1519,5.446,1520,5.446,1521,5.446,1522,5.446,1523,5.446,1524,5.446,1525,5.446,1526,5.446,1527,5.446,1528,5.446,1529,5.446,1530,5.446,1531,5.446,1532,5.446,1533,5.446,1534,5.446,1535,5.446]],["title/miscellaneous/enumerations.html",[1536,1.929,1537,3.956]],["body/miscellaneous/enumerations.html",[7,0.244,22,0.017,106,2.647,205,0.016,206,0.016,1087,2.79,1102,3.853,1103,3.328,1104,3.853,1105,3.328,1106,3.328,1107,2.95,1108,3.328,1109,3.328,1110,3.328,1111,3.328,1536,3.557,1537,5.086,1538,4.548]],["title/index.html",[7,0.133,1539,3.202,1540,3.202]],["body/index.html",[4,0.213,22,0.014,27,0.813,128,0.619,205,0.014,206,0.014,218,1.508,226,1.088,230,1.8,320,3.962,951,3.612,1088,2.9,1510,4.432,1541,5.144,1542,6.297,1543,5.144,1544,6.805,1545,6.805,1546,5.144,1547,5.144,1548,5.144,1549,6.297,1550,7.275,1551,7.497,1552,5.144,1553,5.144,1554,5.144,1555,5.144,1556,5.144,1557,5.144,1558,5.144,1559,5.144,1560,5.144,1561,6.805,1562,6.805,1563,5.144,1564,7.091,1565,5.144,1566,5.144,1567,5.144,1568,5.144,1569,6.297,1570,6.297,1571,7.091,1572,5.144,1573,6.297,1574,6.297,1575,5.144,1576,7.403,1577,5.144,1578,5.144,1579,5.144,1580,6.297,1581,5.144,1582,5.144,1583,5.144,1584,5.144,1585,5.144,1586,6.805,1587,5.144,1588,5.144,1589,5.144,1590,3.962,1591,5.144,1592,5.144]],["title/modules.html",[312,3.366]],["body/modules.html",[22,0.016,205,0.016,206,0.016,311,4.249,312,3.92,318,3.92,328,4.661,1593,6.051,1594,6.051,1595,6.933,1596,6.051,1597,6.051]],["title/overview.html",[1590,4.003]],["body/overview.html",[2,1.469,22,0.018,111,0.923,114,0.923,116,3.182,134,2.798,205,0.015,206,0.015,219,2.902,220,2.365,292,2.409,294,2.299,297,2.526,299,2.65,302,2.65,304,2.65,306,2.65,311,5.557,312,3.421,313,4.493,314,4.55,315,4.55,316,4.55,317,4.55,318,4.46,319,4.929,320,4.069,563,1.848,597,2.639,610,2.639,935,3.421,1232,4.069,1590,4.069,1598,5.282,1599,5.282]],["title/routes.html",[359,4.003]],["body/routes.html",[22,0.016,205,0.016,206,0.016,359,4.743]],["title/miscellaneous/typealiases.html",[1536,1.929,1600,4.592]],["body/miscellaneous/typealiases.html",[7,0.221,21,2.046,22,0.017,23,0.73,28,0.383,32,3.666,39,3.414,45,3.414,51,2.973,73,1.126,205,0.015,206,0.015,384,3.462,460,5.045,520,3.394,566,3.414,766,3.462,767,4.175,788,2.056,824,3.462,1087,2.525,1098,3.633,1488,4.117,1489,5.664,1536,3.22,1538,4.117,1601,5.344,1602,6.919,1603,5.344,1604,5.344,1605,5.552,1606,6.189,1607,5.552,1608,5.552,1609,5.552]],["title/miscellaneous/variables.html",[1536,1.929,1610,3.956]],["body/miscellaneous/variables.html",[7,0.117,21,0.784,22,0.018,23,0.867,28,0.322,49,2.52,51,2.762,73,1.193,74,2.642,81,0.884,86,0.787,106,2.574,111,1.172,114,1.26,128,0.339,134,1.492,185,1.83,205,0.009,206,0.009,209,3.315,562,2.52,597,1.407,610,2.492,695,2.17,702,1.697,782,3.315,783,3.006,1030,2.427,1087,1.331,1099,2.215,1100,2.215,1155,3.111,1234,2.17,1250,3.221,1251,2.427,1488,2.17,1489,5.061,1491,3.603,1493,3.603,1494,3.603,1495,3.603,1496,4.297,1497,3.603,1505,2.427,1506,4.755,1507,2.427,1536,1.697,1538,3.221,1605,6.108,1606,5.511,1607,2.427,1608,2.427,1609,4.297,1610,4.755,1611,2.817,1612,2.817,1613,2.817,1614,4.182,1615,2.817,1616,2.817,1617,4.182,1618,6.57,1619,6.712,1620,5.897,1621,6.178,1622,6.396,1623,4.182,1624,4.988,1625,5.52,1626,4.182,1627,2.817,1628,2.817,1629,4.182,1630,2.817,1631,2.817,1632,4.988,1633,2.817,1634,5.52,1635,2.817,1636,6.178,1637,2.817,1638,2.817,1639,2.817,1640,2.817,1641,2.817,1642,6.178,1643,5.897,1644,2.817,1645,5.897,1646,2.817,1647,2.817,1648,2.817,1649,4.182,1650,4.988,1651,4.182,1652,2.817,1653,2.817,1654,2.817,1655,2.817,1656,4.182,1657,2.817,1658,2.817,1659,2.817,1660,2.817,1661,4.988,1662,4.988,1663,4.988,1664,5.52,1665,4.182,1666,2.817,1667,4.182,1668,2.817,1669,2.817,1670,4.988,1671,2.817,1672,4.182,1673,2.817,1674,2.817,1675,4.182,1676,2.817,1677,4.182,1678,2.817,1679,2.817,1680,2.817,1681,2.817,1682,2.817,1683,2.817,1684,2.817,1685,4.988,1686,2.817]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":114,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.0.29",{"_index":1520,"title":{},"body":{"dependencies.html":{}}}],["0.1/framerate",{"_index":579,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["0.11.4",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["0.137.5",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["0.5)*radius",{"_index":909,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["0.5/(60",{"_index":581,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["0.8.3",{"_index":1522,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1492,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1484,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1500,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1501,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1498,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1502,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1482,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["000",{"_index":813,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["000099",{"_index":602,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["01",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":111,"title":{"interfaces/ICenter-1.html":{},"interfaces/IStrokeStyle-1.html":{},"classes/Tree-1.html":{},"classes/TreeNode-1.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"classes/NodeType.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1)*radius,(2*i",{"_index":919,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["1)*radius,radius,radius",{"_index":920,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["1.0.1",{"_index":1521,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":1524,"title":{},"body":{"dependencies.html":{}}}],["1.2.10",{"_index":1525,"title":{},"body":{"dependencies.html":{}}}],["1.5",{"_index":686,"title":{},"body":{"components/ClockComponent.html":{}}}],["1.7.1",{"_index":1526,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":1504,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":610,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":277,"title":{},"body":{"components/AppComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["1000",{"_index":135,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"components/ClockComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["10px",{"_index":1411,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["11",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12",{"_index":603,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["120",{"_index":638,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["128&layers=h",{"_index":1256,"title":{},"body":{"guards/MapResolver.html":{}}}],["13.1.0",{"_index":1512,"title":{},"body":{"dependencies.html":{}}}],["13.1.1",{"_index":1514,"title":{},"body":{"dependencies.html":{}}}],["13.1.2",{"_index":1547,"title":{},"body":{"index.html":{}}}],["14",{"_index":1599,"title":{},"body":{"overview.html":{}}}],["15",{"_index":696,"title":{},"body":{"components/ClockComponent.html":{},"components/MapComponent.html":{}}}],["16",{"_index":1503,"title":{},"body":{"coverage.html":{}}}],["160",{"_index":273,"title":{},"body":{"components/AppComponent.html":{}}}],["180",{"_index":755,"title":{},"body":{"components/ClockComponent.html":{}}}],["19",{"_index":1598,"title":{},"body":{"overview.html":{}}}],["1px",{"_index":1403,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["2",{"_index":597,"title":{"interfaces/ICenter-2.html":{}},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle-1.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["2)))(this._inputs",{"_index":440,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["2*(i",{"_index":908,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["2.1",{"_index":627,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["2.3",{"_index":626,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["2.3.0",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["2.8",{"_index":622,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["20",{"_index":689,"title":{},"body":{"components/ClockComponent.html":{}}}],["200",{"_index":598,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"interfaces/IClock.html":{}}}],["20px",{"_index":811,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{}}}],["22.71361466327701",{"_index":1221,"title":{},"body":{"components/MapComponent.html":{}}}],["2}).foreach((e",{"_index":896,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["3",{"_index":695,"title":{"interfaces/ICenter-3.html":{}},"body":{"components/ClockComponent.html":{},"miscellaneous/variables.html":{}}}],["3.4.0",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":606,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{}}}],["300",{"_index":837,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["32",{"_index":172,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["360",{"_index":757,"title":{},"body":{"components/ClockComponent.html":{}}}],["4",{"_index":134,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"interfaces/IClock.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["40",{"_index":693,"title":{},"body":{"components/ClockComponent.html":{}}}],["400",{"_index":836,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["484747",{"_index":1407,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["50",{"_index":690,"title":{},"body":{"components/ClockComponent.html":{}}}],["500",{"_index":698,"title":{},"body":{"components/ClockComponent.html":{}}}],["6",{"_index":613,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["6/framerate",{"_index":577,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["60",{"_index":699,"title":{},"body":{"components/ClockComponent.html":{}}}],["7.4.0",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":692,"title":{},"body":{"components/ClockComponent.html":{}}}],["75.9120403994733",{"_index":1223,"title":{},"body":{"components/MapComponent.html":{}}}],["8px",{"_index":1404,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["90",{"_index":685,"title":{},"body":{"components/ClockComponent.html":{}}}],["_api_key",{"_index":1064,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["_bits",{"_index":394,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_children",{"_index":1323,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["_clockobj",{"_index":575,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["_data",{"_index":1321,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["_database",{"_index":944,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["_depth",{"_index":1112,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["_dimension",{"_index":1113,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["_fno",{"_index":392,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_fnos",{"_index":385,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_fnos.filter((f",{"_index":433,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_id",{"_index":1311,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["_input1",{"_index":30,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["_input1.length",{"_index":59,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["_inputs",{"_index":41,"title":{},"body":{"classes/AIBInput.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_inputs?.[0]?.length",{"_index":430,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_instance",{"_index":1174,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["_map",{"_index":1203,"title":{},"body":{"components/MapComponent.html":{}}}],["_matrix",{"_index":1114,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["_name",{"_index":521,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["_node_id",{"_index":1304,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["_output",{"_index":119,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["_outputfnslist",{"_index":47,"title":{},"body":{"classes/AIBInput.html":{}}}],["_parent",{"_index":1322,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["_position",{"_index":519,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["_radius",{"_index":523,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["_root",{"_index":1315,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{}}}],["_symbols",{"_index":386,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["_term",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_treecontrol",{"_index":947,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["_treedatasource",{"_index":968,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["_treedatasource.data",{"_index":992,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["a.h",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["a.map(e",{"_index":168,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["absolute",{"_index":1402,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["abstract",{"_index":1312,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["accessors",{"_index":389,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BooleanMagicBox.html":{},"injectables/DynamicDataSource.html":{},"classes/Matrix.html":{},"classes/NodeType.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["activatedroutesnapshot",{"_index":1248,"title":{},"body":{"guards/MapResolver.html":{}}}],["actual_component",{"_index":309,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["add",{"_index":1088,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"index.html":{}}}],["add(matrixref",{"_index":1161,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["addarrays",{"_index":1292,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["addarrays(arr1",{"_index":1182,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["addchild",{"_index":1416,"title":{},"body":{"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["addchild(child",{"_index":1334,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["addscripttodom",{"_index":1235,"title":{},"body":{"guards/MapResolver.html":{}}}],["addscripttodom(id",{"_index":1240,"title":{},"body":{"guards/MapResolver.html":{}}}],["addto(this._map",{"_index":1227,"title":{},"body":{"components/MapComponent.html":{}}}],["adjoint",{"_index":1089,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["afterviewinit",{"_index":1200,"title":{},"body":{"components/MapComponent.html":{}}}],["aibinput",{"_index":1,"title":{"classes/AIBInput.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"coverage.html":{}}}],["aiboutput",{"_index":69,"title":{"classes/AIBOutput.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"coverage.html":{}}}],["aiboutput(this.systeminputs",{"_index":129,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["aizasyd_7zv9y84sceiijnisabocip2i9_rahd8",{"_index":1251,"title":{},"body":{"guards/MapResolver.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":1601,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1408,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["alpha",{"_index":1071,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["angular",{"_index":1544,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":1511,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1513,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/collections",{"_index":970,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["angular/cdk/tree",{"_index":971,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["angular/common",{"_index":1515,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["angular/compiler",{"_index":1516,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":258,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":1517,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":1518,"title":{},"body":{"dependencies.html":{}}}],["angular/material/icon",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/progress",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/material/tree",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":360,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/MapResolver.html":{},"dependencies.html":{}}}],["anim",{"_index":857,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["anim'},{'name",{"_index":296,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["anim.component",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["anim.component.css",{"_index":858,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["anim.component.html",{"_index":859,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["anim.component.ts",{"_index":856,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"coverage.html":{}}}],["anim.component.ts:101",{"_index":875,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:107",{"_index":865,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:11",{"_index":885,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:111",{"_index":877,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:115",{"_index":870,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:12",{"_index":863,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:18",{"_index":879,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:26",{"_index":880,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:30",{"_index":864,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:42",{"_index":883,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:49",{"_index":867,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:64",{"_index":876,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:71",{"_index":881,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:78",{"_index":873,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim.component.ts:95",{"_index":868,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["anim/draw",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"coverage.html":{}}}],["animate",{"_index":507,"title":{},"body":{"classes/Clock.html":{},"interfaces/IAnimateShape.html":{}}}],["animate(framerate",{"_index":528,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["animateclock",{"_index":644,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["any).height",{"_index":765,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["any).width",{"_index":764,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["any)[prop",{"_index":1131,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["api.service.ts",{"_index":1063,"title":{},"body":{"injectables/FinnhubApiService.html":{},"coverage.html":{}}}],["api.service.ts:10",{"_index":1066,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["api.service.ts:9",{"_index":1067,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["api/3",{"_index":892,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["api/finnhub",{"_index":1062,"title":{},"body":{"injectables/FinnhubApiService.html":{},"coverage.html":{}}}],["api_key",{"_index":1250,"title":{},"body":{"guards/MapResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":230,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"index.html":{}}}],["app.component",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":233,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":235,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":219,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["apple",{"_index":1037,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["appmodule",{"_index":311,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule",{"_index":318,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["area_a",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["area_b",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arg1",{"_index":1344,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["arg2",{"_index":1345,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["arg3",{"_index":1346,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["argstype",{"_index":414,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["arial",{"_index":812,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["arr",{"_index":159,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["arr.filter(e",{"_index":165,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["arr.length",{"_index":163,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["arr.map(a",{"_index":167,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["arr1",{"_index":1297,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["arr1[index",{"_index":1191,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["arr2",{"_index":1183,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["arr2[index",{"_index":1190,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["array",{"_index":21,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array(bits).fill(0).map((_",{"_index":148,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["array(length",{"_index":1348,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["array(math.pow(2,t)).fill([]).map((_,i",{"_index":138,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["array(n).fill(0).map((_",{"_index":180,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array).length",{"_index":1166,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["array.foreach(e",{"_index":173,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array.from",{"_index":758,"title":{},"body":{"components/ClockComponent.html":{}}}],["array.from({length",{"_index":895,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["array.isarray(arr",{"_index":160,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array.isarray(arr2[index",{"_index":1186,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["array.isarray(bits",{"_index":147,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["array.isarray(e",{"_index":166,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array.isarray(e)).length",{"_index":162,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array.isarray(fno",{"_index":202,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array.isarray(inputs",{"_index":192,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["array.isarray(matrix",{"_index":1148,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["array.isarray(n",{"_index":179,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["arrayofarray",{"_index":32,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{},"miscellaneous/typealiases.html":{}}}],["artifacts",{"_index":1565,"title":{},"body":{"index.html":{}}}],["ashokchakra",{"_index":608,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["async",{"_index":239,"title":{},"body":{"components/AppComponent.html":{}}}],["auto",{"_index":280,"title":{},"body":{"components/AppComponent.html":{}}}],["automatically",{"_index":1556,"title":{},"body":{"index.html":{}}}],["available",{"_index":1597,"title":{},"body":{"modules.html":{}}}],["b.h",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["background",{"_index":1405,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["banana",{"_index":1039,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["bar",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["beginfill",{"_index":819,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["beginstroke",{"_index":821,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["behaviorsubject",{"_index":957,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["bevel",{"_index":794,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["binarysystem",{"_index":383,"title":{"classes/BinarySystem.html":{}},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{},"coverage.html":{}}}],["binarytobitarray",{"_index":150,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil",{"_index":447,"title":{"classes/BinaryUtil.html":{}},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{},"coverage.html":{}}}],["binaryutil.binarytobitarray(e",{"_index":190,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.decimaltobitarray(e",{"_index":189,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.decimaltobitarray(k",{"_index":443,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.getbitssymbols(_bits",{"_index":417,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.getbitssymbols(_symbols",{"_index":427,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.getfnlist(_fno",{"_index":422,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.getfnlist(_fnos",{"_index":432,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.getstandardinputs(_inputs",{"_index":420,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.isbinary(inputs",{"_index":193,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.isbinary(inputs[0",{"_index":196,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.maxstandardinputsarray(inputs",{"_index":199,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.minstandardinputsarray(inputs",{"_index":198,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binaryutil.sanitizetwodarray(inputs",{"_index":197,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["binutil",{"_index":366,"title":{"classes/BinUtil.html":{}},"body":{"classes/BinUtil.html":{},"coverage.html":{}}}],["binutil.decimaltobitarray(n",{"_index":83,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["binutil.getfnlist(_outputfnslist",{"_index":68,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["binutil.getmaximuminputcombinations(this.bits",{"_index":61,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["binutil.getstandardinputs(_inputs",{"_index":66,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["binutil.getsymbolslist(this.bits",{"_index":58,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["bits",{"_index":10,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["bitseq",{"_index":82,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["bitseq.length",{"_index":85,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["bitseq.unshift(maxinputcombinations",{"_index":84,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["boolean",{"_index":183,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{}}}],["booleanmagicbox",{"_index":117,"title":{"classes/BooleanMagicBox.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"coverage.html":{}}}],["bootstrap",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["bottom",{"_index":732,"title":{},"body":{"components/ClockComponent.html":{}}}],["browse",{"_index":1595,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["buffer",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1564,"title":{},"body":{"index.html":{}}}],["butt",{"_index":791,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["c",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c.name",{"_index":741,"title":{},"body":{"components/ClockComponent.html":{}}}],["calculate",{"_index":87,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["cambria",{"_index":630,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["canvas",{"_index":467,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["canvas'},{'name",{"_index":289,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["canvas.component.css",{"_index":468,"title":{},"body":{"components/CanvasComponent.html":{}}}],["canvas.component.html",{"_index":469,"title":{},"body":{"components/CanvasComponent.html":{}}}],["canvascomponent",{"_index":288,"title":{"components/CanvasComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["canvasconfig",{"_index":478,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["canvasconfig?.height",{"_index":493,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["canvasconfig?.width",{"_index":490,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["capabilities",{"_index":1584,"title":{},"body":{"index.html":{}}}],["caps",{"_index":789,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["cell.decimal).includes(term",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cells",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cells.length",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cells.map((cell",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cells.push(kmap[currow][curcol",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cellsgrouppedbefore.length",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["center",{"_index":500,"title":{},"body":{"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"components/MapComponent.html":{},"components/TreeChildComponent.html":{}}}],["centroid",{"_index":882,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"components/MapComponent.html":{}}}],["cfr",{"_index":245,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["chakra",{"_index":611,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["change",{"_index":951,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"index.html":{}}}],["change.added",{"_index":1005,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["change.added.foreach(node",{"_index":1006,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["change.removed",{"_index":1008,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["change.removed.slice().reverse().foreach(node",{"_index":1009,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["changes",{"_index":1448,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["check",{"_index":1589,"title":{},"body":{"index.html":{}}}],["checkregion",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["child",{"_index":1340,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["child'},{'name",{"_index":303,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["child.component",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["child.component.css",{"_index":1396,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["child.component.html",{"_index":1397,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["child.component.ts",{"_index":1395,"title":{},"body":{"components/TreeChildComponent.html":{},"coverage.html":{}}}],["child.component.ts:11",{"_index":1398,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["child.component.ts:15",{"_index":1399,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["child/tree",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"components/TreeChildComponent.html":{},"coverage.html":{}}}],["children",{"_index":1010,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/NodeType.html":{},"classes/Tree.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["children.map(name",{"_index":1014,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["choice",{"_index":1579,"title":{},"body":{"index.html":{}}}],["circle",{"_index":604,"title":{},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{}}}],["circle1",{"_index":910,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["circle2",{"_index":913,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["circlecenter",{"_index":907,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["circlecenter.y",{"_index":912,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["circleconfig",{"_index":818,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["class",{"_index":0,"title":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"injectables/DynamicDatabase.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"overview.html":{}}}],["classes/create",{"_index":565,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"interfaces/IClock.html":{}}}],["cli",{"_index":1545,"title":{},"body":{"index.html":{}}}],["clock",{"_index":501,"title":{"classes/Clock.html":{}},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"interfaces/IClock.html":{},"coverage.html":{}}}],["clock'},{'name",{"_index":291,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["clock(this.objectslist[e].radius",{"_index":705,"title":{},"body":{"components/ClockComponent.html":{}}}],["clock.component.css",{"_index":640,"title":{},"body":{"components/ClockComponent.html":{}}}],["clock.component.html",{"_index":641,"title":{},"body":{"components/ClockComponent.html":{}}}],["clock.shape",{"_index":674,"title":{},"body":{"components/ClockComponent.html":{}}}],["clockcmp",{"_index":268,"title":{},"body":{"components/AppComponent.html":{}}}],["clockcmp.instance.radius",{"_index":272,"title":{},"body":{"components/AppComponent.html":{}}}],["clockcomponent",{"_index":290,"title":{"components/ClockComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["clockobj",{"_index":569,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["cluster_appmodule",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cmp[componentname",{"_index":271,"title":{},"body":{"components/AppComponent.html":{}}}],["cmpname",{"_index":485,"title":{},"body":{"components/CanvasComponent.html":{}}}],["code",{"_index":1559,"title":{},"body":{"index.html":{}}}],["cofactor",{"_index":1090,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["col",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["colcount",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["collectionvciewer",{"_index":983,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["collectionviewer",{"_index":969,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["color",{"_index":1406,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["colorgamut",{"_index":1081,"title":{},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{}}}],["cols",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["columns",{"_index":1156,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["command",{"_index":1580,"title":{},"body":{"index.html":{}}}],["component",{"_index":218,"title":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":286,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["componentfactoryresolver",{"_index":243,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["componentname",{"_index":266,"title":{},"body":{"components/AppComponent.html":{}}}],["components",{"_index":220,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"overview.html":{}}}],["components/clock/clock.component",{"_index":361,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["components/demo/demo.component",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["components/draw",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/map/map.component",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["components/stocks/stock",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["components/tree",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["composedgroups",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["composedgroups.filter((_",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["composedgroups.length",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["composedgroups[0",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["composedgroups[0].length",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connect",{"_index":982,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["connect(collectionviewer",{"_index":1003,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["console.log(collectionviewer",{"_index":1002,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["console.log(event",{"_index":263,"title":{},"body":{"components/AppComponent.html":{}}}],["console.log(matrixutil.getinstance",{"_index":1135,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["console.log(this.vcref",{"_index":260,"title":{},"body":{"components/AppComponent.html":{}}}],["const",{"_index":81,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["constructor(_bits",{"_index":391,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["constructor(_input1",{"_index":20,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["constructor(_radius",{"_index":518,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["constructor(_treecontrol",{"_index":942,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["constructor(bits",{"_index":53,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["constructor(cfr",{"_index":242,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(data",{"_index":1317,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["constructor(depth",{"_index":1115,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["constructor(dimenstion",{"_index":1116,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["constructor(httpclient",{"_index":652,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{}}}],["constructor(input1",{"_index":1118,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["constructor(private",{"_index":76,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["constructor(public",{"_index":977,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["constructor(symbols",{"_index":54,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["constructor(systeminputs",{"_index":207,"title":{},"body":{"classes/AIBOutput.html":{},"classes/BooleanMagicBox.html":{}}}],["constructor(vcref",{"_index":472,"title":{},"body":{"components/CanvasComponent.html":{}}}],["container",{"_index":495,"title":{},"body":{"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/TreeChildComponent.html":{}}}],["container.addchild(ashokchakra",{"_index":618,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.addchild(chakra",{"_index":617,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.addchild(circle",{"_index":616,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.addchild(circle1",{"_index":921,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["container.addchild(circle2",{"_index":922,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["container.addchild(rect1",{"_index":923,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["container.addchild(rect2",{"_index":924,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["container.addchild(staticcontainer",{"_index":587,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.addchild(this.hands['hourhand",{"_index":593,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.addchild(this.hands['minutehand",{"_index":592,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.addchild(this.hands['secondhand",{"_index":591,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.name",{"_index":594,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["container.settransform(radius",{"_index":900,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["container.x",{"_index":748,"title":{},"body":{"components/ClockComponent.html":{}}}],["container.y",{"_index":751,"title":{},"body":{"components/ClockComponent.html":{}}}],["content",{"_index":499,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/TreeChildComponent.html":{}}}],["context",{"_index":889,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["continue",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convertto2darray",{"_index":186,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["convertto2darray(isbinaryinput",{"_index":195,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["count",{"_index":542,"title":{},"body":{"classes/Clock.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IClock.html":{},"classes/TreeDataSource.html":{}}}],["coverage",{"_index":1477,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":122,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["createclock",{"_index":508,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["createjs",{"_index":481,"title":{},"body":{"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"dependencies.html":{}}}],["createjs.container",{"_index":874,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.graphics",{"_index":871,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.graphics().beginfill(circleconfig.beginfill).beginstroke(circleconfig.beginstroke",{"_index":929,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.shape",{"_index":869,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.shape(graphics",{"_index":926,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.stage",{"_index":884,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.stage(canvasconfig?.id",{"_index":906,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.text",{"_index":878,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.text(n.tostring",{"_index":928,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.ticker.addeventlistener('tick",{"_index":888,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs.ticker.setfps(60",{"_index":887,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["createjs_shapes",{"_index":564,"title":{"classes/CreateJS_Shapes.html":{}},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"coverage.html":{}}}],["createjs_shapes.getcircle(x",{"_index":605,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["createlinks",{"_index":645,"title":{},"body":{"components/ClockComponent.html":{}}}],["createtext",{"_index":860,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["curcol",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentnode",{"_index":1337,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["currentparent",{"_index":1331,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["currentparent.parent",{"_index":1333,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["currenttime.getminutes",{"_index":633,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["currenttime.getseconds",{"_index":634,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["currow",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":759,"title":{},"body":{"components/ClockComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/NodeType.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["data(value",{"_index":987,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["database",{"_index":1033,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["database.service",{"_index":976,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["database.service.ts",{"_index":1022,"title":{},"body":{"injectables/DynamicDatabase.html":{},"coverage.html":{}}}],["database.service.ts:13",{"_index":1050,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["database.service.ts:16",{"_index":1031,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["database.service.ts:27",{"_index":1029,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["database.service.ts:31",{"_index":1035,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["database.service.ts:6",{"_index":1049,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["datachange",{"_index":937,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["datamap",{"_index":1023,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["datasource",{"_index":941,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["datasource(_treedatasource",{"_index":991,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["dc_cells",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dc_cells.length",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dd",{"_index":137,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["dd.foreach(e",{"_index":142,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["ddd",{"_index":820,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["decimal",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decimaltobitarray",{"_index":153,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["declarations",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["declare",{"_index":1215,"title":{},"body":{"components/MapComponent.html":{}}}],["decorators",{"_index":254,"title":{},"body":{"components/AppComponent.html":{}}}],["default",{"_index":209,"title":{},"body":{"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinaryUtil.html":{},"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"classes/TreeNode.html":{},"miscellaneous/variables.html":{}}}],["default_depth",{"_index":1099,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_dimension",{"_index":1100,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["demo",{"_index":251,"title":{},"body":{"components/AppComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["demo'},{'name",{"_index":293,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["demo.component.html",{"_index":826,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["demo.component.scss",{"_index":825,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["demoapp",{"_index":1541,"title":{},"body":{"index.html":{}}}],["democanvas",{"_index":488,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["democomponent",{"_index":292,"title":{"components/DemoComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["dependencies",{"_index":313,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depth",{"_index":1136,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["depth(depth",{"_index":1137,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["determinant",{"_index":1091,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["dev",{"_index":1553,"title":{},"body":{"index.html":{}}}],["development",{"_index":1548,"title":{},"body":{"index.html":{}}}],["dimension",{"_index":1138,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["dimension(dimension",{"_index":1139,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["dimensions",{"_index":1108,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["dimenstion",{"_index":1117,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["direction",{"_index":661,"title":{},"body":{"components/ClockComponent.html":{}}}],["directive",{"_index":284,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["directives",{"_index":308,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":1563,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1568,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":984,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["disconnect(collectionviewer",{"_index":1004,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["display",{"_index":496,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["dist",{"_index":1567,"title":{},"body":{"index.html":{}}}],["document.createelement('script",{"_index":1261,"title":{},"body":{"guards/MapResolver.html":{}}}],["document.head.appendchild(script",{"_index":1269,"title":{},"body":{"guards/MapResolver.html":{}}}],["documentation",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":223,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["dontcares",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dontcares.length",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["draw",{"_index":295,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["draw(0",{"_index":904,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["draw(index",{"_index":905,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["drawanimcomponent",{"_index":294,"title":{"components/DrawAnimComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["drawobject",{"_index":861,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["drawobject(index",{"_index":866,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["dynamic",{"_index":975,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"dependencies.html":{}}}],["dynamicdatabase",{"_index":945,"title":{"injectables/DynamicDatabase.html":{}},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["dynamicdatasource",{"_index":934,"title":{"injectables/DynamicDataSource.html":{}},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["dynamicflatnode",{"_index":953,"title":{"interfaces/DynamicFlatNode.html":{}},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["dynamicflatnode(name",{"_index":1017,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["dynamicloaderservice",{"_index":1055,"title":{"injectables/DynamicLoaderService.html":{}},"body":{"injectables/DynamicLoaderService.html":{},"coverage.html":{}}}],["e",{"_index":707,"title":{},"body":{"components/ClockComponent.html":{}}}],["e.length",{"_index":174,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["e.length).fill(0",{"_index":144,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["e.map(t",{"_index":140,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["e.unshift(...array(maxlength",{"_index":177,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["e.unshift(...array(t",{"_index":143,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["e2e",{"_index":1577,"title":{},"body":{"index.html":{}}}],["easeljs",{"_index":1523,"title":{},"body":{"dependencies.html":{}}}],["element",{"_index":283,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/INumberMatrixOps.html":{},"components/MapComponent.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["en",{"_index":1254,"title":{},"body":{"guards/MapResolver.html":{}}}],["end",{"_index":1576,"title":{},"body":{"index.html":{}}}],["endfill",{"_index":1083,"title":{},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{}}}],["endstroke",{"_index":1082,"title":{},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{}}}],["enum",{"_index":1101,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["enumerations",{"_index":1537,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":1506,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["errormsg",{"_index":1102,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["errormsg.multiplication_not_valid",{"_index":1168,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["event",{"_index":248,"title":{},"body":{"components/AppComponent.html":{}}}],["execute",{"_index":1573,"title":{},"body":{"index.html":{}}}],["expand",{"_index":954,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["expandable",{"_index":980,"title":{},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["export",{"_index":259,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"components/StockListComponent.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["exports",{"_index":365,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["expression",{"_index":74,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{},"miscellaneous/variables.html":{}}}],["expressions",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expressions.join",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expressions.push(expression",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":1085,"title":{},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["extract",{"_index":1491,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["extract(variables",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f",{"_index":99,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["false",{"_index":185,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"guards/MapResolver.html":{},"classes/NodeType.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":1475,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["fff",{"_index":600,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["fh18mffk6gr1vq1b",{"_index":1070,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["files",{"_index":1558,"title":{},"body":{"index.html":{}}}],["fillcolor",{"_index":599,"title":{},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["filter((e",{"_index":161,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["finddecimalpos",{"_index":1493,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finddecimalpos(decimal",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finnhub",{"_index":1068,"title":{},"body":{"injectables/FinnhubApiService.html":{},"dependencies.html":{}}}],["finnhub.apiclient.instance.authentication['c7q4jmiad3i9it65vql0",{"_index":1073,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["finnhub.defaultapi",{"_index":1076,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["finnhubapiservice",{"_index":1060,"title":{"injectables/FinnhubApiService.html":{}},"body":{"injectables/FinnhubApiService.html":{},"coverage.html":{}}}],["finnhubclient",{"_index":1065,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["first",{"_index":1582,"title":{},"body":{"index.html":{}}}],["flag",{"_index":1176,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["flattreecontrol",{"_index":943,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["flex",{"_index":497,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["fn",{"_index":75,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["fninputtype",{"_index":45,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{},"miscellaneous/typealiases.html":{}}}],["fnno",{"_index":88,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["fno",{"_index":203,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["fnos",{"_index":390,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["fnos(_fnos",{"_index":431,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["font",{"_index":786,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{},"components/TreeViewComponent.html":{}}}],["fontsize",{"_index":541,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["fontsizex",{"_index":619,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["fontsizey",{"_index":625,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["for(let",{"_index":125,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"components/ClockComponent.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/TreeViewComponent.html":{}}}],["foreach((e",{"_index":760,"title":{},"body":{"components/ClockComponent.html":{}}}],["framerate",{"_index":530,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"interfaces/IAnimateShape.html":{},"interfaces/IClock.html":{}}}],["from.x",{"_index":845,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["from.y",{"_index":847,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["from.y).lineto(to.x",{"_index":801,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["fruits",{"_index":1036,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["fuji",{"_index":1044,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["fullangle",{"_index":624,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["function",{"_index":1078,"title":{},"body":{"interfaces/IAnimateShape.html":{},"interfaces/INumberMatrixOps.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{}}}],["further",{"_index":1585,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1561,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1543,"title":{},"body":{"index.html":{}}}],["generateregions",{"_index":1494,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateregions(rowcount",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getashokchakra",{"_index":509,"title":{},"body":{"classes/Clock.html":{}}}],["getashokchakra(noofparts",{"_index":533,"title":{},"body":{"classes/Clock.html":{}}}],["getbinaryoutputsequence",{"_index":79,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["getbinaryoutputsequence(k",{"_index":446,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["getbitssymbols",{"_index":178,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["getchakra",{"_index":510,"title":{},"body":{"classes/Clock.html":{}}}],["getchakra(center",{"_index":537,"title":{},"body":{"classes/Clock.html":{}}}],["getchildren",{"_index":1025,"title":{},"body":{"injectables/DynamicDatabase.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["getchildren(node",{"_index":1028,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["getcircle",{"_index":768,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{}}}],["getcircle(x",{"_index":773,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{}}}],["getclocktextpards",{"_index":511,"title":{},"body":{"classes/Clock.html":{}}}],["getclocktextpards(x",{"_index":540,"title":{},"body":{"classes/Clock.html":{}}}],["getclocktexts",{"_index":512,"title":{},"body":{"classes/Clock.html":{}}}],["getclocktexts(x",{"_index":546,"title":{},"body":{"classes/Clock.html":{}}}],["getcurrenttimerotations",{"_index":513,"title":{},"body":{"classes/Clock.html":{}}}],["getdata",{"_index":960,"title":{},"body":{"injectables/DynamicDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["getdatasource",{"_index":964,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["getdepth",{"_index":1279,"title":{},"body":{"classes/Matrix.html":{}}}],["getdepthfrommatrix",{"_index":1271,"title":{},"body":{"classes/Matrix.html":{},"classes/NumberMatrix.html":{}}}],["getdepthfrommatrix(matrix",{"_index":1147,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["getdimension",{"_index":1283,"title":{},"body":{"classes/Matrix.html":{}}}],["getdimensionfrommatrix",{"_index":1272,"title":{},"body":{"classes/Matrix.html":{},"classes/NumberMatrix.html":{}}}],["getdimensionfrommatrix(matrix",{"_index":1150,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["getdistance(this.objectslist[link.nodes[0]].position",{"_index":725,"title":{},"body":{"components/ClockComponent.html":{}}}],["getdynamiccomponentcontainer",{"_index":514,"title":{},"body":{"classes/Clock.html":{}}}],["getfnlist",{"_index":368,"title":{},"body":{"classes/BinUtil.html":{},"classes/BinaryUtil.html":{}}}],["getfnlist(fno",{"_index":200,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["getfnos",{"_index":410,"title":{},"body":{"classes/BinarySystem.html":{}}}],["getgraphics",{"_index":769,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["getgraphics(fillcolor",{"_index":776,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["gethands",{"_index":515,"title":{},"body":{"classes/Clock.html":{}}}],["gethands(origin",{"_index":553,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["getinputs",{"_index":407,"title":{},"body":{"classes/BinarySystem.html":{}}}],["getinstance",{"_index":1194,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["getkmap",{"_index":1495,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getkmap(variables",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getlevel",{"_index":1330,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["getline",{"_index":770,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{}}}],["getline(from",{"_index":779,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["getmagicbox",{"_index":388,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["getmatrix",{"_index":1287,"title":{},"body":{"classes/Matrix.html":{}}}],["getmaximuminputcombinations",{"_index":367,"title":{},"body":{"classes/BinUtil.html":{}}}],["getnode_id",{"_index":1307,"title":{},"body":{"classes/NodeType.html":{}}}],["getobject",{"_index":862,"title":{},"body":{"components/DrawAnimComponent.html":{}}}],["getobject(i",{"_index":872,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["getoutput",{"_index":464,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["getrect",{"_index":771,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["getrect(x",{"_index":781,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["getresultant",{"_index":1354,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["getresultant(result",{"_index":1169,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["getroot",{"_index":1391,"title":{},"body":{"classes/Tree-1.html":{}}}],["getstage",{"_index":471,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["getstage(canvasconfig",{"_index":476,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["getstandardinputs",{"_index":369,"title":{},"body":{"classes/BinUtil.html":{},"classes/BinaryUtil.html":{}}}],["getstandardinputs(inputs",{"_index":181,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["getstaticcomponentcontainer",{"_index":516,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["getsymbols",{"_index":403,"title":{},"body":{"classes/BinarySystem.html":{}}}],["getsymbolslist",{"_index":146,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["gettext",{"_index":772,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{}}}],["gettext(n",{"_index":785,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{}}}],["getting",{"_index":1539,"title":{"index.html":{}},"body":{}}],["getxyspeed",{"_index":646,"title":{},"body":{"components/ClockComponent.html":{}}}],["getxyspeed(direction",{"_index":658,"title":{},"body":{"components/ClockComponent.html":{}}}],["go",{"_index":1588,"title":{},"body":{"index.html":{}}}],["google",{"_index":1216,"title":{},"body":{"components/MapComponent.html":{},"guards/MapResolver.html":{}}}],["google.maps.map(document.getelementbyid(this.id",{"_index":1230,"title":{},"body":{"components/MapComponent.html":{}}}],["graph",{"_index":1596,"title":{},"body":{"modules.html":{}}}],["graphics",{"_index":778,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["graphics().beginfill(circleconfig.beginfill).beginstroke(circleconfig.beginstroke).setstrokestyle(strokestyle?.width",{"_index":822,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["graphicscolor",{"_index":774,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["graphicscolor?.strokecolor",{"_index":805,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["graphicscolors",{"_index":538,"title":{},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["graphicscolors.strokecolor",{"_index":607,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["graphicscolors?.strokecolor",{"_index":799,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["graycodes",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["group",{"_index":1496,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["group(term",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["group[0].binary.split",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groups",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groups.push(cells",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groupsthatcontaincellsgrouppedbefore",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groupsthatcontaincellsgrouppedbefore.includes(i))[0",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groupsthatcontaincellsgrouppedbefore.length",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groupsthatcontaincellsgrouppedbefore.push(i",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":1232,"title":{"guards/MapResolver.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1233,"title":{},"body":{"guards/MapResolver.html":{}}}],["h",{"_index":783,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/TreeChildComponent.html":{},"miscellaneous/variables.html":{}}}],["handletreecontrol",{"_index":939,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["handletreecontrol(change",{"_index":948,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["hands",{"_index":504,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["haschildren",{"_index":1328,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["hasnodepresentinchildren",{"_index":1417,"title":{},"body":{"classes/TreeNode.html":{}}}],["hasnodepresentinchildren(node",{"_index":1336,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["height",{"_index":278,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/TreeChildComponent.html":{}}}],["help",{"_index":1586,"title":{},"body":{"index.html":{}}}],["host",{"_index":275,"title":{},"body":{"components/AppComponent.html":{}}}],["hour",{"_index":549,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["hourangle",{"_index":637,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["html",{"_index":282,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["htmlelement",{"_index":1231,"title":{},"body":{"components/MapComponent.html":{}}}],["http://localhost:4200",{"_index":1555,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":890,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["httpclient",{"_index":653,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["httpclientmodule",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["https://maps.googleapis.com/maps/api/js?key=${api_key}&libraries=places&language=${language",{"_index":1260,"title":{},"body":{"guards/MapResolver.html":{}}}],["https://www.openstreetmap.org/#map=1/22",{"_index":1255,"title":{},"body":{"guards/MapResolver.html":{}}}],["i*1000",{"_index":898,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["ianimateshape",{"_index":503,"title":{"interfaces/IAnimateShape.html":{}},"body":{"classes/Clock.html":{},"interfaces/IAnimateShape.html":{},"interfaces/IClock.html":{},"coverage.html":{}}}],["icenter",{"_index":788,"title":{"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{}},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["icircleconfig",{"_index":1084,"title":{"interfaces/ICircleConfig.html":{}},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"coverage.html":{}}}],["iclock",{"_index":568,"title":{"interfaces/IClock.html":{}},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{},"coverage.html":{}}}],["id",{"_index":1204,"title":{},"body":{"components/MapComponent.html":{},"guards/MapResolver.html":{}}}],["identifier",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":94,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["if(!_treedatasource",{"_index":994,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["if(!binaryutil.isarrayofarray(inputs",{"_index":191,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["if(!data",{"_index":1318,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["if(!flag",{"_index":1341,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["if(!index",{"_index":903,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["if(!input1",{"_index":1120,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(!input2",{"_index":1123,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(!isbinary",{"_index":187,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["if(!matrixutil._instance",{"_index":1195,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(!result[index",{"_index":1187,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(!this._inputs",{"_index":425,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["if(!this._symbols",{"_index":429,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["if(array.isarray(arr1[index",{"_index":1185,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(array.isarray(input1",{"_index":1126,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(changes['tree",{"_index":1451,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["if(flag",{"_index":1179,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(fno",{"_index":201,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["if(node.haschildren",{"_index":1350,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["if(shapeobject.position.x",{"_index":754,"title":{},"body":{"components/ClockComponent.html":{}}}],["if(shapeobject.position.y",{"_index":756,"title":{},"body":{"components/ClockComponent.html":{}}}],["if(this.depth",{"_index":1163,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(this.matrix.length",{"_index":1164,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["if(this.objectslist[c].position.x",{"_index":704,"title":{},"body":{"components/ClockComponent.html":{}}}],["if(this.systeminputs.outputfnslist?.length",{"_index":124,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["if(typeof",{"_index":55,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["igraphics",{"_index":1080,"title":{"interfaces/IGraphics.html":{}},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"coverage.html":{}}}],["imatrix",{"_index":1098,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/typealiases.html":{}}}],["implements",{"_index":226,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"index.html":{}}}],["import",{"_index":48,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"components/StockListComponent.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["import('../clock/clock.component').then((cmp",{"_index":484,"title":{},"body":{"components/CanvasComponent.html":{}}}],["import('./components/canvas/canvas.component').then((cmp",{"_index":265,"title":{},"body":{"components/AppComponent.html":{}}}],["imports",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["inherited",{"_index":1364,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["initial",{"_index":1032,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["initialdata",{"_index":1026,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["inittreedata",{"_index":1459,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["injectable",{"_index":933,"title":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{}},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"guards/MapResolver.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["injectable({providedin",{"_index":1051,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["injectables",{"_index":935,"title":{},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"overview.html":{}}}],["innernode",{"_index":1472,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["innernode.addchild(innernode2",{"_index":1473,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["innernode2",{"_index":1470,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["inp",{"_index":156,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["inp.map((e",{"_index":438,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["inp.tostring().split(\"\").findindex(e",{"_index":157,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["input",{"_index":480,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{}}}],["input('height",{"_index":483,"title":{},"body":{"components/CanvasComponent.html":{}}}],["input('width",{"_index":482,"title":{},"body":{"components/CanvasComponent.html":{}}}],["input1",{"_index":1124,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["input1.length",{"_index":1127,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["input2",{"_index":1119,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["inputs",{"_index":11,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"interfaces/SystemOutput.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{}}}],["inputs(_inputs",{"_index":428,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["inputs.tostring().split",{"_index":194,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["inputsindexlist",{"_index":437,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["interface",{"_index":415,"title":{"interfaces/DynamicFlatNode.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"interfaces/SystemOutput.html":{}},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["interfaces",{"_index":563,"title":{},"body":{"classes/Clock.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"interfaces/SystemOutput.html":{},"overview.html":{}}}],["interfaces.ts",{"_index":1077,"title":{},"body":{"interfaces/IAnimateShape.html":{},"coverage.html":{}}}],["inumbermatrixops",{"_index":1086,"title":{"interfaces/INumberMatrixOps.html":{}},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{}}}],["invalid",{"_index":1104,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["invalid_matrix",{"_index":1103,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["invalid_matrix_dimension",{"_index":1106,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["inverse",{"_index":1092,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["iomap",{"_index":70,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["ipoint",{"_index":520,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"miscellaneous/typealiases.html":{}}}],["isarrayofarray",{"_index":158,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["isbinary",{"_index":155,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["isbinaryinput",{"_index":184,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["isdimensionsame",{"_index":1293,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["isdimensionsame(matrixref",{"_index":1175,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["isexpandable",{"_index":1027,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["isexpandable(node",{"_index":1034,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["ishapeobject",{"_index":930,"title":{"interfaces/IShapeObject.html":{}},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"coverage.html":{}}}],["isloading",{"_index":981,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["isminimalsystem",{"_index":182,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["issingular",{"_index":1093,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["istrokestyle",{"_index":556,"title":{"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"coverage.html":{}}}],["item",{"_index":978,"title":{},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["items",{"_index":1409,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["iteratee",{"_index":1343,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["iteratee(tempnode",{"_index":1352,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["iterationoverchildren",{"_index":1418,"title":{},"body":{"classes/TreeNode.html":{}}}],["iterationoverchildren(node",{"_index":1342,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["j",{"_index":1467,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["joints",{"_index":793,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["js",{"_index":566,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["justify",{"_index":498,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{}}}],["k",{"_index":50,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["karma",{"_index":1575,"title":{},"body":{"index.html":{}}}],["key",{"_index":120,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IClock.html":{},"interfaces/SystemOutput.html":{}}}],["kmap",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kmap.length",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kmap[0].length",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kmapcell",{"_index":1605,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["kmapgraycode",{"_index":1607,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["kmapgraycodes",{"_index":1497,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["kmapgraycodes.get(variables.length",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kmapresult",{"_index":1608,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["l.geojson",{"_index":1228,"title":{},"body":{"components/MapComponent.html":{}}}],["l.geojsonoptions).addto(this._map",{"_index":1229,"title":{},"body":{"components/MapComponent.html":{}}}],["l.indexof(n1",{"_index":717,"title":{},"body":{"components/ClockComponent.html":{}}}],["l.indexof(n2",{"_index":718,"title":{},"body":{"components/ClockComponent.html":{}}}],["l.map",{"_index":1211,"title":{},"body":{"components/MapComponent.html":{}}}],["language",{"_index":1253,"title":{},"body":{"guards/MapResolver.html":{}}}],["lat",{"_index":1220,"title":{},"body":{"components/MapComponent.html":{}}}],["lato",{"_index":1476,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["leaflet",{"_index":1214,"title":{},"body":{"components/MapComponent.html":{},"dependencies.html":{}}}],["left",{"_index":729,"title":{},"body":{"components/ClockComponent.html":{},"components/TreeChildComponent.html":{}}}],["legend",{"_index":281,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["length",{"_index":426,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"components/ClockComponent.html":{},"classes/NodeType.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["level",{"_index":979,"title":{},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/NodeType.html":{},"classes/Tree.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeViewComponent.html":{}}}],["line",{"_index":797,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/TreeChildComponent.html":{}}}],["link",{"_index":723,"title":{},"body":{"components/ClockComponent.html":{}}}],["link.distance",{"_index":724,"title":{},"body":{"components/ClockComponent.html":{}}}],["link.nodes.indexof(name",{"_index":739,"title":{},"body":{"components/ClockComponent.html":{}}}],["links",{"_index":642,"title":{},"body":{"components/ClockComponent.html":{}}}],["linksofnode",{"_index":733,"title":{},"body":{"components/ClockComponent.html":{}}}],["list",{"_index":1381,"title":{},"body":{"components/StockListComponent.html":{}}}],["list'},{'name",{"_index":301,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["list.component",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["list.component.css",{"_index":1382,"title":{},"body":{"components/StockListComponent.html":{}}}],["list.component.html",{"_index":1383,"title":{},"body":{"components/StockListComponent.html":{}}}],["list.component.ts",{"_index":1380,"title":{},"body":{"components/StockListComponent.html":{},"coverage.html":{}}}],["list.component.ts:12",{"_index":1385,"title":{},"body":{"components/StockListComponent.html":{}}}],["list.component.ts:8",{"_index":1384,"title":{},"body":{"components/StockListComponent.html":{}}}],["list/stock",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"components/StockListComponent.html":{},"coverage.html":{}}}],["literal",{"_index":460,"title":{},"body":{"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"interfaces/SystemOutput.html":{},"miscellaneous/typealiases.html":{}}}],["lng",{"_index":1222,"title":{},"body":{"components/MapComponent.html":{}}}],["load",{"_index":274,"title":{},"body":{"components/AppComponent.html":{},"guards/MapResolver.html":{}}}],["loadcmp",{"_index":238,"title":{},"body":{"components/AppComponent.html":{}}}],["loadcmp(event",{"_index":246,"title":{},"body":{"components/AppComponent.html":{}}}],["loaddynamiccomponent",{"_index":240,"title":{},"body":{"components/AppComponent.html":{}}}],["loader.service.ts",{"_index":1058,"title":{},"body":{"injectables/DynamicLoaderService.html":{},"coverage.html":{}}}],["loader.service.ts:6",{"_index":1059,"title":{},"body":{"injectables/DynamicLoaderService.html":{}}}],["loader/dynamic",{"_index":1057,"title":{},"body":{"injectables/DynamicLoaderService.html":{},"coverage.html":{}}}],["loadgoogle",{"_index":1236,"title":{},"body":{"guards/MapResolver.html":{}}}],["loadmap",{"_index":1205,"title":{},"body":{"components/MapComponent.html":{}}}],["loadosm",{"_index":1237,"title":{},"body":{"guards/MapResolver.html":{}}}],["macintosh",{"_index":1045,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["main",{"_index":647,"title":{},"body":{"components/ClockComponent.html":{}}}],["map",{"_index":51,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/TreeDataSource.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["map'},{'name",{"_index":298,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["map((e",{"_index":188,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["map(this.id",{"_index":1225,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.css",{"_index":1201,"title":{},"body":{"components/MapComponent.html":{}}}],["map.component.html",{"_index":1202,"title":{},"body":{"components/MapComponent.html":{}}}],["mapcomponent",{"_index":297,"title":{"components/MapComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["mapresolver",{"_index":362,"title":{"guards/MapResolver.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/MapResolver.html":{},"coverage.html":{}}}],["matching",{"_index":206,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.abs(a.w",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.abs(b.w",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["math.cos(i",{"_index":623,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["math.pi",{"_index":632,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["math.pow((p2.y",{"_index":721,"title":{},"body":{"components/ClockComponent.html":{}}}],["math.pow(1",{"_index":63,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["math.pow(2",{"_index":64,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["math.sin(i",{"_index":628,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["math.sqrt(math.pow((p2.x",{"_index":719,"title":{},"body":{"components/ClockComponent.html":{}}}],["maticonmodule",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["matprogressbarmodule",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["matrices",{"_index":1105,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["matrix",{"_index":1107,"title":{"classes/Matrix.html":{}},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["matrix(matrix",{"_index":1142,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrix(this.depth",{"_index":1171,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrix.length",{"_index":1152,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrix:13",{"_index":1365,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["matrix:14",{"_index":1366,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["matrix:15",{"_index":1367,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["matrix:67",{"_index":1375,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["matrix:74",{"_index":1376,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["matrixgenerator",{"_index":1198,"title":{"classes/MatrixGenerator.html":{}},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{}}}],["matrixref",{"_index":1300,"title":{},"body":{"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{}}}],["matrixref.dimension.length",{"_index":1178,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrixref.dimension[index",{"_index":1181,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrixref.matrix[0",{"_index":1165,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrixutil",{"_index":1173,"title":{"classes/MatrixUtil.html":{}},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{}}}],["matrixutil._instance",{"_index":1196,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["matrixutil.getinstance",{"_index":1134,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["mattreemodule",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["maxcombinations",{"_index":435,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["maxfns",{"_index":436,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["maxinputcombinations",{"_index":12,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["maxlength",{"_index":176,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["maxnumberofoutputs",{"_index":13,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["maxoutputcombinations",{"_index":387,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["maxstandardinputsarray",{"_index":175,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["merge",{"_index":972,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["merge(collectionviewer.viewchange",{"_index":999,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["metadata",{"_index":228,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["methods",{"_index":16,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"components/StockListComponent.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["minlength",{"_index":171,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["minor",{"_index":1094,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["minstandardinputsarray",{"_index":170,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["minterm",{"_index":104,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["minterm).expression",{"_index":113,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["minterms",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minute",{"_index":550,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["minuteangle",{"_index":636,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["miscellaneous",{"_index":1536,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miter",{"_index":795,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["miterlimit",{"_index":796,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["models",{"_index":1394,"title":{},"body":{"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["models.ts",{"_index":1431,"title":{},"body":{"classes/TreeNode-1.html":{},"coverage.html":{}}}],["models.ts:12",{"_index":1437,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models.ts:2",{"_index":1433,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models.ts:20",{"_index":1438,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models.ts:24",{"_index":1435,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models.ts:28",{"_index":1436,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models.ts:3",{"_index":1434,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models.ts:4",{"_index":1432,"title":{},"body":{"classes/TreeNode-1.html":{}}}],["models/tree",{"_index":1400,"title":{},"body":{"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["module",{"_index":310,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"dependencies.html":{}}}],["modules",{"_index":312,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1587,"title":{},"body":{"index.html":{}}}],["moveobjects",{"_index":648,"title":{},"body":{"components/ClockComponent.html":{}}}],["multiplication",{"_index":1110,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["multiplication_not_valid",{"_index":1109,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["multiply",{"_index":1095,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["multiply(matrixref",{"_index":1370,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["n",{"_index":80,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/SystemOutput.html":{}}}],["n.tostring().split(\"\").map((e",{"_index":151,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["n1",{"_index":714,"title":{},"body":{"components/ClockComponent.html":{}}}],["n2",{"_index":715,"title":{},"body":{"components/ClockComponent.html":{}}}],["name",{"_index":27,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IClock.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"components/StockListComponent.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"index.html":{}}}],["navigate",{"_index":1554,"title":{},"body":{"index.html":{}}}],["need",{"_index":1581,"title":{},"body":{"index.html":{}}}],["new",{"_index":128,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/FinnhubApiService.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["ng",{"_index":1551,"title":{},"body":{"index.html":{}}}],["ngafterviewinit",{"_index":1206,"title":{},"body":{"components/MapComponent.html":{}}}],["ngmodule",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngonchanges",{"_index":1442,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["ngonchanges(changes",{"_index":1445,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["ngoninit",{"_index":241,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["node",{"_index":956,"title":{},"body":{"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"components/TreeViewComponent.html":{}}}],["node.addchild(innernode",{"_index":1469,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["node.data",{"_index":1401,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["node.isloading",{"_index":1020,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["node.level",{"_index":1015,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["node?.children?.[index",{"_index":1351,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["node?.children?.length",{"_index":1347,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["node?.parent",{"_index":1353,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["node_id",{"_index":1305,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["node_id(_id",{"_index":1313,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["nodes",{"_index":1013,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["nodetype",{"_index":1302,"title":{"classes/NodeType.html":{}},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"coverage.html":{}}}],["noofhands",{"_index":554,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["noofoutputs",{"_index":133,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["noofparts",{"_index":536,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["null",{"_index":108,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/ClockComponent.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{}}}],["null).filter(v",{"_index":107,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["number",{"_index":23,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["number(boolean(number(e",{"_index":169,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["number(e",{"_index":152,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["number(fno",{"_index":204,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["number(i).tostring(2).split(\"\")).map(e",{"_index":139,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["number(n).tostring(2).split(\"\").map((e",{"_index":154,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["number(t",{"_index":141,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["number,l",{"_index":441,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["number.tostring().length",{"_index":620,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["numbermatrix",{"_index":1154,"title":{"classes/NumberMatrix.html":{}},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{}}}],["numbermatrixutil",{"_index":1197,"title":{"classes/NumberMatrixUtil.html":{}},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{}}}],["obj",{"_index":434,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/SystemOutput.html":{},"classes/TreeDataSource.html":{}}}],["obj0",{"_index":684,"title":{},"body":{"components/ClockComponent.html":{}}}],["obj1",{"_index":688,"title":{},"body":{"components/ClockComponent.html":{}}}],["obj2",{"_index":691,"title":{},"body":{"components/ClockComponent.html":{}}}],["obj3",{"_index":694,"title":{},"body":{"components/ClockComponent.html":{}}}],["obj4",{"_index":697,"title":{},"body":{"components/ClockComponent.html":{}}}],["object",{"_index":562,"title":{},"body":{"classes/Clock.html":{},"components/DrawAnimComponent.html":{},"interfaces/IAnimateShape.html":{},"interfaces/IClock.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["object.assign(this",{"_index":1133,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["object.getprototypeof(matrixutil.getinstance",{"_index":1129,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["object.keys(arr1).foreach((value",{"_index":1184,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["object.keys(cmp)[0",{"_index":267,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["object.keys(this.objectslist).foreach((c",{"_index":700,"title":{},"body":{"components/ClockComponent.html":{}}}],["object.keys(this.objectslist).foreach((name",{"_index":736,"title":{},"body":{"components/ClockComponent.html":{}}}],["objectslist",{"_index":643,"title":{},"body":{"components/ClockComponent.html":{}}}],["obs",{"_index":1242,"title":{},"body":{"guards/MapResolver.html":{}}}],["obs.complete",{"_index":1268,"title":{},"body":{"guards/MapResolver.html":{}}}],["obs.next(true",{"_index":1267,"title":{},"body":{"guards/MapResolver.html":{}}}],["observable",{"_index":973,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"guards/MapResolver.html":{},"classes/TreeDataSource.html":{}}}],["observable((obs",{"_index":1252,"title":{},"body":{"guards/MapResolver.html":{}}}],["observer",{"_index":1243,"title":{},"body":{"guards/MapResolver.html":{}}}],["oninit",{"_index":227,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["onion",{"_index":1043,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["ontick",{"_index":649,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["optional",{"_index":29,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{}}}],["orange",{"_index":1038,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["origin",{"_index":534,"title":{},"body":{"classes/Clock.html":{}}}],["osm",{"_index":1257,"title":{},"body":{"guards/MapResolver.html":{}}}],["out",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":458,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["outputfnslist",{"_index":14,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["outputseq",{"_index":71,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["outputstring",{"_index":72,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["overflow",{"_index":279,"title":{},"body":{"components/AppComponent.html":{}}}],["overview",{"_index":1590,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":1474,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["p1.x",{"_index":720,"title":{},"body":{"components/ClockComponent.html":{}}}],["p1.y",{"_index":722,"title":{},"body":{"components/ClockComponent.html":{}}}],["package",{"_index":1510,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["padding",{"_index":1410,"title":{},"body":{"components/TreeChildComponent.html":{}}}],["page",{"_index":1592,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{}}}],["parent",{"_index":1324,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{}}}],["parent'},{'name",{"_index":305,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["parent.component",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["parent.component.css",{"_index":1440,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent.component.html",{"_index":1441,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent.component.ts",{"_index":1439,"title":{},"body":{"components/TreeParentComponent.html":{},"coverage.html":{}}}],["parent.component.ts:12",{"_index":1444,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent.component.ts:14",{"_index":1450,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent.component.ts:16",{"_index":1447,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent.component.ts:20",{"_index":1443,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent.component.ts:24",{"_index":1449,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["parent/tree",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"components/TreeParentComponent.html":{},"coverage.html":{}}}],["parseint(e.join",{"_index":439,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["platform",{"_index":1578,"title":{},"body":{"index.html":{}}}],["position",{"_index":505,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"components/TreeChildComponent.html":{}}}],["position.x",{"_index":815,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["position.y",{"_index":817,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["potato",{"_index":1042,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["private",{"_index":78,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/FinnhubApiService.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["production",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project",{"_index":1542,"title":{},"body":{"index.html":{}}}],["prop",{"_index":1130,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["providedin",{"_index":985,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"guards/MapResolver.html":{},"classes/TreeDataSource.html":{}}}],["providers",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["public",{"_index":9,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IStrokeStyle.html":{},"components/MapComponent.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/TreeDataSource.html":{}}}],["purple",{"_index":1048,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["px",{"_index":629,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["r",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["radius",{"_index":506,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{}}}],["radius/40",{"_index":914,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["read",{"_index":256,"title":{},"body":{"components/AppComponent.html":{}}}],["rect",{"_index":809,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["rect.regx",{"_index":850,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["rect.regy",{"_index":852,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["rect.x",{"_index":853,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["rect.y",{"_index":854,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["rect1",{"_index":917,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["rect2",{"_index":915,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["reference",{"_index":1591,"title":{},"body":{"index.html":{}}}],["region",{"_index":1609,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["regions",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["regions.push",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reload",{"_index":1557,"title":{},"body":{"index.html":{}}}],["reset",{"_index":116,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"modules/AppModule.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"overview.html":{}}}],["resolve",{"_index":1238,"title":{},"body":{"guards/MapResolver.html":{}}}],["resolver/map.resolver",{"_index":363,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["restname",{"_index":891,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["restname).subscribe((data",{"_index":894,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["result",{"_index":1162,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["result[index",{"_index":1188,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["resultant",{"_index":1170,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["resultant.matrix",{"_index":1172,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["results",{"_index":205,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":86,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":42,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"components/StockListComponent.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["right",{"_index":730,"title":{},"body":{"components/ClockComponent.html":{}}}],["root",{"_index":231,"title":{},"body":{"components/AppComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"guards/MapResolver.html":{},"classes/TreeDataSource.html":{},"components/TreeViewComponent.html":{}}}],["root'},{'name",{"_index":287,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["root.addchild(node",{"_index":1466,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["rootlevelnodes",{"_index":1024,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["rotation",{"_index":687,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["round",{"_index":790,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["routermodule",{"_index":358,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":364,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routerstatesnapshot",{"_index":1249,"title":{},"body":{"guards/MapResolver.html":{}}}],["routes",{"_index":359,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"routes.html":{}}}],["routing.module",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":357,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rowcount",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rows",{"_index":1155,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1550,"title":{},"body":{"index.html":{}}}],["running",{"_index":1569,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":974,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"guards/MapResolver.html":{},"classes/TreeDataSource.html":{},"dependencies.html":{}}}],["sanitizetwodarray",{"_index":164,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["scaffolding",{"_index":1560,"title":{},"body":{"index.html":{}}}],["scalex",{"_index":931,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["scaley",{"_index":932,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["script",{"_index":1258,"title":{},"body":{"guards/MapResolver.html":{}}}],["script.addeventlistener",{"_index":1266,"title":{},"body":{"guards/MapResolver.html":{}}}],["script.id",{"_index":1265,"title":{},"body":{"guards/MapResolver.html":{}}}],["script.src",{"_index":1264,"title":{},"body":{"guards/MapResolver.html":{}}}],["script.type",{"_index":1262,"title":{},"body":{"guards/MapResolver.html":{}}}],["second",{"_index":551,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["secondangle",{"_index":635,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["selectionchange",{"_index":949,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["selectionchange).added",{"_index":996,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["selectionchange).removed",{"_index":997,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["selector",{"_index":229,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["serve",{"_index":1552,"title":{},"body":{"index.html":{}}}],["server",{"_index":1549,"title":{},"body":{"index.html":{}}}],["set",{"_index":423,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{}}}],["setcurrenttime",{"_index":517,"title":{},"body":{"classes/Clock.html":{}}}],["setdata(value",{"_index":962,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["setdatasource(_treedatasource",{"_index":966,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["setdepth(depth",{"_index":1281,"title":{},"body":{"classes/Matrix.html":{}}}],["setdimension(dimension",{"_index":1285,"title":{},"body":{"classes/Matrix.html":{}}}],["setfnos(_fnos",{"_index":412,"title":{},"body":{"classes/BinarySystem.html":{}}}],["setinputs",{"_index":17,"title":{},"body":{"classes/AIBInput.html":{}}}],["setinputs(_inputs",{"_index":38,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BooleanMagicBox.html":{}}}],["setmatrix(matrix",{"_index":1289,"title":{},"body":{"classes/Matrix.html":{}}}],["setnode_id(_id",{"_index":1309,"title":{},"body":{"classes/NodeType.html":{}}}],["setoutputfnslist",{"_index":18,"title":{},"body":{"classes/AIBInput.html":{}}}],["setoutputfnslist(_outputfnslist",{"_index":44,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["setsymbols(_symbols",{"_index":405,"title":{},"body":{"classes/BinarySystem.html":{}}}],["settimeout",{"_index":261,"title":{},"body":{"components/AppComponent.html":{},"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["shape",{"_index":560,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shape(graphics",{"_index":807,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shape(line",{"_index":803,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shape.regx",{"_index":844,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shape.regy",{"_index":846,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shape.x",{"_index":848,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shape.y",{"_index":849,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["shapeobject",{"_index":734,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["shapeobject.direction",{"_index":744,"title":{},"body":{"components/ClockComponent.html":{}}}],["shapeobject.position.x",{"_index":750,"title":{},"body":{"components/ClockComponent.html":{}}}],["shapeobject.position.y",{"_index":753,"title":{},"body":{"components/ClockComponent.html":{}}}],["shapeobject.radius",{"_index":743,"title":{},"body":{"components/ClockComponent.html":{}}}],["shapeobject.shape.animate(this.framerate",{"_index":745,"title":{},"body":{"components/ClockComponent.html":{}}}],["shapeobject.speed",{"_index":747,"title":{},"body":{"components/ClockComponent.html":{}}}],["shapes",{"_index":567,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"interfaces/IClock.html":{}}}],["shapes.ts",{"_index":767,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["shapes.ts:16",{"_index":780,"title":{},"body":{"classes/CreateJS_Shapes.html":{}}}],["shapes.ts:22",{"_index":775,"title":{},"body":{"classes/CreateJS_Shapes.html":{}}}],["shapes.ts:28",{"_index":784,"title":{},"body":{"classes/CreateJS_Shapes.html":{}}}],["shapes.ts:34",{"_index":787,"title":{},"body":{"classes/CreateJS_Shapes.html":{}}}],["shapes.ts:41",{"_index":777,"title":{},"body":{"classes/CreateJS_Shapes.html":{}}}],["simplechanges",{"_index":1446,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["solve",{"_index":49,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["solve(this.systeminputs.symbols",{"_index":112,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["solver",{"_index":52,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["solver.ts",{"_index":1489,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/DynamicLoaderService.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"components/StockListComponent.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"index.html":{}}}],["speed",{"_index":659,"title":{},"body":{"components/ClockComponent.html":{}}}],["speed.x",{"_index":749,"title":{},"body":{"components/ClockComponent.html":{}}}],["speed.y",{"_index":752,"title":{},"body":{"components/ClockComponent.html":{}}}],["square",{"_index":792,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["src/.../binarysystem.ts",{"_index":1602,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../create",{"_index":1603,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../demo.component.ts",{"_index":1604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../environment.prod.ts",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../k",{"_index":1606,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../map.resolver.ts",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../matrix.ts",{"_index":1538,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":356,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":225,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:11",{"_index":244,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:17",{"_index":250,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:24",{"_index":247,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:29",{"_index":249,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:9",{"_index":252,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/classes.ts",{"_index":936,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["src/app/classes.ts:20",{"_index":1413,"title":{},"body":{"classes/TreeDataSource.html":{}}}],["src/app/classes.ts:21",{"_index":1414,"title":{},"body":{"classes/TreeDataSource.html":{}}}],["src/app/classes.ts:22",{"_index":1412,"title":{},"body":{"classes/TreeDataSource.html":{}}}],["src/app/classes.ts:23",{"_index":1415,"title":{},"body":{"classes/TreeDataSource.html":{}}}],["src/app/classes.ts:29",{"_index":959,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:30",{"_index":958,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:31",{"_index":961,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:35",{"_index":963,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:40",{"_index":965,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:43",{"_index":967,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:65",{"_index":946,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:79",{"_index":950,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes.ts:87",{"_index":955,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["src/app/classes/aibinarysystem.ts",{"_index":6,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"coverage.html":{}}}],["src/app/classes/aibinarysystem.ts:107",{"_index":463,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["src/app/classes/aibinarysystem.ts:11",{"_index":31,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:110",{"_index":465,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["src/app/classes/aibinarysystem.ts:119",{"_index":373,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:12",{"_index":34,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:124",{"_index":374,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:126",{"_index":370,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:128",{"_index":371,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:13",{"_index":35,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:130",{"_index":376,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:132",{"_index":375,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:134",{"_index":379,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:139",{"_index":378,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:14",{"_index":37,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:146",{"_index":377,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:153",{"_index":372,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:155",{"_index":381,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:16",{"_index":33,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:17",{"_index":36,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:178",{"_index":380,"title":{},"body":{"classes/BinUtil.html":{}}}],["src/app/classes/aibinarysystem.ts:20",{"_index":25,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:31",{"_index":40,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:34",{"_index":46,"title":{},"body":{"classes/AIBInput.html":{}}}],["src/app/classes/aibinarysystem.ts:40",{"_index":214,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:41",{"_index":215,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:42",{"_index":216,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:43",{"_index":211,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:44",{"_index":208,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:48",{"_index":213,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:53",{"_index":210,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:66",{"_index":217,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:73",{"_index":212,"title":{},"body":{"classes/AIBOutput.html":{}}}],["src/app/classes/aibinarysystem.ts:85",{"_index":461,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["src/app/classes/aibinarysystem.ts:86",{"_index":459,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["src/app/classes/aibinarysystem.ts:90",{"_index":462,"title":{},"body":{"classes/BooleanMagicBox.html":{}}}],["src/app/classes/binarysystem.ts",{"_index":384,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/classes/binarysystem.ts:104",{"_index":450,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:106",{"_index":457,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:129",{"_index":456,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:15",{"_index":399,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:16",{"_index":400,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:17",{"_index":401,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:18",{"_index":398,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:19",{"_index":396,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:20",{"_index":395,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:21",{"_index":397,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:25",{"_index":393,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:33",{"_index":406,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:38",{"_index":404,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:42",{"_index":409,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:48",{"_index":408,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:52",{"_index":413,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:56",{"_index":411,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:60",{"_index":402,"title":{},"body":{"classes/BinarySystem.html":{}}}],["src/app/classes/binarysystem.ts:77",{"_index":448,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:79",{"_index":449,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:81",{"_index":452,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:83",{"_index":451,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:85",{"_index":455,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:90",{"_index":454,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/binarysystem.ts:97",{"_index":453,"title":{},"body":{"classes/BinaryUtil.html":{}}}],["src/app/classes/create",{"_index":766,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/classes/k",{"_index":1488,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/classes/matrix.ts",{"_index":1087,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app/classes/matrix.ts:101",{"_index":1355,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:116",{"_index":1368,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:128",{"_index":1373,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:13",{"_index":1274,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:14",{"_index":1275,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:140",{"_index":1371,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:148",{"_index":1374,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:15",{"_index":1276,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:155",{"_index":1359,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:156",{"_index":1360,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:157",{"_index":1362,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:158",{"_index":1357,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:159",{"_index":1361,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:160",{"_index":1356,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:161",{"_index":1369,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:169",{"_index":1295,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["src/app/classes/matrix.ts:171",{"_index":1299,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["src/app/classes/matrix.ts:181",{"_index":1296,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["src/app/classes/matrix.ts:19",{"_index":1273,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:191",{"_index":1301,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["src/app/classes/matrix.ts:201",{"_index":1298,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["src/app/classes/matrix.ts:209",{"_index":1377,"title":{},"body":{"classes/NumberMatrixUtil.html":{}}}],["src/app/classes/matrix.ts:211",{"_index":1378,"title":{},"body":{"classes/NumberMatrixUtil.html":{}}}],["src/app/classes/matrix.ts:214",{"_index":1291,"title":{},"body":{"classes/MatrixGenerator.html":{}}}],["src/app/classes/matrix.ts:44",{"_index":1280,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:47",{"_index":1282,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:50",{"_index":1284,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:53",{"_index":1286,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:57",{"_index":1288,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:60",{"_index":1290,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:67",{"_index":1277,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:74",{"_index":1278,"title":{},"body":{"classes/Matrix.html":{}}}],["src/app/classes/matrix.ts:96",{"_index":1363,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/matrix.ts:97",{"_index":1358,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["src/app/classes/node.ts",{"_index":1303,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"coverage.html":{}}}],["src/app/classes/node.ts:13",{"_index":1388,"title":{},"body":{"classes/Tree.html":{}}}],["src/app/classes/node.ts:15",{"_index":1387,"title":{},"body":{"classes/Tree.html":{}}}],["src/app/classes/node.ts:2",{"_index":1306,"title":{},"body":{"classes/NodeType.html":{}}}],["src/app/classes/node.ts:26",{"_index":1421,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:27",{"_index":1422,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:28",{"_index":1420,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:31",{"_index":1419,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:37",{"_index":1428,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:4",{"_index":1310,"title":{},"body":{"classes/NodeType.html":{}}}],["src/app/classes/node.ts:43",{"_index":1429,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:46",{"_index":1425,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:49",{"_index":1424,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:58",{"_index":1423,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:63",{"_index":1426,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/classes/node.ts:7",{"_index":1308,"title":{},"body":{"classes/NodeType.html":{}}}],["src/app/classes/node.ts:71",{"_index":1427,"title":{},"body":{"classes/TreeNode.html":{}}}],["src/app/components/canvas/canvas.component.ts",{"_index":466,"title":{},"body":{"components/CanvasComponent.html":{},"coverage.html":{}}}],["src/app/components/canvas/canvas.component.ts:11",{"_index":475,"title":{},"body":{"components/CanvasComponent.html":{}}}],["src/app/components/canvas/canvas.component.ts:12",{"_index":474,"title":{},"body":{"components/CanvasComponent.html":{}}}],["src/app/components/canvas/canvas.component.ts:13",{"_index":473,"title":{},"body":{"components/CanvasComponent.html":{}}}],["src/app/components/canvas/canvas.component.ts:19",{"_index":479,"title":{},"body":{"components/CanvasComponent.html":{}}}],["src/app/components/canvas/canvas.component.ts:29",{"_index":477,"title":{},"body":{"components/CanvasComponent.html":{}}}],["src/app/components/clock/clock.component.ts",{"_index":639,"title":{},"body":{"components/ClockComponent.html":{},"coverage.html":{}}}],["src/app/components/clock/clock.component.ts:107",{"_index":656,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:123",{"_index":666,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:132",{"_index":665,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:137",{"_index":663,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:14",{"_index":672,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:15",{"_index":669,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:169",{"_index":660,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:17",{"_index":671,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:176",{"_index":655,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:18",{"_index":670,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:188",{"_index":657,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:19",{"_index":654,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:195",{"_index":668,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:24",{"_index":664,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.component.ts:34",{"_index":662,"title":{},"body":{"components/ClockComponent.html":{}}}],["src/app/components/clock/clock.shape.ts",{"_index":502,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{},"coverage.html":{}}}],["src/app/components/clock/clock.shape.ts:100",{"_index":539,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:116",{"_index":535,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:12",{"_index":524,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:14",{"_index":526,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:146",{"_index":544,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:15",{"_index":525,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:150",{"_index":547,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:16",{"_index":527,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:166",{"_index":557,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:175",{"_index":559,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:18",{"_index":522,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:182",{"_index":548,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:28",{"_index":529,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:35",{"_index":531,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:40",{"_index":532,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:53",{"_index":558,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/clock.shape.ts:79",{"_index":552,"title":{},"body":{"classes/Clock.html":{}}}],["src/app/components/clock/interfaces.ts",{"_index":1079,"title":{},"body":{"interfaces/ICenter-1.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IGraphics.html":{},"coverage.html":{}}}],["src/app/components/demo/demo.component.ts",{"_index":824,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/components/demo/demo.component.ts:11",{"_index":835,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:12",{"_index":834,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:13",{"_index":827,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:16",{"_index":832,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:29",{"_index":831,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:36",{"_index":833,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:41",{"_index":829,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:51",{"_index":830,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/demo/demo.component.ts:61",{"_index":828,"title":{},"body":{"components/DemoComponent.html":{}}}],["src/app/components/draw",{"_index":855,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"coverage.html":{}}}],["src/app/components/map/map.component.ts",{"_index":1199,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["src/app/components/map/map.component.ts:12",{"_index":1212,"title":{},"body":{"components/MapComponent.html":{}}}],["src/app/components/map/map.component.ts:13",{"_index":1207,"title":{},"body":{"components/MapComponent.html":{}}}],["src/app/components/map/map.component.ts:19",{"_index":1210,"title":{},"body":{"components/MapComponent.html":{}}}],["src/app/components/map/map.component.ts:23",{"_index":1209,"title":{},"body":{"components/MapComponent.html":{}}}],["src/app/components/map/map.component.ts:27",{"_index":1208,"title":{},"body":{"components/MapComponent.html":{}}}],["src/app/components/stocks/service/finnhub",{"_index":1061,"title":{},"body":{"injectables/FinnhubApiService.html":{},"coverage.html":{}}}],["src/app/components/stocks/stock",{"_index":1379,"title":{},"body":{"components/StockListComponent.html":{},"coverage.html":{}}}],["src/app/components/tree",{"_index":1389,"title":{},"body":{"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["src/app/dynamic",{"_index":1021,"title":{},"body":{"injectables/DynamicDatabase.html":{},"coverage.html":{}}}],["src/app/interfaces/shape",{"_index":561,"title":{},"body":{"classes/Clock.html":{},"interfaces/IAnimateShape.html":{},"interfaces/IClock.html":{},"coverage.html":{}}}],["src/app/resolver/map.resolver.ts",{"_index":1234,"title":{},"body":{"guards/MapResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/resolver/map.resolver.ts:13",{"_index":1246,"title":{},"body":{"guards/MapResolver.html":{}}}],["src/app/resolver/map.resolver.ts:21",{"_index":1245,"title":{},"body":{"guards/MapResolver.html":{}}}],["src/app/resolver/map.resolver.ts:29",{"_index":1244,"title":{},"body":{"guards/MapResolver.html":{}}}],["src/app/resolver/map.resolver.ts:46",{"_index":1247,"title":{},"body":{"guards/MapResolver.html":{}}}],["src/app/resolver/map.resolver.ts:9",{"_index":1239,"title":{},"body":{"guards/MapResolver.html":{}}}],["src/app/services/dynamic",{"_index":1056,"title":{},"body":{"injectables/DynamicLoaderService.html":{},"coverage.html":{}}}],["src/environments/environment.prod.ts",{"_index":1505,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":1507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stage",{"_index":470,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["stage(canvasconfig?.id",{"_index":487,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["stage.canvas.height",{"_index":492,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["stage.canvas.width",{"_index":489,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["started",{"_index":1540,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1480,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":145,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IStrokeStyle.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{}}}],["staticcontainer",{"_index":585,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["stock",{"_index":300,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["stocklistcomponent",{"_index":299,"title":{"components/StockListComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["stored",{"_index":1566,"title":{},"body":{"index.html":{}}}],["string",{"_index":73,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/TreeDataSource.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string.fromcharcode('a'.charcodeat(0",{"_index":149,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["strokecolor",{"_index":601,"title":{},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["strokestyle",{"_index":555,"title":{},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["strokestyle).drawcircle(x",{"_index":806,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["strokestyle).moveto(from.x",{"_index":800,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["strokestyle?.caps",{"_index":823,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["styles",{"_index":222,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["styleurls",{"_index":232,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["subtract",{"_index":1096,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["subtract(matrixref",{"_index":1372,"title":{},"body":{"classes/NumberMatrix.html":{}}}],["subtractarrays",{"_index":1294,"title":{},"body":{"classes/MatrixUtil.html":{}}}],["subtractarrays(arr1",{"_index":1192,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["super",{"_index":1157,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["super(input1",{"_index":1158,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["support",{"_index":1593,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1594,"title":{},"body":{"modules.html":{}}}],["symbols",{"_index":15,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["symbols(_symbols",{"_index":424,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["systeminputs",{"_index":77,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["systeminputtype",{"_index":39,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{},"miscellaneous/typealiases.html":{}}}],["systemoutput",{"_index":118,"title":{"interfaces/SystemOutput.html":{}},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{},"coverage.html":{}}}],["t",{"_index":442,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["t.length).fill(0",{"_index":445,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["t.unshift(...array(l",{"_index":444,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["table",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1508,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":221,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["templateurl",{"_index":234,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["tempnode",{"_index":1349,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["term",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["termqueue",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["termqueue.filter((_term",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["termqueue.filter((term",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["termqueue.includes(cell.decimal",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["termqueue.length",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["termqueue[0",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terms",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terms.indexof(kmap[currow][curcol].decimal",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":1572,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1583,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1571,"title":{},"body":{"index.html":{}}}],["text",{"_index":614,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{}}}],["text(n.tostring",{"_index":810,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["text.x",{"_index":814,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["text.y",{"_index":816,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["text/javascript",{"_index":1263,"title":{},"body":{"guards/MapResolver.html":{}}}],["textcolor",{"_index":543,"title":{},"body":{"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{}}}],["texts",{"_index":631,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["texts.push(createjs_shapes.gettext(number",{"_index":621,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["that.dimension.foreach((element",{"_index":1180,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["that.dimension.length",{"_index":1177,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this._api_key",{"_index":1069,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["this._api_key.apikey",{"_index":1074,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["this._children",{"_index":1327,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["this._children.push(child",{"_index":1335,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["this._children?.length",{"_index":1329,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["this._data",{"_index":1325,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["this._database.getchildren(node.item",{"_index":1011,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this._database.isexpandable(name",{"_index":1016,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this._depth",{"_index":1121,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this._depth}).fill(0",{"_index":1125,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this._dimension",{"_index":1122,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this._dimension.length",{"_index":1140,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this._fnos",{"_index":421,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["this._inputs",{"_index":419,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["this._map",{"_index":1224,"title":{},"body":{"components/MapComponent.html":{}}}],["this._matrix",{"_index":1141,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this._node_id",{"_index":1314,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["this._output",{"_index":121,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this._output['f",{"_index":131,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this._parent",{"_index":1326,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}}}],["this._root",{"_index":1319,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{}}}],["this._symbols",{"_index":416,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["this._symbols.length",{"_index":418,"title":{},"body":{"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"interfaces/SystemOutput.html":{}}}],["this._treecontrol.datanodes",{"_index":988,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this._treecontrol.expansionmodel.changed.subscribe((change",{"_index":995,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.addarrays(arr1[index",{"_index":1189,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.addscripttodom(id",{"_index":1259,"title":{},"body":{"guards/MapResolver.html":{}}}],["this.animateclock",{"_index":886,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.bits",{"_index":56,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"interfaces/SystemOutput.html":{}}}],["this.cfr.resolvecomponentfactory",{"_index":270,"title":{},"body":{"components/AppComponent.html":{}}}],["this.cfr.resolvecomponentfactory(cmp[cmpname",{"_index":486,"title":{},"body":{"components/CanvasComponent.html":{}}}],["this.children?.[0]?.parent",{"_index":1338,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["this.clockobj",{"_index":574,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.container",{"_index":583,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.container.addchild(clock.container",{"_index":708,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.container.addchild(container",{"_index":901,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.container.children.findindex(c",{"_index":740,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.container.children[index",{"_index":742,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.container.rotation",{"_index":582,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.create",{"_index":573,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.createclock",{"_index":584,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.createlinks",{"_index":711,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.data",{"_index":1001,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.data.indexof(node",{"_index":1012,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.data.splice(index",{"_index":1018,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.datachange).pipe(map",{"_index":1000,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.datachange.next(_treedatasource.data",{"_index":993,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.datachange.next(this.data",{"_index":1019,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.datachange.next(value",{"_index":989,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.datachange.value",{"_index":986,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.datamap.get(node",{"_index":1053,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["this.datamap.has(node",{"_index":1054,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["this.depth",{"_index":1143,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.dimension",{"_index":1145,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.dimension[i",{"_index":1151,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.drawobject",{"_index":761,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.drawobject(i",{"_index":897,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.expression",{"_index":109,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.finnhubclient",{"_index":1075,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["this.fn",{"_index":115,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.framerate",{"_index":678,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.getashokchakra(24",{"_index":609,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.getbinaryoutputsequence(fnno",{"_index":90,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.getbinaryoutputsequence(idx",{"_index":95,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.getchakra",{"_index":612,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.getcircle(circlecenter.x",{"_index":911,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.getclocktexts(x",{"_index":615,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.getdepthfrommatrix(matrix",{"_index":1144,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.getdepthfrommatrix(matrix[0",{"_index":1149,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.getdimensionfrommatrix(matrix",{"_index":1146,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.getdimensionfrommatrix(matrix[0",{"_index":1153,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.getdynamiccomponentcontainer",{"_index":589,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.getgraphics().drawcircle(x",{"_index":925,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.getgraphics().drawrect(x",{"_index":808,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.getgraphics(graphicscolor?.fillcolor",{"_index":804,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"interfaces/ICenter.html":{},"interfaces/IStrokeStyle.html":{}}}],["this.getgraphics(graphicscolors?.fillcolor",{"_index":798,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.getline(from",{"_index":840,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.getobject(i",{"_index":899,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.getrect((2*i",{"_index":918,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.getrect((2*i)*radius,(2*i)*radius,radius,radius",{"_index":916,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.getrect(100",{"_index":839,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.getstage",{"_index":676,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.getstaticcomponentcontainer",{"_index":586,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.getxyspeed(shapeobject.direction",{"_index":746,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.handletreecontrol(change",{"_index":998,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.hands",{"_index":588,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.hands['hourhand'].rotation",{"_index":580,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.hands['minutehand'].rotation",{"_index":578,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.hands['secondhand'].rotation",{"_index":576,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.httpclient.get(context",{"_index":893,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.id",{"_index":1217,"title":{},"body":{"components/MapComponent.html":{}}}],["this.inputs",{"_index":65,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.iomap",{"_index":92,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.iterationoverchildren(currentnode",{"_index":1339,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["this.line",{"_index":838,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.line.rotation",{"_index":843,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.links",{"_index":710,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.links.filter((link",{"_index":738,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.loaddynamiccomponent",{"_index":262,"title":{},"body":{"components/AppComponent.html":{}}}],["this.loadgoogle",{"_index":1218,"title":{},"body":{"components/MapComponent.html":{}}}],["this.loadmap",{"_index":1219,"title":{},"body":{"components/MapComponent.html":{}}}],["this.loadosm",{"_index":1270,"title":{},"body":{"guards/MapResolver.html":{}}}],["this.main",{"_index":680,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.matrix.length",{"_index":1160,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.maxinputcombinations",{"_index":60,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.maxnumberofoutputs",{"_index":62,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.moveobjects",{"_index":727,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.name",{"_index":570,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.objectslist",{"_index":683,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.objectslist[c].isx_inc",{"_index":701,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.objectslist[c].isy_inc",{"_index":703,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.objectslist[e].position",{"_index":706,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.objectslist[e].shape",{"_index":709,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.objectslist[link.nodes[1]].position",{"_index":726,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.objectslist[name",{"_index":737,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.ontick.bind(this",{"_index":682,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.outputfnslist",{"_index":67,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.outputseq",{"_index":89,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.outputseq.join",{"_index":103,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.outputseq.map((_",{"_index":93,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.outputseq.map((value",{"_index":105,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.outputseq[idx",{"_index":100,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.outputstring",{"_index":102,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.position",{"_index":571,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.position?.x",{"_index":595,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.position?.y",{"_index":596,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.radius",{"_index":572,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.reset",{"_index":123,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.rootlevelnodes.map(name",{"_index":1052,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["this.rows",{"_index":1159,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.setcurrenttime",{"_index":590,"title":{},"body":{"classes/Clock.html":{},"interfaces/IClock.html":{}}}],["this.stage",{"_index":675,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.stage.addchild(shape",{"_index":762,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.stage.addchild(this.container",{"_index":712,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.stage.addchild(this.container.addchild(this.line",{"_index":842,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.stage.canvas",{"_index":763,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.stage.update",{"_index":728,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["this.subtractarrays(arr1[index",{"_index":1193,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["this.symbols",{"_index":57,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systeminputs.bits",{"_index":110,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systeminputs.bits).reduce((a",{"_index":96,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systeminputs.maxinputcombinations.length",{"_index":91,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systeminputs.maxnumberofoutputs",{"_index":136,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systeminputs.outputfnslist",{"_index":126,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systeminputs.symbols[index",{"_index":98,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systemoutput",{"_index":127,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systemoutput.calculate(i",{"_index":130,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.systemoutput.get",{"_index":132,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["this.togglenode(node",{"_index":1007,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.tree",{"_index":1452,"title":{},"body":{"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["this.tree.getroot",{"_index":1454,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["this.treedatasource",{"_index":990,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["this.treenode",{"_index":1453,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["this.updatelinks",{"_index":735,"title":{},"body":{"components/ClockComponent.html":{}}}],["this.updatestage(this.container",{"_index":902,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.updatestage(this.gettext(2",{"_index":927,"title":{},"body":{"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["this.vcref.clear",{"_index":264,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["this.vcref.createcomponent",{"_index":269,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["three",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["throw",{"_index":1167,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["ticker",{"_index":673,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["ticker.interval",{"_index":677,"title":{},"body":{"components/ClockComponent.html":{}}}],["ticker.on('tick",{"_index":681,"title":{},"body":{"components/ClockComponent.html":{},"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["ticker.setfps(60",{"_index":841,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["ticker.setfps(this.framerate",{"_index":679,"title":{},"body":{"components/ClockComponent.html":{}}}],["tilelayer",{"_index":1213,"title":{},"body":{"components/MapComponent.html":{}}}],["tilelayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{"_index":1226,"title":{},"body":{"components/MapComponent.html":{}}}],["title",{"_index":236,"title":{},"body":{"components/AppComponent.html":{}}}],["to.y",{"_index":802,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["togglenode",{"_index":940,"title":{},"body":{"injectables/DynamicDataSource.html":{}}}],["togglenode(node",{"_index":952,"title":{},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{}}}],["tomato",{"_index":1041,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["top",{"_index":731,"title":{},"body":{"components/ClockComponent.html":{},"components/TreeChildComponent.html":{}}}],["total_expression",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transpose",{"_index":1097,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["tree",{"_index":224,"title":{"classes/Tree.html":{},"classes/Tree-1.html":{}},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"classes/NodeType.html":{},"components/StockListComponent.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["tree(\"root",{"_index":1463,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["tree.getroot",{"_index":1464,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["treechildcomponent",{"_index":302,"title":{"components/TreeChildComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["treedatasource",{"_index":938,"title":{"classes/TreeDataSource.html":{}},"body":{"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"coverage.html":{}}}],["treenode",{"_index":1316,"title":{"classes/TreeNode.html":{},"classes/TreeNode-1.html":{}},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["treenode(\"first",{"_index":1465,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["treenode(\"second",{"_index":1468,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["treenode(\"third",{"_index":1471,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["treenode(data",{"_index":1320,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"classes/TreeNode.html":{}}}],["treeparentcomponent",{"_index":304,"title":{"components/TreeParentComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["treeviewcomponent",{"_index":306,"title":{"components/TreeViewComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"overview.html":{}}}],["true",{"_index":702,"title":{},"body":{"components/ClockComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":28,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"injectables/FinnhubApiService.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/INumberMatrixOps.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"interfaces/SystemOutput.html":{},"classes/Tree.html":{},"classes/Tree-1.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1600,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/createjs",{"_index":1519,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":1030,"title":{},"body":{"injectables/DynamicDatabase.html":{},"miscellaneous/variables.html":{}}}],["uniqlinks",{"_index":713,"title":{},"body":{"components/ClockComponent.html":{}}}],["uniqlinks.findindex(l",{"_index":716,"title":{},"body":{"components/ClockComponent.html":{}}}],["unit",{"_index":1570,"title":{},"body":{"index.html":{}}}],["updatelinks",{"_index":650,"title":{},"body":{"components/ClockComponent.html":{}}}],["updatestage",{"_index":651,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{}}}],["updatestage(shape",{"_index":667,"title":{},"body":{"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{}}}],["url",{"_index":1241,"title":{},"body":{"guards/MapResolver.html":{}}}],["use",{"_index":1562,"title":{},"body":{"index.html":{}}}],["utilprops",{"_index":1128,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["utilprops[prop",{"_index":1132,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{}}}],["uuid",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["v",{"_index":97,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{}}}],["valid",{"_index":1111,"title":{},"body":{"interfaces/INumberMatrixOps.html":{},"classes/Matrix.html":{},"classes/MatrixGenerator.html":{},"classes/MatrixUtil.html":{},"classes/NumberMatrix.html":{},"classes/NumberMatrixUtil.html":{},"miscellaneous/enumerations.html":{}}}],["value",{"_index":106,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinaryUtil.html":{},"classes/BooleanMagicBox.html":{},"components/ClockComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"injectables/DynamicDatabase.html":{},"interfaces/DynamicFlatNode.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["vantage",{"_index":1072,"title":{},"body":{"injectables/FinnhubApiService.html":{}}}],["var",{"_index":285,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["variable",{"_index":1490,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1610,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variables.length",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["vcref",{"_index":237,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["vegetables",{"_index":1040,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["version",{"_index":1546,"title":{},"body":{"index.html":{}}}],["via",{"_index":1574,"title":{},"body":{"index.html":{}}}],["view",{"_index":307,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"components/MapComponent.html":{},"components/StockListComponent.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["view.component",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["view.component.css",{"_index":1457,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["view.component.html",{"_index":1458,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["view.component.ts",{"_index":1456,"title":{},"body":{"components/TreeViewComponent.html":{},"coverage.html":{}}}],["view.component.ts:12",{"_index":1460,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["view.component.ts:15",{"_index":1462,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["view.component.ts:17",{"_index":1461,"title":{},"body":{"components/TreeViewComponent.html":{}}}],["view/models/tree",{"_index":1430,"title":{},"body":{"classes/TreeNode-1.html":{},"coverage.html":{}}}],["view/models/tree.ts",{"_index":1390,"title":{},"body":{"classes/Tree-1.html":{},"coverage.html":{}}}],["view/models/tree.ts:11",{"_index":1393,"title":{},"body":{"classes/Tree-1.html":{}}}],["view/models/tree.ts:5",{"_index":1392,"title":{},"body":{"classes/Tree-1.html":{}}}],["view/tree",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"components/TreeChildComponent.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{},"coverage.html":{}}}],["viewchild",{"_index":257,"title":{},"body":{"components/AppComponent.html":{}}}],["viewchild('lazyloadcmp",{"_index":255,"title":{},"body":{"components/AppComponent.html":{}}}],["viewcontainerref",{"_index":253,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{}}}],["visualized",{"_index":1455,"title":{},"body":{"components/TreeParentComponent.html":{}}}],["void",{"_index":43,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"components/AppComponent.html":{},"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BooleanMagicBox.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"injectables/DynamicDataSource.html":{},"interfaces/DynamicFlatNode.html":{},"interfaces/IAnimateShape.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{},"components/MapComponent.html":{},"guards/MapResolver.html":{},"classes/Matrix.html":{},"classes/MatrixUtil.html":{},"classes/NodeType.html":{},"components/StockListComponent.html":{},"classes/Tree.html":{},"components/TreeChildComponent.html":{},"classes/TreeDataSource.html":{},"classes/TreeNode.html":{},"classes/TreeNode-1.html":{},"components/TreeParentComponent.html":{},"components/TreeViewComponent.html":{}}}],["w",{"_index":782,"title":{},"body":{"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{},"miscellaneous/variables.html":{}}}],["w/2",{"_index":851,"title":{},"body":{"components/DemoComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["while(currentparent",{"_index":1332,"title":{},"body":{"classes/NodeType.html":{},"classes/Tree.html":{},"classes/TreeNode.html":{}}}],["white",{"_index":1047,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["width",{"_index":276,"title":{},"body":{"components/AppComponent.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-2.html":{},"interfaces/IClock.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["window.innerheight",{"_index":494,"title":{},"body":{"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IClock.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["window.innerwidth",{"_index":491,"title":{},"body":{"components/CanvasComponent.html":{},"components/ClockComponent.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["works",{"_index":1386,"title":{},"body":{"components/StockListComponent.html":{}}}],["x",{"_index":545,"title":{},"body":{"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["y",{"_index":101,"title":{},"body":{"classes/AIBInput.html":{},"classes/AIBOutput.html":{},"classes/BinUtil.html":{},"classes/BooleanMagicBox.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"interfaces/ICenter.html":{},"interfaces/ICenter-1.html":{},"interfaces/ICenter-2.html":{},"interfaces/ICenter-3.html":{},"interfaces/ICircleConfig.html":{},"interfaces/IClock.html":{},"interfaces/IGraphics.html":{},"interfaces/IShapeObject.html":{},"interfaces/IStrokeStyle.html":{},"interfaces/IStrokeStyle-1.html":{}}}],["yellow",{"_index":1046,"title":{},"body":{"injectables/DynamicDatabase.html":{}}}],["yes",{"_index":382,"title":{},"body":{"classes/BinUtil.html":{},"classes/BinarySystem.html":{},"classes/BinaryUtil.html":{},"components/CanvasComponent.html":{},"classes/Clock.html":{},"components/ClockComponent.html":{},"classes/CreateJS_Shapes.html":{},"components/DemoComponent.html":{},"components/DrawAnimComponent.html":{},"classes/Matrix.html":{},"classes/NumberMatrix.html":{},"classes/Tree.html":{}}}],["zone.js",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"components/MapComponent.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AIBInput.html":{"url":"classes/AIBInput.html","title":"class - AIBInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AIBInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/AIBinarySystem.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bits\n                            \n                            \n                                    Public\n                                inputs\n                            \n                            \n                                    Public\n                                maxInputCombinations\n                            \n                            \n                                    Public\n                                maxNumberOfOutputs\n                            \n                            \n                                    Public\n                                outputFnsList\n                            \n                            \n                                    Public\n                                symbols\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setInputs\n                            \n                            \n                                    Public\n                                setOutputFnsList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_input1: Array | number)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/AIBinarySystem.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _input1\n                                                  \n                                                        \n                                                                    Array | number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArrayOfArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxInputCombinations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArrayOfArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxNumberOfOutputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        outputFnsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setInputs\n                        \n                    \n                \n            \n            \n                \n                    \n                    setInputs(_inputs: SystemInputType)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _inputs\n                                    \n                                                SystemInputType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setOutputFnsList\n                        \n                    \n                \n            \n            \n                \n                    \n                    setOutputFnsList(_outputFnsList: FnInputType)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _outputFnsList\n                                    \n                                                FnInputType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { solve } from './k-map-solver';\n\nclass AIBInput {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxNumberOfOutputs: number;\n    public symbols: Array;\n\n    public inputs: ArrayOfArray;\n    public outputFnsList: Array;\n\n    constructor(bits: number);\n    constructor(symbols: Array);\n    constructor(_input1: Array | number) {\n        if(typeof _input1 === 'number') {\n            this.bits = _input1;\n            this.symbols = BinUtil.getSymbolsList(this.bits);\n        } else {\n            this.bits = _input1.length;\n        }\n        this.maxInputCombinations = BinUtil.getMaximumInputCombinations(this.bits);\n        this.maxNumberOfOutputs = Math.pow(1, Math.pow(2, this.bits));\n    }\n    public setInputs(_inputs: SystemInputType): void {\n        this.inputs = BinUtil.getStandardInputs(_inputs);\n    }\n    public setOutputFnsList(_outputFnsList: FnInputType): void {\n        this.outputFnsList = BinUtil.getFnList(_outputFnsList);\n    }\n}\n\nclass AIBOutput {\n    public ioMap: any;\n    public outputSeq: Array;\n    public outputString: string;\n    public expression: string;\n    public fn: string;\n\n    constructor(private systemInputs: AIBInput) {}\n\n    private getBinaryOutputSequence = (n: number, maxInputCombinations: number) => {\n        const bitSeq = BinUtil.decimalToBitArray(n);\n        bitSeq.unshift(maxInputCombinations - bitSeq.length);\n        return bitSeq;\n    }\n    calculate = (fnNo: number): void => {\n        this.outputSeq = this.getBinaryOutputSequence(fnNo, this.systemInputs.maxInputCombinations.length);\n\n        \n        this.ioMap = this.outputSeq.map((_, idx) => this.getBinaryOutputSequence(idx, this.systemInputs.bits).reduce((a, v, index) => ({ ...a, [this.systemInputs.symbols[index]]: v, ['f' + fnNo]: this.outputSeq[idx], Y: this.outputSeq[idx] }), {}));\n        \n        this.outputString = this.outputSeq.join(\"\");\n        \n        const minterm = this.outputSeq.map((value, index) => value ? index : null).filter(v => (v !== null));\n        this.expression = (this.systemInputs.bits > 1 && this.systemInputs.bits  -1) ? solve(this.systemInputs.symbols, minterm).expression : '0') : null;\n        \n        this.fn = 'f' + fnNo;\n    }\n    reset(): void {\n        this.ioMap = null;\n        this.outputSeq = [];\n        this.outputString = null;\n        this.expression = null;\n        this.fn = null;\n    }\n    get = (): AIBOutput => {\n        return {\n            ioMap: this.ioMap,\n            outputSeq: this.outputSeq,\n            outputString: this.outputString,\n            expression: this.expression,\n            fn: this.fn,\n        } as AIBOutput;\n    }\n}\n\nclass BooleanMagicBox {\n    private systemOutput: AIBOutput;\n    private _output: {[key: string]: AIBOutput};\n    constructor(private systemInputs: AIBInput) {\n        this._output = {};\n    }\n    create(): void {\n        this.reset();\n        if(this.systemInputs.outputFnsList?.length > 0) {\n            for(let i of this.systemInputs.outputFnsList) {\n                this.systemOutput = new AIBOutput(this.systemInputs);\n                this.systemOutput.calculate(i);\n                this._output['f' + i] = this.systemOutput.get();\n            }\n        } else {\n            const noOfOutputs = this.systemInputs.bits > 4 ? 1000 : this.systemInputs.maxNumberOfOutputs;\n            for( let i = 0; i  {\n        let dd = Array(Math.pow(2,t)).fill([]).map((_,i) => Number(i).toString(2).split(\"\")).map(e => e.map(t => Number(t)));\n        dd.forEach(e => e.unshift(...Array(t - e.length).fill(0)));\n        return dd;\n    };\n    public static getSymbolsList = (bits: number) => Array.isArray(bits) ? bits : Array(bits).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AIBOutput.html":{"url":"classes/AIBOutput.html","title":"class - AIBOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AIBOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/AIBinarySystem.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calculate\n                            \n                            \n                                    Public\n                                expression\n                            \n                            \n                                    Public\n                                fn\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                getBinaryOutputSequence\n                            \n                            \n                                    Public\n                                ioMap\n                            \n                            \n                                    Public\n                                outputSeq\n                            \n                            \n                                    Public\n                                outputString\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(systemInputs: AIBInput)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/AIBinarySystem.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        systemInputs\n                                                  \n                                                        \n                                                                        AIBInput\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        calculate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        expression\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getBinaryOutputSequence\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ioMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        outputSeq\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        outputString\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:42\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { solve } from './k-map-solver';\n\nclass AIBInput {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxNumberOfOutputs: number;\n    public symbols: Array;\n\n    public inputs: ArrayOfArray;\n    public outputFnsList: Array;\n\n    constructor(bits: number);\n    constructor(symbols: Array);\n    constructor(_input1: Array | number) {\n        if(typeof _input1 === 'number') {\n            this.bits = _input1;\n            this.symbols = BinUtil.getSymbolsList(this.bits);\n        } else {\n            this.bits = _input1.length;\n        }\n        this.maxInputCombinations = BinUtil.getMaximumInputCombinations(this.bits);\n        this.maxNumberOfOutputs = Math.pow(1, Math.pow(2, this.bits));\n    }\n    public setInputs(_inputs: SystemInputType): void {\n        this.inputs = BinUtil.getStandardInputs(_inputs);\n    }\n    public setOutputFnsList(_outputFnsList: FnInputType): void {\n        this.outputFnsList = BinUtil.getFnList(_outputFnsList);\n    }\n}\n\nclass AIBOutput {\n    public ioMap: any;\n    public outputSeq: Array;\n    public outputString: string;\n    public expression: string;\n    public fn: string;\n\n    constructor(private systemInputs: AIBInput) {}\n\n    private getBinaryOutputSequence = (n: number, maxInputCombinations: number) => {\n        const bitSeq = BinUtil.decimalToBitArray(n);\n        bitSeq.unshift(maxInputCombinations - bitSeq.length);\n        return bitSeq;\n    }\n    calculate = (fnNo: number): void => {\n        this.outputSeq = this.getBinaryOutputSequence(fnNo, this.systemInputs.maxInputCombinations.length);\n\n        \n        this.ioMap = this.outputSeq.map((_, idx) => this.getBinaryOutputSequence(idx, this.systemInputs.bits).reduce((a, v, index) => ({ ...a, [this.systemInputs.symbols[index]]: v, ['f' + fnNo]: this.outputSeq[idx], Y: this.outputSeq[idx] }), {}));\n        \n        this.outputString = this.outputSeq.join(\"\");\n        \n        const minterm = this.outputSeq.map((value, index) => value ? index : null).filter(v => (v !== null));\n        this.expression = (this.systemInputs.bits > 1 && this.systemInputs.bits  -1) ? solve(this.systemInputs.symbols, minterm).expression : '0') : null;\n        \n        this.fn = 'f' + fnNo;\n    }\n    reset(): void {\n        this.ioMap = null;\n        this.outputSeq = [];\n        this.outputString = null;\n        this.expression = null;\n        this.fn = null;\n    }\n    get = (): AIBOutput => {\n        return {\n            ioMap: this.ioMap,\n            outputSeq: this.outputSeq,\n            outputString: this.outputString,\n            expression: this.expression,\n            fn: this.fn,\n        } as AIBOutput;\n    }\n}\n\nclass BooleanMagicBox {\n    private systemOutput: AIBOutput;\n    private _output: {[key: string]: AIBOutput};\n    constructor(private systemInputs: AIBInput) {\n        this._output = {};\n    }\n    create(): void {\n        this.reset();\n        if(this.systemInputs.outputFnsList?.length > 0) {\n            for(let i of this.systemInputs.outputFnsList) {\n                this.systemOutput = new AIBOutput(this.systemInputs);\n                this.systemOutput.calculate(i);\n                this._output['f' + i] = this.systemOutput.get();\n            }\n        } else {\n            const noOfOutputs = this.systemInputs.bits > 4 ? 1000 : this.systemInputs.maxNumberOfOutputs;\n            for( let i = 0; i  {\n        let dd = Array(Math.pow(2,t)).fill([]).map((_,i) => Number(i).toString(2).split(\"\")).map(e => e.map(t => Number(t)));\n        dd.forEach(e => e.unshift(...Array(t - e.length).fill(0)));\n        return dd;\n    };\n    public static getSymbolsList = (bits: number) => Array.isArray(bits) ? bits : Array(bits).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                            \n                                vcref\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadCmp\n                            \n                            \n                                    Async\n                                loadDynamicComponent\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cfr: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cfr\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadCmp\n                        \n                    \n                \n            \n            \n                \nloadCmp(event: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loadDynamicComponent\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadDynamicComponent()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'demo-app'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcref\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ViewContainerRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('lazyLoadCmp', {read: ViewContainerRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ComponentFactoryResolver, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'demo-app';\n\n  @ViewChild('lazyLoadCmp', { read: ViewContainerRef }) vcref: ViewContainerRef\n  constructor(\n    // private vcref: ViewContainerRef,\n    private cfr: ComponentFactoryResolver\n  ) {\n  }\n  ngOnInit(): void {\n    console.log(this.vcref);\n    // setTimeout(() => {\n    //   this.loadDynamicComponent();\n    // }, 1000)\n  }\n\n  loadCmp(event: any) {\n    // console.log(event);\n    this.loadDynamicComponent();\n  }\n\n  async loadDynamicComponent() {\n    this.vcref.clear();\n    import('./components/canvas/canvas.component').then((cmp: any) => {\n      const componentName: string = Object.keys(cmp)[0];\n      let clockCmp = this.vcref.createComponent(\n        this.cfr.resolveComponentFactory( cmp[componentName] )\n      );\n    });\n    // clockCmp.instance.radius = 160;\n  }\n}\n    \n\n    \n         -->\n     -->\n -->\nLoad Component\n\n    \n\n    \n\n    \n                \n                    ./app.component.css\n                \n                :host{\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' -->     --> -->Load Component    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nDemoComponent\n\nDemoComponent\n\nAppModule -->\n\nDemoComponent->AppModule\n\n\n\n\n\nDrawAnimComponent\n\nDrawAnimComponent\n\nAppModule -->\n\nDrawAnimComponent->AppModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nAppModule -->\n\nMapComponent->AppModule\n\n\n\n\n\nStockListComponent\n\nStockListComponent\n\nAppModule -->\n\nStockListComponent->AppModule\n\n\n\n\n\nTreeChildComponent\n\nTreeChildComponent\n\nAppModule -->\n\nTreeChildComponent->AppModule\n\n\n\n\n\nTreeParentComponent\n\nTreeParentComponent\n\nAppModule -->\n\nTreeParentComponent->AppModule\n\n\n\n\n\nTreeViewComponent\n\nTreeViewComponent\n\nAppModule -->\n\nTreeViewComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            DemoComponent\n                        \n                        \n                            DrawAnimComponent\n                        \n                        \n                            MapComponent\n                        \n                        \n                            StockListComponent\n                        \n                        \n                            TreeChildComponent\n                        \n                        \n                            TreeParentComponent\n                        \n                        \n                            TreeViewComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MapComponent } from './components/map/map.component';\nimport { TreeViewComponent } from './components/tree-view/tree-view.component';\nimport { TreeChildComponent } from './components/tree-view/tree-child/tree-child.component';\nimport { TreeParentComponent } from './components/tree-view/tree-parent/tree-parent.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { DrawAnimComponent } from './components/draw-anim/draw-anim.component';\nimport { StockListComponent } from './components/stocks/stock-list/stock-list.component';\nimport { DemoComponent } from './components/demo/demo.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MapComponent,\n    TreeViewComponent,\n    TreeChildComponent,\n    TreeParentComponent,\n    DrawAnimComponent,\n    StockListComponent,\n    DemoComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatTreeModule,\n    MatIconModule,\n    MatProgressBarModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ClockComponent } from './components/clock/clock.component';\nimport { DrawAnimComponent } from './components/draw-anim/draw-anim.component';\nimport { MapComponent } from './components/map/map.component';\nimport { MapResolver } from './resolver/map.resolver';\n\nconst routes: Routes = [\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BinUtil.html":{"url":"classes/BinUtil.html","title":"class - BinUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BinUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/AIBinarySystem.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                binaryToBitArray\n                            \n                            \n                                    Static\n                                decimalToBitArray\n                            \n                            \n                                    Static\n                                getBitsSymbols\n                            \n                            \n                                    Static\n                                getMaximumInputCombinations\n                            \n                            \n                                    Static\n                                getSymbolsList\n                            \n                            \n                                    Static\n                                isArrayOfArray\n                            \n                            \n                                    Static\n                                isBinary\n                            \n                            \n                                    Static\n                                maxStandardInputsArray\n                            \n                            \n                                    Static\n                                minStandardInputsArray\n                            \n                            \n                                    Static\n                                sanitizeTwoDArray\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getFnList\n                            \n                            \n                                    Static\n                                getStandardInputs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        binaryToBitArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalToBitArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getBitsSymbols\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getMaximumInputCombinations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:119\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getSymbolsList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isArrayOfArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isBinary\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        maxStandardInputsArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        minStandardInputsArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sanitizeTwoDArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:134\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getFnList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFnList(fnO: FnInputType)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fnO\n                                    \n                                                FnInputType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getStandardInputs\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                                SystemInputType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isMinimalSystem\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { solve } from './k-map-solver';\n\nclass AIBInput {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxNumberOfOutputs: number;\n    public symbols: Array;\n\n    public inputs: ArrayOfArray;\n    public outputFnsList: Array;\n\n    constructor(bits: number);\n    constructor(symbols: Array);\n    constructor(_input1: Array | number) {\n        if(typeof _input1 === 'number') {\n            this.bits = _input1;\n            this.symbols = BinUtil.getSymbolsList(this.bits);\n        } else {\n            this.bits = _input1.length;\n        }\n        this.maxInputCombinations = BinUtil.getMaximumInputCombinations(this.bits);\n        this.maxNumberOfOutputs = Math.pow(1, Math.pow(2, this.bits));\n    }\n    public setInputs(_inputs: SystemInputType): void {\n        this.inputs = BinUtil.getStandardInputs(_inputs);\n    }\n    public setOutputFnsList(_outputFnsList: FnInputType): void {\n        this.outputFnsList = BinUtil.getFnList(_outputFnsList);\n    }\n}\n\nclass AIBOutput {\n    public ioMap: any;\n    public outputSeq: Array;\n    public outputString: string;\n    public expression: string;\n    public fn: string;\n\n    constructor(private systemInputs: AIBInput) {}\n\n    private getBinaryOutputSequence = (n: number, maxInputCombinations: number) => {\n        const bitSeq = BinUtil.decimalToBitArray(n);\n        bitSeq.unshift(maxInputCombinations - bitSeq.length);\n        return bitSeq;\n    }\n    calculate = (fnNo: number): void => {\n        this.outputSeq = this.getBinaryOutputSequence(fnNo, this.systemInputs.maxInputCombinations.length);\n\n        \n        this.ioMap = this.outputSeq.map((_, idx) => this.getBinaryOutputSequence(idx, this.systemInputs.bits).reduce((a, v, index) => ({ ...a, [this.systemInputs.symbols[index]]: v, ['f' + fnNo]: this.outputSeq[idx], Y: this.outputSeq[idx] }), {}));\n        \n        this.outputString = this.outputSeq.join(\"\");\n        \n        const minterm = this.outputSeq.map((value, index) => value ? index : null).filter(v => (v !== null));\n        this.expression = (this.systemInputs.bits > 1 && this.systemInputs.bits  -1) ? solve(this.systemInputs.symbols, minterm).expression : '0') : null;\n        \n        this.fn = 'f' + fnNo;\n    }\n    reset(): void {\n        this.ioMap = null;\n        this.outputSeq = [];\n        this.outputString = null;\n        this.expression = null;\n        this.fn = null;\n    }\n    get = (): AIBOutput => {\n        return {\n            ioMap: this.ioMap,\n            outputSeq: this.outputSeq,\n            outputString: this.outputString,\n            expression: this.expression,\n            fn: this.fn,\n        } as AIBOutput;\n    }\n}\n\nclass BooleanMagicBox {\n    private systemOutput: AIBOutput;\n    private _output: {[key: string]: AIBOutput};\n    constructor(private systemInputs: AIBInput) {\n        this._output = {};\n    }\n    create(): void {\n        this.reset();\n        if(this.systemInputs.outputFnsList?.length > 0) {\n            for(let i of this.systemInputs.outputFnsList) {\n                this.systemOutput = new AIBOutput(this.systemInputs);\n                this.systemOutput.calculate(i);\n                this._output['f' + i] = this.systemOutput.get();\n            }\n        } else {\n            const noOfOutputs = this.systemInputs.bits > 4 ? 1000 : this.systemInputs.maxNumberOfOutputs;\n            for( let i = 0; i  {\n        let dd = Array(Math.pow(2,t)).fill([]).map((_,i) => Number(i).toString(2).split(\"\")).map(e => e.map(t => Number(t)));\n        dd.forEach(e => e.unshift(...Array(t - e.length).fill(0)));\n        return dd;\n    };\n    public static getSymbolsList = (bits: number) => Array.isArray(bits) ? bits : Array(bits).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BinarySystem.html":{"url":"classes/BinarySystem.html","title":"class - BinarySystem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BinarySystem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/BinarySystem.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _fnOs\n                            \n                            \n                                    Private\n                                _inputs\n                            \n                            \n                                    Private\n                                _output\n                            \n                            \n                                    Private\n                                _symbols\n                            \n                            \n                                    Public\n                                bits\n                            \n                            \n                                    Public\n                                maxInputCombinations\n                            \n                            \n                                    Public\n                                maxOutputCombinations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMagicBox\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    symbols\n                                \n                                \n                                    inputs\n                                \n                                \n                                    fnOs\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_bits?: Array | number, _inputs?: SystemInputType, _fnO?: FnInputType)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/BinarySystem.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _bits\n                                                  \n                                                        \n                                                                    Array | number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        _inputs\n                                                  \n                                                        \n                                                                        SystemInputType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        _fnO\n                                                  \n                                                        \n                                                                        FnInputType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _fnOs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _inputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArrayOfArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SystemOutput\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _symbols\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxInputCombinations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArrayOfArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        maxOutputCombinations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ArrayOfArray\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMagicBox\n                        \n                    \n                \n            \n            \n                \ngetMagicBox()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/BinarySystem.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        symbols\n                    \n                \n\n                \n                    \n                        getsymbols()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/BinarySystem.ts:38\n                                \n                            \n\n                \n                    \n                        setsymbols(_symbols: Array | number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/BinarySystem.ts:33\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            _symbols\n                                                    \n                                                            \n                                                                        Array | number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        inputs\n                    \n                \n\n                \n                    \n                        getinputs()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/BinarySystem.ts:48\n                                \n                            \n\n                \n                    \n                        setinputs(_inputs: SystemInputType)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/BinarySystem.ts:42\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            _inputs\n                                                    \n                                                            \n                                                                            SystemInputType\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        fnOs\n                    \n                \n\n                \n                    \n                        getfnOs()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/BinarySystem.ts:56\n                                \n                            \n\n                \n                    \n                        setfnOs(_fnOs: FnInputType)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/BinarySystem.ts:52\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            _fnOs\n                                                    \n                                                            \n                                                                            FnInputType\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        type ArrayOfArray = Array>;\n\n// type ArgsType = 'inputs' | 'fnOs';\ntype SystemInputType = ArrayOfArray | Array | number | string;\ntype FnInputType = Array | number | string;\ninterface SystemOutput {\n    ioMap: {[key: string]: number},\n    outputSeq: Array,\n    outputString: string,\n    expression: string,\n    fn: string,\n}\n\nclass BinarySystem {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxOutputCombinations: ArrayOfArray;\n    private _symbols: Array;\n    private _inputs: ArrayOfArray;\n    private _fnOs: Array;\n    private _output: SystemOutput;\n    constructor();\n    constructor(bits: Array | number);\n    constructor(bits: Array | number, inputs: SystemInputType);\n    constructor(bits: Array | number, inputs: SystemInputType, fnO: FnInputType);\n    constructor(_bits?: Array | number, _inputs?: SystemInputType, _fnO?: FnInputType) {\n        this._symbols = _bits ? BinaryUtil.getBitsSymbols(_bits) : null;\n        this.bits = this._symbols.length;\n        this._inputs = _inputs ? BinaryUtil.getStandardInputs(_inputs) : null;\n        this._fnOs = _fnO ? BinaryUtil.getFnList(_fnO) : [];\n    }\n\n    set symbols(_symbols: Array | number) {\n        if(!this._inputs && (_symbols === this._symbols.length || (_symbols as []).length === this._symbols.length)) {\n            this._symbols = _symbols ? BinaryUtil.getBitsSymbols(_symbols) : null;\n        }\n    }\n    get symbols(): Array {\n        return this._symbols;\n    }\n\n    set inputs(_inputs: SystemInputType) {\n        _inputs = _inputs ? BinaryUtil.getStandardInputs(_inputs) : null;\n        if(!this._symbols || _inputs?.[0]?.length === this._symbols.length) {\n            this._inputs = _inputs;\n        }\n    }\n    get inputs(): ArrayOfArray {\n        return this._inputs;\n    }\n\n    set fnOs(_fnOs: FnInputType) {\n        _fnOs = _fnOs ? BinaryUtil.getFnList(_fnOs) : [];\n        this._fnOs = _fnOs.filter((f: number) => Math.pow(2, Math.pow(2, this._symbols.length)) > f);\n    }\n    get fnOs(): Array {\n        return this._fnOs;\n    }\n\n    getMagicBox() {\n        const obj = {};\n        const maxCombinations = Math.pow(2, this._symbols.length);\n        const maxFns = Math.pow(2, maxCombinations);\n        const inputsIndexList = ((inp) => inp.map((e) => parseInt(e.join(\"\"), 2)))(this._inputs);\n        const getBinaryOutputSequence = (k: number,l: number) => {\n            const t = BinaryUtil.decimalToBitArray(k);\n            t.unshift(...Array(l-t.length).fill(0));\n            return t;\n        }\n        const calculate = (k: number) => {\n            const outputSeq = getBinaryOutputSequence(k, maxCombinations);\n        }\n    }\n}\n\nclass BinaryUtil {\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BinaryUtil.html":{"url":"classes/BinaryUtil.html","title":"class - BinaryUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BinaryUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/BinarySystem.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                binaryToBitArray\n                            \n                            \n                                    Static\n                                decimalToBitArray\n                            \n                            \n                                    Static\n                                getBitsSymbols\n                            \n                            \n                                    Static\n                                isArrayOfArray\n                            \n                            \n                                    Static\n                                isBinary\n                            \n                            \n                                    Static\n                                maxStandardInputsArray\n                            \n                            \n                                    Static\n                                minStandardInputsArray\n                            \n                            \n                                    Static\n                                sanitizeTwoDArray\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getFnList\n                            \n                            \n                                    Static\n                                getStandardInputs\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        binaryToBitArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalToBitArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getBitsSymbols\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isArrayOfArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isBinary\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        maxStandardInputsArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        minStandardInputsArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        sanitizeTwoDArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/BinarySystem.ts:85\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getFnList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFnList(fnO: FnInputType)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/BinarySystem.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fnO\n                                    \n                                                FnInputType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getStandardInputs\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/BinarySystem.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputs\n                                    \n                                                SystemInputType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isMinimalSystem\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        type ArrayOfArray = Array>;\n\n// type ArgsType = 'inputs' | 'fnOs';\ntype SystemInputType = ArrayOfArray | Array | number | string;\ntype FnInputType = Array | number | string;\ninterface SystemOutput {\n    ioMap: {[key: string]: number},\n    outputSeq: Array,\n    outputString: string,\n    expression: string,\n    fn: string,\n}\n\nclass BinarySystem {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxOutputCombinations: ArrayOfArray;\n    private _symbols: Array;\n    private _inputs: ArrayOfArray;\n    private _fnOs: Array;\n    private _output: SystemOutput;\n    constructor();\n    constructor(bits: Array | number);\n    constructor(bits: Array | number, inputs: SystemInputType);\n    constructor(bits: Array | number, inputs: SystemInputType, fnO: FnInputType);\n    constructor(_bits?: Array | number, _inputs?: SystemInputType, _fnO?: FnInputType) {\n        this._symbols = _bits ? BinaryUtil.getBitsSymbols(_bits) : null;\n        this.bits = this._symbols.length;\n        this._inputs = _inputs ? BinaryUtil.getStandardInputs(_inputs) : null;\n        this._fnOs = _fnO ? BinaryUtil.getFnList(_fnO) : [];\n    }\n\n    set symbols(_symbols: Array | number) {\n        if(!this._inputs && (_symbols === this._symbols.length || (_symbols as []).length === this._symbols.length)) {\n            this._symbols = _symbols ? BinaryUtil.getBitsSymbols(_symbols) : null;\n        }\n    }\n    get symbols(): Array {\n        return this._symbols;\n    }\n\n    set inputs(_inputs: SystemInputType) {\n        _inputs = _inputs ? BinaryUtil.getStandardInputs(_inputs) : null;\n        if(!this._symbols || _inputs?.[0]?.length === this._symbols.length) {\n            this._inputs = _inputs;\n        }\n    }\n    get inputs(): ArrayOfArray {\n        return this._inputs;\n    }\n\n    set fnOs(_fnOs: FnInputType) {\n        _fnOs = _fnOs ? BinaryUtil.getFnList(_fnOs) : [];\n        this._fnOs = _fnOs.filter((f: number) => Math.pow(2, Math.pow(2, this._symbols.length)) > f);\n    }\n    get fnOs(): Array {\n        return this._fnOs;\n    }\n\n    getMagicBox() {\n        const obj = {};\n        const maxCombinations = Math.pow(2, this._symbols.length);\n        const maxFns = Math.pow(2, maxCombinations);\n        const inputsIndexList = ((inp) => inp.map((e) => parseInt(e.join(\"\"), 2)))(this._inputs);\n        const getBinaryOutputSequence = (k: number,l: number) => {\n            const t = BinaryUtil.decimalToBitArray(k);\n            t.unshift(...Array(l-t.length).fill(0));\n            return t;\n        }\n        const calculate = (k: number) => {\n            const outputSeq = getBinaryOutputSequence(k, maxCombinations);\n        }\n    }\n}\n\nclass BinaryUtil {\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BooleanMagicBox.html":{"url":"classes/BooleanMagicBox.html","title":"class - BooleanMagicBox","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BooleanMagicBox\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/AIBinarySystem.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _output\n                            \n                            \n                                    Private\n                                systemOutput\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                reset\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    output\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(systemInputs: AIBInput)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/AIBinarySystem.ts:86\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        systemInputs\n                                                  \n                                                        \n                                                                        AIBInput\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _output\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        systemOutput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AIBOutput\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/AIBinarySystem.ts:85\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/AIBinarySystem.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        output\n                    \n                \n\n                \n                    \n                        getoutput()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/AIBinarySystem.ts:110\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { solve } from './k-map-solver';\n\nclass AIBInput {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxNumberOfOutputs: number;\n    public symbols: Array;\n\n    public inputs: ArrayOfArray;\n    public outputFnsList: Array;\n\n    constructor(bits: number);\n    constructor(symbols: Array);\n    constructor(_input1: Array | number) {\n        if(typeof _input1 === 'number') {\n            this.bits = _input1;\n            this.symbols = BinUtil.getSymbolsList(this.bits);\n        } else {\n            this.bits = _input1.length;\n        }\n        this.maxInputCombinations = BinUtil.getMaximumInputCombinations(this.bits);\n        this.maxNumberOfOutputs = Math.pow(1, Math.pow(2, this.bits));\n    }\n    public setInputs(_inputs: SystemInputType): void {\n        this.inputs = BinUtil.getStandardInputs(_inputs);\n    }\n    public setOutputFnsList(_outputFnsList: FnInputType): void {\n        this.outputFnsList = BinUtil.getFnList(_outputFnsList);\n    }\n}\n\nclass AIBOutput {\n    public ioMap: any;\n    public outputSeq: Array;\n    public outputString: string;\n    public expression: string;\n    public fn: string;\n\n    constructor(private systemInputs: AIBInput) {}\n\n    private getBinaryOutputSequence = (n: number, maxInputCombinations: number) => {\n        const bitSeq = BinUtil.decimalToBitArray(n);\n        bitSeq.unshift(maxInputCombinations - bitSeq.length);\n        return bitSeq;\n    }\n    calculate = (fnNo: number): void => {\n        this.outputSeq = this.getBinaryOutputSequence(fnNo, this.systemInputs.maxInputCombinations.length);\n\n        \n        this.ioMap = this.outputSeq.map((_, idx) => this.getBinaryOutputSequence(idx, this.systemInputs.bits).reduce((a, v, index) => ({ ...a, [this.systemInputs.symbols[index]]: v, ['f' + fnNo]: this.outputSeq[idx], Y: this.outputSeq[idx] }), {}));\n        \n        this.outputString = this.outputSeq.join(\"\");\n        \n        const minterm = this.outputSeq.map((value, index) => value ? index : null).filter(v => (v !== null));\n        this.expression = (this.systemInputs.bits > 1 && this.systemInputs.bits  -1) ? solve(this.systemInputs.symbols, minterm).expression : '0') : null;\n        \n        this.fn = 'f' + fnNo;\n    }\n    reset(): void {\n        this.ioMap = null;\n        this.outputSeq = [];\n        this.outputString = null;\n        this.expression = null;\n        this.fn = null;\n    }\n    get = (): AIBOutput => {\n        return {\n            ioMap: this.ioMap,\n            outputSeq: this.outputSeq,\n            outputString: this.outputString,\n            expression: this.expression,\n            fn: this.fn,\n        } as AIBOutput;\n    }\n}\n\nclass BooleanMagicBox {\n    private systemOutput: AIBOutput;\n    private _output: {[key: string]: AIBOutput};\n    constructor(private systemInputs: AIBInput) {\n        this._output = {};\n    }\n    create(): void {\n        this.reset();\n        if(this.systemInputs.outputFnsList?.length > 0) {\n            for(let i of this.systemInputs.outputFnsList) {\n                this.systemOutput = new AIBOutput(this.systemInputs);\n                this.systemOutput.calculate(i);\n                this._output['f' + i] = this.systemOutput.get();\n            }\n        } else {\n            const noOfOutputs = this.systemInputs.bits > 4 ? 1000 : this.systemInputs.maxNumberOfOutputs;\n            for( let i = 0; i  {\n        let dd = Array(Math.pow(2,t)).fill([]).map((_,i) => Number(i).toString(2).split(\"\")).map(e => e.map(t => Number(t)));\n        dd.forEach(e => e.unshift(...Array(t - e.length).fill(0)));\n        return dd;\n    };\n    public static getSymbolsList = (bits: number) => Array.isArray(bits) ? bits : Array(bits).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CanvasComponent.html":{"url":"components/CanvasComponent.html","title":"component - CanvasComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CanvasComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/canvas/canvas.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-canvas\n            \n\n            \n                styleUrls\n                ./canvas.component.css\n            \n\n\n\n            \n                templateUrl\n                ./canvas.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getStage\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(vcref: ViewContainerRef, cfr: ComponentFactoryResolver)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/canvas/canvas.component.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        vcref\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cfr\n                                                  \n                                                        \n                                                                        ComponentFactoryResolver\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/canvas/canvas.component.ts:12\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/canvas/canvas.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getStage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStage(canvasConfig?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/canvas/canvas.component.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvasConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/canvas/canvas.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stage\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/canvas/canvas.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ComponentFactoryResolver, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { Stage } from 'createjs-module';\n\n@Component({\n  selector: 'app-canvas',\n  templateUrl: './canvas.component.html',\n  styleUrls: ['./canvas.component.css']\n})\nexport class CanvasComponent implements OnInit {\n\n  @Input('width') width: number;\n  @Input('height') height: number;\n  private stage: Stage;\n  constructor(\n    private vcref: ViewContainerRef,\n    private cfr: ComponentFactoryResolver\n  ) { }\n\n  ngOnInit(): void {\n    this.vcref.clear();\n    import('../clock/clock.component').then((cmp: any) => {\n      const cmpName = Object.keys(cmp)[0];\n      this.vcref.createComponent(\n        this.cfr.resolveComponentFactory(cmp[cmpName])\n      );\n    })\n  }\n\n  private getStage(canvasConfig?: any) {\n    const stage: any = new Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./canvas.component.css\n                \n                .canvas-container {\n    display: flex;\n    justify-content: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CanvasComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clock.html":{"url":"classes/Clock.html","title":"class - Clock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/clock/clock.shape.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            IAnimateShape\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                container\n                            \n                            \n                                hands\n                            \n                            \n                                    Private\n                                name\n                            \n                            \n                                position\n                            \n                            \n                                    Private\n                                radius\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                animate\n                            \n                            \n                                    Private\n                                create\n                            \n                            \n                                    Private\n                                createClock\n                            \n                            \n                                    Private\n                                getAshokChakra\n                            \n                            \n                                    Private\n                                getChakra\n                            \n                            \n                                    Private\n                                getClockTextPards\n                            \n                            \n                                    Private\n                                getClockTexts\n                            \n                            \n                                    Private\n                                getCurrentTimeRotations\n                            \n                            \n                                    Private\n                                getDynamicComponentContainer\n                            \n                            \n                                    Private\n                                getHands\n                            \n                            \n                                    Private\n                                getStaticComponentContainer\n                            \n                            \n                                    Private\n                                setCurrentTime\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_radius: number, _position: IPoint, _name: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/clock/clock.shape.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _radius\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _position\n                                                  \n                                                        \n                                                                        IPoint\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        container\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Container\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.shape.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hands\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.shape.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.shape.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IPoint\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.shape.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        radius\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.shape.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        animate\n                        \n                    \n                \n            \n            \n                \n                    \n                    animate(frameRate: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    frameRate\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createClock\n                        \n                    \n                \n            \n            \n                \n                    \n                    createClock()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Container\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getAshokChakra\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAshokChakra(noOfParts: number, radius?: number, origin?: IPoint)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    noOfParts\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    origin\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getChakra\n                        \n                    \n                \n            \n            \n                \n                    \n                    getChakra(center: IPoint, radius: number, noOfParts: number, graphicsColors: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    center\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    noOfParts\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    graphicsColors\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getClockTextPards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClockTextPards(x: number, y: number, radius: number, fontSize: number, count: number, textColor?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fontSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getClockTexts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClockTexts(x: number, y: number, radius: number, fontSize: number, count: number, textColor?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fontSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getCurrentTimeRotations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentTimeRotations()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { hour: number; minute: number; second: number; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getDynamicComponentContainer\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDynamicComponentContainer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getHands\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHands(origin: IPoint, radius: number, noOfHands: number, strokeStyle?: IStrokeStyle, graphicsColors?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    noOfHands\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    strokeStyle\n                                    \n                                                IStrokeStyle\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    graphicsColors\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getStaticComponentContainer\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStaticComponentContainer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Container\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        setCurrentTime\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentTime()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.shape.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Container, Shape } from \"createjs-module\";\nimport { IAnimateShape } from \"src/app/interfaces/shape-object-interfaces\";\nimport { CreateJS_Shapes, IPoint, IStrokeStyle } from \"../../classes/create-js-shapes\";\n\nexport interface IClock {\n    container: Container;\n    radius: number;\n    position: IPoint\n}\n\nexport class Clock implements IAnimateShape {\n    container: Container;\n    // private clockObj: any;\n    private name: string;\n    hands: { [key: string]: Container | Shape };\n    private radius: number;\n\n    position: IPoint;\n\n    constructor(_radius: number, _position: IPoint, _name: string) {\n        this.name = _name;\n        this.position = _position;\n        this.radius = _radius;\n        this.create();\n        // this.clockObj = _clockObj;\n    }\n\n    public animate(frameRate: number): void {\n        this.hands['secondHand'].rotation += 6/frameRate;\n        this.hands['minuteHand'].rotation += 0.1/frameRate;\n        this.hands['hourHand'].rotation += 0.5/(60 * frameRate);\n        // this.container.rotation++;\n    }\n\n    private create() {\n        this.container = new Container();\n        this.container = this.createClock();\n    }\n\n    private createClock(): Container {\n        const container = new Container();\n        const staticContainer = this.getStaticComponentContainer();\n        container.addChild(staticContainer);\n        this.hands = this.getDynamicComponentContainer();\n        this.setCurrentTime();\n        container.addChild(this.hands['secondHand']);\n        container.addChild(this.hands['minuteHand']);\n        container.addChild(this.hands['hourHand']);\n        container.name = this.name;\n        return container;\n    }\n\n    private getStaticComponentContainer(): Container {\n        const x = this.position?.x ?? window.innerHeight;\n        const y = this.position?.y ?? window.innerHeight / 2;\n        const radius = this.radius ?? 200;\n        const graphicsColors = {\n            fillColor: '#FFF',\n            strokeColor: '#000099'\n        };\n        const noOfParts = 12;\n        const circle = CreateJS_Shapes.getCircle(x, y, radius, { width: radius / 30 }, graphicsColors);\n        const center = CreateJS_Shapes.getCircle(x, y, (radius / 30), { width: radius / 30 }, { fillColor: graphicsColors.strokeColor, strokeColor: graphicsColors.strokeColor });\n        const ashokChakra = this.getAshokChakra(24, radius / 10, { x: x / 1, y: y });\n        const chakra = this.getChakra({ x, y }, radius / 2, 4 * noOfParts, graphicsColors);\n        const fontSize = radius / 6;\n        const text = this.getClockTexts(x, y, radius, fontSize, 1 * noOfParts, graphicsColors.strokeColor);\n\n        const container = new Container();\n        container.addChild(circle);\n        // container.addChild(chakra);\n        // container.addChild(ashokChakra);\n        for (let i = 0; i  = [];\n        const fontSize = radius / 6;\n        for (let i = 1; i  count) {\n                number = 1;\n            }\n            fontSizeX = number.toString().length * fontSize;\n            texts.push(CreateJS_Shapes.getText(number, { x: x - (fontSizeX / 4) - (radius - fontSizeX / 2.8) * Math.cos(i * fullAngle / count), y: y - (fontSizeY / 2.3) - (radius - fontSizeY / 2.1) * Math.sin(i * fullAngle / count) }, fontSize + 'px Cambria', textColor));\n        }\n        return texts;\n    }\n\n    private getHands(origin: IPoint, radius: number, noOfHands: number, strokeStyle?: IStrokeStyle, graphicsColors?: any) {\n        const fullAngle = 2 * Math.PI;\n        const hands = [];\n        for (let i = 1; i  12 ? hour - 12 : hour;\n        const minute = currentTime.getMinutes();\n        const second = currentTime.getSeconds();\n        let secondAngle = second * 6;\n        let minuteAngle = (minute * 6) + (second / 10);\n        let hourAngle = (hour * 30) + (minute / 2) + (second / 120);\n        return { hour: hourAngle, minute: minuteAngle, second: secondAngle };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ClockComponent.html":{"url":"components/ClockComponent.html","title":"component - ClockComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ClockComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/clock/clock.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-clock\n            \n\n            \n                styleUrls\n                ./clock.component.css\n            \n\n\n\n            \n                templateUrl\n                ./clock.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                container\n                            \n                            \n                                frameRate\n                            \n                            \n                                    Private\n                                links\n                            \n                            \n                                    Private\n                                objectsList\n                            \n                            \n                                stage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                animateClock\n                            \n                            \n                                    Private\n                                createLinks\n                            \n                            \n                                    Private\n                                getStage\n                            \n                            \n                                getXYSpeed\n                            \n                            \n                                    Private\n                                main\n                            \n                            \n                                    Private\n                                moveObjects\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                onTick\n                            \n                            \n                                    Private\n                                updateLinks\n                            \n                            \n                                    Private\n                                updateStage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/clock/clock.component.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        animateClock\n                        \n                    \n                \n            \n            \n                \n                    \n                    animateClock()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createLinks\n                        \n                    \n                \n            \n            \n                \n                    \n                    createLinks()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getStage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStage(canvasConfig?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvasConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getXYSpeed\n                        \n                    \n                \n            \n            \n                \ngetXYSpeed(direction: number, speed: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    direction\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    speed\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         IPoint\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        main\n                        \n                    \n                \n            \n            \n                \n                    \n                    main()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        moveObjects\n                        \n                    \n                \n            \n            \n                \n                    \n                    moveObjects()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onTick\n                        \n                    \n                \n            \n            \n                \n                    \n                    onTick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateLinks\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateLinks()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        updateStage\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStage(shape: Shape | Text | Container)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/clock/clock.component.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    shape\n                                    \n                                            Shape | Text | Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        container\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Container\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frameRate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        links\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        objectsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stage\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/clock/clock.component.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { Container, Shape, Stage, Text, Ticker } from 'createjs-module';\nimport { IPoint } from '../../classes/create-js-shapes';\nimport { Clock } from './clock.shape';\n\n@Component({\n  selector: 'app-clock',\n  templateUrl: './clock.component.html',\n  styleUrls: ['./clock.component.css']\n})\nexport class ClockComponent implements OnInit {\n\n  stage: Stage;\n  container: Container;\n\n  private objectsList: any;\n  private links: any = [];\n  frameRate: number;\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    this.container = new Container();\n    // Ticker.interval = 1000;\n    this.frameRate = 100;\n    Ticker.setFPS(this.frameRate);\n    this.main();\n    Ticker.on('tick', this.onTick.bind(this));\n  }\n\n  private main() {\n    this.objectsList = {\n      // obj0: {\n      //   position: {\n      //     x: window.innerWidth / 2,\n      //     y: window.innerHeight / 2\n      //   },\n      //   radius: 90,\n      //   speed: 1.5,\n      //   direction: 30,\n      //   rotation: 1\n      // },\n      // obj1: {\n      //   position: {\n      //     x: 10,\n      //     y: 20\n      //   },\n      //   radius: 50,\n      //   speed: 1,\n      //   direction: 20,\n      //   rotation: 1\n      // },\n      // obj2: {\n      //   position: {\n      //     x: 100,\n      //     y: 0,\n      //   },\n      //   radius: 70,\n      //   speed: 2,\n      //   direction: 40,\n      //   rotation: 1\n      // },\n      // obj3: {\n      //   position: {\n      //     x: 10,\n      //     y: 100,\n      //   },\n      //   radius: 30,\n      //   speed: 3,\n      //   direction: 15,\n      //   rotation: 1\n      // },\n      obj4: {\n        position: {\n          x: 200,\n          y: 200,\n        },\n        radius: 100,\n        speed: 500,\n        direction: 60,\n        rotation: 10\n      }\n    };\n    Object.keys(this.objectsList).forEach((c: any) => {\n      this.objectsList[c].isX_inc = true;\n      this.objectsList[c].isY_inc = true;\n      if(this.objectsList[c].position.x  {\n      const clock = new Clock(this.objectsList[e].radius, this.objectsList[e].position, e);\n      this.container.addChild(clock.container);\n      this.objectsList[e].shape = clock;\n    });\n    this.links = this.createLinks();\n    this.stage.addChild(this.container);\n  }\n\n  private createLinks() {\n    let uniqLinks = [];\n    const links: any = [];\n    for (let n1 in this.objectsList) {\n      for (let n2 in this.objectsList) {\n        if (n1 !== n2 && uniqLinks.findIndex(l => (l.indexOf(n1) > -1 && l.indexOf(n2) > -1))  {\n      return Math.sqrt(Math.pow((p2.x - p1.x), 2) + Math.pow((p2.y - p1.y), 2));\n    }\n    for(let link of this.links) {\n      link.distance = getDistance(this.objectsList[link.nodes[0]].position, this.objectsList[link.nodes[1]].position);\n    }\n  }\n\n  private onTick() {\n    this.moveObjects();\n    this.stage.update();\n  }\n\n  private moveObjects() {\n    let left = 0, right = 0, top = 0, bottom = 0, index = -1, speed = null, container = null, linksOfNode = null, shapeObject = null, direction = 0;\n    this.updateLinks();\n    Object.keys(this.objectsList).forEach((name: string) => {\n      shapeObject = this.objectsList[name];\n      linksOfNode = this.links.filter((link: any) => link.nodes.indexOf(name) > -1);\n      index = this.container.children.findIndex(c => c.name === name);\n      container = this.container.children[index];\n      left = shapeObject.radius;\n      right = window.innerWidth - shapeObject.radius;\n      top = shapeObject.radius;\n      bottom = window.innerHeight - shapeObject.radius;\n      // direction = shapeObject.direction;\n      shapeObject.shape.animate(this.frameRate);\n      speed = this.getXYSpeed(shapeObject.direction, shapeObject.speed);\n\n      container.x += speed.x;\n      shapeObject.position.x += speed.x;\n      container.y += speed.y;\n      shapeObject.position.y += speed.y;\n\n      if(shapeObject.position.x = right) {\n        shapeObject.direction = 180 - shapeObject.direction;\n      }\n      if(shapeObject.position.y = bottom) {\n        shapeObject.direction = 360 - shapeObject.direction;\n      }\n      // shapeObject.direction = shapeObject.direction > 360 ? shapeObject.direction - 360 : shapeObject.direction;\n      shapeObject.direction = shapeObject.direction  {\n      Array.from({ length: data }).forEach((e: any, i: number) => {\n        setTimeout(() => {\n          // this.drawObject();\n        }, i * 1000, i);\n      });\n    });\n  }\n\n  private getStage(canvasConfig?: any) {\n    const stage: any = new Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  private updateStage(shape: Shape | Text | Container) {\n    this.stage.addChild(shape);\n    (this.stage.canvas as any).width = window.innerWidth;\n    (this.stage.canvas as any).height = window.innerHeight;\n    this.stage.update();\n  }\n}\n    \n\n    \n        \n    \n\n    \n\n    \n                \n                    ./clock.component.css\n                \n                .canvas-container {\n    display: flex;\n    justify-content: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ClockComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateJS_Shapes.html":{"url":"classes/CreateJS_Shapes.html","title":"class - CreateJS_Shapes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateJS_Shapes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/create-js-shapes.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCircle\n                            \n                            \n                                    Static\n                                getGraphics\n                            \n                            \n                                    Static\n                                getLine\n                            \n                            \n                                    Static\n                                getRect\n                            \n                            \n                                    Static\n                                getText\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getCircle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCircle(x: number, y: number, radius: number, strokeStyle?: IStrokeStyle, graphicsColor?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/create-js-shapes.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    strokeStyle\n                                    \n                                                IStrokeStyle\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    graphicsColor\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Shape\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getGraphics\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/create-js-shapes.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fillColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    strokeColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    strokeStyle\n                                    \n                                                IStrokeStyle\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Graphics\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getLine\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/create-js-shapes.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    strokeStyle\n                                    \n                                                IStrokeStyle\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    graphicsColors\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Shape\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getRect\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRect(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/create-js-shapes.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getText\n                        \n                    \n                \n            \n            \n                \n                    \n                    getText(n: number, position: IPoint, font?: any, textColor?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/create-js-shapes.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    position\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    font\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    textColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Text\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Graphics, Shape, Text } from \"createjs-module\";\n\ninterface ICenter {\n    x: number;\n    y: number;\n}\nexport interface IStrokeStyle {\n    width: number;\n    caps?: 'round' | 'butt' | 'square';\n    joints?: 'round' | 'bevel' | 'miter';\n    miterLimit?: number\n}\nexport type IPoint = ICenter;\n\nexport class CreateJS_Shapes {\n    public static getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any): Shape {\n        const line = this.getGraphics(graphicsColors?.fillColor, graphicsColors?.strokeColor, strokeStyle).moveTo(from.x, from.y).lineTo(to.x, to.y);\n        const shape = new Shape(line);\n        return shape;\n    }\n\n    public static getCircle(x: number, y: number, radius: number, strokeStyle?: IStrokeStyle, graphicsColor?: any): Shape {\n        const graphics = this.getGraphics(graphicsColor?.fillColor, graphicsColor?.strokeColor, strokeStyle).drawCircle(x, y, radius);\n        const circle = new Shape(graphics);\n        return circle;\n    }\n\n    public static getRect(x: number, y: number, w: number, h: number) {\n        const graphics = this.getGraphics().drawRect(x, y, w, h);\n        const rect = new Shape(graphics);\n        return rect;\n    }\n\n    public static getText(n: number, position: IPoint, font?: any, textColor?: string): Text {\n        const text = new Text(n.toString(), font || '20px Arial', textColor || \"#000\");\n        text.x = position.x;\n        text.y = position.y;\n        return text;\n    }\n\n    public static getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle): Graphics {\n        const circleConfig = {\n            beginFill: fillColor || '#ddd',\n            beginStroke: strokeColor || '#000',\n        };\n        const graphics = new Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke).setStrokeStyle(strokeStyle?.width || 1, strokeStyle?.caps || 'round');\n        return graphics;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DemoComponent.html":{"url":"components/DemoComponent.html","title":"component - DemoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DemoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/demo/demo.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-demo\n            \n\n            \n                styleUrls\n                ./demo.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./demo.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                container\n                            \n                            \n                                line\n                            \n                            \n                                stage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getGraphics\n                            \n                            \n                                    Private\n                                getLine\n                            \n                            \n                                    Private\n                                getRect\n                            \n                            \n                                    Private\n                                getStage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                onTick\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/demo/demo.component.ts:13\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getGraphics\n                        \n                    \n                \n            \n            \n                \n                    \n                    getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/demo/demo.component.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fillColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    strokeColor\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    strokeStyle\n                                    \n                                                IStrokeStyle\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Graphics\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getLine\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/demo/demo.component.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    from\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                                IPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    strokeStyle\n                                    \n                                                IStrokeStyle\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    graphicsColors\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getRect\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRect(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/demo/demo.component.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getStage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStage(canvasConfig?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/demo/demo.component.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvasConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/demo/demo.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        onTick\n                        \n                    \n                \n            \n            \n                \n                    \n                    onTick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/demo/demo.component.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        container\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Container\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/demo/demo.component.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        line\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Shape\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/demo/demo.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stage\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/demo/demo.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Container, Graphics, Shape, Stage, Ticker } from 'createjs-module';\n\n@Component({\n  selector: 'app-demo',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.component.scss']\n})\nexport class DemoComponent implements OnInit {\n\n  stage: Stage;\n  container: Container;\n  line: Shape;\n  constructor() { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    const from = {x: 400, y: 400};\n    const to = {x: 300, y: 300};\n    // this.line = this.getRect(100, 100, 10, 100);\n    this.line = this.getLine(from, to);\n    this.container = new Container();\n    Ticker.setFPS(60);\n    this.stage.addChild(this.container.addChild(this.line));\n    Ticker.on('tick', this.onTick.bind(this));\n    this.stage.update();\n  }\n\n  private getStage(canvasConfig?: any) {\n    const stage: any = new Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  private onTick() {\n    this.line.rotation += 2;\n    this.stage.update();\n  }\n\n  private getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any) {\n    const line = this.getGraphics(graphicsColors?.fillColor, graphicsColors?.strokeColor, strokeStyle).moveTo(from.x, from.y).lineTo(to.x, to.y);\n    const shape = new Shape(line);\n    shape.regX = from.x;\n    shape.regY = from.y;\n    shape.x = 100;\n    shape.y = 100;\n    return shape;\n  }\n\n  private getRect(x: number, y: number, w: number, h: number) {\n    const graphics = this.getGraphics().drawRect(x, y, w, h);\n    const rect = new Shape(graphics);\n    rect.regX = x + w/2;\n    rect.regY = y;\n    rect.x = 100;\n    rect.y = 100;\n    return rect;\n  }\n\n  private getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle): Graphics {\n    const circleConfig = {\n      beginFill: fillColor || '#ddd',\n      beginStroke: strokeColor || '#000',\n    };\n    const graphics = new Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke).setStrokeStyle(strokeStyle?.width || 1, strokeStyle?.caps || 'round');\n    return graphics;\n  }\n\n}\n\ninterface ICenter {\n  x: number;\n  y: number;\n}\ninterface IStrokeStyle {\n  width: number;\n  caps?: 'round' | 'butt' | 'square';\n  joints?: 'round' | 'bevel' | 'miter';\n  miterLimit?: number\n}\ntype IPoint = ICenter;\n    \n\n    \n        \n    \n\n    \n\n    \n                \n                    ./demo.component.scss\n                \n                .canvas-container {\n    display: flex;\n    justify-content: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DemoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DrawAnimComponent.html":{"url":"components/DrawAnimComponent.html","title":"component - DrawAnimComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DrawAnimComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/draw-anim/draw-anim.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-draw-anim\n            \n\n            \n                styleUrls\n                ./draw-anim.component.css\n            \n\n\n\n            \n                templateUrl\n                ./draw-anim.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                container\n                            \n                            \n                                shapeObject\n                            \n                            \n                                stage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                animateClock\n                            \n                            \n                                createText\n                            \n                            \n                                drawObject\n                            \n                            \n                                getCircle\n                            \n                            \n                                getGraphics\n                            \n                            \n                                getObject\n                            \n                            \n                                getRect\n                            \n                            \n                                getStage\n                            \n                            \n                                getText\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onTick\n                            \n                            \n                                updateStage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(httpClient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/draw-anim/draw-anim.component.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpClient\n                                                  \n                                                        \n                                                                        HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        animateClock\n                        \n                    \n                \n            \n            \n                \nanimateClock()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createText\n                        \n                    \n                \n            \n            \n                \ncreateText()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        drawObject\n                        \n                    \n                \n            \n            \n                \ndrawObject(index: number, radius: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCircle\n                        \n                    \n                \n            \n            \n                \ngetCircle(x: number, y: number, radius: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     createjs.Shape\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGraphics\n                        \n                    \n                \n            \n            \n                \ngetGraphics()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     createjs.Graphics\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getObject\n                        \n                    \n                \n            \n            \n                \ngetObject(i: number, radius: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    radius\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     createjs.Container\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRect\n                        \n                    \n                \n            \n            \n                \ngetRect(x: number, y: number, w: number, h: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    y\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    w\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    h\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStage\n                        \n                    \n                \n            \n            \n                \ngetStage(canvasConfig?: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    canvasConfig\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getText\n                        \n                    \n                \n            \n            \n                \ngetText(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     createjs.Text\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTick\n                        \n                    \n                \n            \n            \n                \nonTick()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateStage\n                        \n                    \n                \n            \n            \n                \nupdateStage(shape: createjs.Shape | createjs.Text | createjs.Container)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/draw-anim/draw-anim.component.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    shape\n                                    \n                                            createjs.Shape | createjs.Text | createjs.Container\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        container\n                        \n                    \n                \n            \n                \n                    \n                        Type :     createjs.Container\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/draw-anim/draw-anim.component.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shapeObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    centroid: {\n      x: 0,\n      y: 0\n    }\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/components/draw-anim/draw-anim.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     createjs.Stage\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/draw-anim/draw-anim.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport * as createjs from 'createjs-module';\n\n@Component({\n  selector: 'app-draw-anim',\n  templateUrl: './draw-anim.component.html',\n  styleUrls: ['./draw-anim.component.css']\n})\nexport class DrawAnimComponent implements OnInit {\n  stage: createjs.Stage;\n  container: createjs.Container;\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    this.container = new createjs.Container();\n    this.animateClock();\n    // createjs.Ticker.setFPS(60);\n    // createjs.Ticker.addEventListener('tick', this.onTick.bind(this));\n  }\n\n  onTick() {\n    this.stage.update();\n  }\n\n  animateClock() {\n    const context = 'http://localhost:8080/';\n    const restName = 'api/3';\n    // this.httpClient.get(context + restName).subscribe((data: any) => {\n      Array.from({length: 2}).forEach((e: any, i: number) => {\n        setTimeout(() => {\n          this.drawObject(i, 30);\n        },i*1000, i);\n      });\n    // });\n  }\n\n  shapeObject = {\n    centroid: {\n      x: 0,\n      y: 0\n    }\n  }\n  \n  drawObject(index: number, radius: number) {\n    const draw = (i: number) => {\n      const rotation = 0;\n      const container = this.getObject(i, radius);\n      container.setTransform(radius, 0, 1, 1, rotation, 0, 0, 0, 0);\n      this.container.addChild(container);\n      this.updateStage(this.container);\n    }\n    if(!index && index !== 0) {\n      draw(0);\n    } else {\n      draw(index);\n    }\n  }\n\n  getStage(canvasConfig?: any) {\n    const stage: any = new createjs.Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  updateStage(shape: createjs.Shape | createjs.Text | createjs.Container) {\n    this.stage.addChild(shape);\n    (this.stage.canvas as any).width = window.innerWidth;\n    (this.stage.canvas as any).height = window.innerHeight;\n    this.stage.update();\n  }\n\n  getObject(i: number, radius: number): createjs.Container {\n    const circleCenter = {\n      x: 2*(i + 0.5)*radius,\n      y: 2*(i + 0.5)*radius\n    };\n    const circle1 = this.getCircle(circleCenter.x, circleCenter.y, radius);\n    const circle2 = this.getCircle(circleCenter.x, circleCenter.y, radius/40);\n    const rect2 = this.getRect((2*i)*radius,(2*i)*radius,radius,radius);\n    const rect1 = this.getRect((2*i + 1)*radius,(2*i + 1)*radius,radius,radius);\n    const container = new createjs.Container();\n    container.addChild(circle1);\n    container.addChild(circle2);\n    container.addChild(rect1);\n    container.addChild(rect2);\n    return container;\n  }\n\n  getCircle(x: number, y: number, radius: number): createjs.Shape {\n    const graphics = this.getGraphics().drawCircle(x, y, radius);\n    const circle = new createjs.Shape(graphics);\n    return circle;\n  }\n\n  getRect(x: number, y: number, w: number, h: number) {\n    const graphics = this.getGraphics().drawRect(x, y, w, h);\n    const rect = new createjs.Shape(graphics);\n    return rect;\n  }\n\n  createText() {\n    this.updateStage(this.getText(2));\n  }\n\n  getText(n: number): createjs.Text {\n    const text = new createjs.Text(n.toString(), '20px', \"#000\")\n    return text;\n  }\n  getGraphics(): createjs.Graphics {\n    const circleConfig = {\n      beginFill: '#ddd',\n      beginStroke: '#000',\n    };\n    const graphics = new createjs.Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke);\n    return graphics;\n  }\n}\n\ninterface IShapeObject {\n  centroid: ICenter;\n  rotation?: number;\n  scaleX?: number;\n  scaleY?: number\n}\n\ninterface ICenter {\n  x: number;\n  y: number;\n}\n    \n\n    \n        \n    \n\n    \n\n    \n                \n                    ./draw-anim.component.css\n                \n                .canvas-container {\n    display: flex;\n    justify-content: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DrawAnimComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DynamicDataSource.html":{"url":"injectables/DynamicDataSource.html","title":"injectable - DynamicDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DynamicDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dataChange\n                            \n                            \n                                    Private\n                                treeDataSource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleTreeControl\n                            \n                            \n                                toggleNode\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    DataSource\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_treeControl: FlatTreeControl, _database: DynamicDatabase)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _treeControl\n                                                  \n                                                        \n                                                                        FlatTreeControl\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        _database\n                                                  \n                                                        \n                                                                        DynamicDatabase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleTreeControl\n                        \n                    \n                \n            \n            \n                \nhandleTreeControl(change: SelectionChange)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    change\n                                    \n                                                SelectionChange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleNode\n                        \n                    \n                \n            \n            \n                \ntoggleNode(node: DynamicFlatNode, expand: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DynamicFlatNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expand\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dataChange\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/classes.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        treeDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TreeDataSource\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes.ts:29\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes.ts:31\n                                \n                            \n\n                \n                    \n                        setdata(value: Array)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes.ts:35\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            value\n                                                    \n                                                            \n                                                                            Array\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        DataSource\n                    \n                \n\n                \n                    \n                        getDataSource()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes.ts:40\n                                \n                            \n\n                \n                    \n                        setDataSource(_treeDataSource)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes.ts:43\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            _treeDataSource\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { CollectionViewer, DataSource, SelectionChange } from \"@angular/cdk/collections\";\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, map, merge, Observable } from \"rxjs\";\nimport { DynamicDatabase } from \"./dynamic-database.service\";\n\n// export class DynamicFlatNode {\n//     constructor(public item: string, public level = 1, public expandable = false,\n//         public isLoading = false) { }\n// }\n\nexport interface DynamicFlatNode {\n    item: string;\n    level: number;\n    expandable: boolean;\n    isLoading?: boolean;\n}\n\nexport class TreeDataSource implements DataSource {\n    data: Array;\n    dataChange: BehaviorSubject>;\n    connect: (collectionVCiewer: CollectionViewer) => Observable>;\n    disconnect: (collectionViewer: CollectionViewer) =>  void;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class DynamicDataSource {\n\n    private treeDataSource: TreeDataSource;\n    dataChange = new BehaviorSubject([]);\n    get data(): Array {\n        return this.dataChange.value;\n    }\n\n    set data(value: Array) {\n        this._treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n    \n    get DataSource(): TreeDataSource {\n        return this.treeDataSource;\n    }\n    set DataSource(_treeDataSource) {\n        this._treeControl.dataNodes = _treeDataSource.data;\n        this.dataChange.next(_treeDataSource.data);\n        if(!_treeDataSource) {\n            this.treeDataSource = {\n                data: this.dataChange.value,\n                dataChange: new BehaviorSubject>([]),\n                connect: (collectionViewer: CollectionViewer) => {\n                    this._treeControl.expansionModel.changed.subscribe((change) => {\n                        if ((change as SelectionChange).added || (change as SelectionChange).removed) {\n                            this.handleTreeControl(change as SelectionChange);\n                        }\n                    });\n                    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n                },\n                disconnect: (collectionViewer: CollectionViewer) => {\n                    console.log(collectionViewer);\n                }\n            }\n        } else {\n            this.treeDataSource = _treeDataSource;\n        }\n    }\n\n    constructor(private _treeControl: FlatTreeControl, private _database: DynamicDatabase) { }\n    // connect(collectionViewer: CollectionViewer): Observable {\n    //     this._treeControl.expansionModel.changed.subscribe((change) => {\n    //         if ((change as SelectionChange).added || (change as SelectionChange).removed) {\n    //             this.handleTreeControl(change as SelectionChange);\n    //         }\n    //     });\n    //     return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    // }\n    // disconnect(collectionViewer: CollectionViewer): void {\n    //     console.log(collectionViewer);\n    // }\n    handleTreeControl(change: SelectionChange) {\n        if (change.added) {\n            change.added.forEach(node => this.toggleNode(node, true));\n        }\n        if (change.removed) {\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n        }\n    }\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\n        const children = this._database.getChildren(node.item);\n        const index = this.data.indexOf(node);\n        if (!children || index  {\n            if (expand) {\n                const nodes = children.map(name => {\n                    const obj:  DynamicFlatNode = {\n                        item: name,\n                        level: node.level + 1,\n                        expandable: this._database.isExpandable(name)\n                    }\n                    return obj;\n                });\n                // const nodes = children.map(name => new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\n                this.data.splice(index + 1, 0, ...nodes);\n            } else {\n                let count = 0;\n                for (let i = index + 1; i  node.level; i++, count++) { }\n                this.data.splice(index + 1, count);\n            }\n            this.dataChange.next(this.data);\n            node.isLoading = false;\n        }, 1000);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DynamicDatabase.html":{"url":"injectables/DynamicDatabase.html","title":"injectable - DynamicDatabase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DynamicDatabase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dynamic-database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dataMap\n                            \n                            \n                                rootLevelNodes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getChildren\n                            \n                            \n                                initialData\n                            \n                            \n                                isExpandable\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getChildren\n                        \n                    \n                \n            \n            \n                \ngetChildren(node: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dynamic-database.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initialData\n                        \n                    \n                \n            \n            \n                \ninitialData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/dynamic-database.service.ts:16\n                \n            \n\n\n            \n                \n                    Initial data from database\n\n\n                    \n                        Returns :         DynamicFlatNode[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpandable\n                        \n                    \n                \n            \n            \n                \nisExpandable(node: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/dynamic-database.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dataMap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']]\n  ])\n                    \n                \n                    \n                        \n                                Defined in src/app/dynamic-database.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rootLevelNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : ['Fruits', 'Vegetables']\n                    \n                \n                    \n                        \n                                Defined in src/app/dynamic-database.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { DynamicFlatNode } from \"./classes\";\n\n@Injectable({providedIn: 'root'})\nexport class DynamicDatabase {\n  dataMap = new Map([\n    ['Fruits', ['Apple', 'Orange', 'Banana']],\n    ['Vegetables', ['Tomato', 'Potato', 'Onion']],\n    ['Apple', ['Fuji', 'Macintosh']],\n    ['Onion', ['Yellow', 'White', 'Purple']]\n  ]);\n\n  rootLevelNodes: string[] = ['Fruits', 'Vegetables'];\n\n  /** Initial data from database */\n  initialData(): DynamicFlatNode[] {\n    return this.rootLevelNodes.map(name => {\n      const obj: DynamicFlatNode = {\n        item: name,\n        level: 0,\n        expandable: true\n      }\n      return obj;\n    });\n  }\n\n  getChildren(node: string): string[] | undefined {\n    return this.dataMap.get(node);\n  }\n\n  isExpandable(node: string): boolean {\n    return this.dataMap.has(node);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicFlatNode.html":{"url":"interfaces/DynamicFlatNode.html","title":"interface - DynamicFlatNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicFlatNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expandable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isLoading\n                                        \n                                \n                                \n                                        \n                                            item\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expandable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expandable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CollectionViewer, DataSource, SelectionChange } from \"@angular/cdk/collections\";\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, map, merge, Observable } from \"rxjs\";\nimport { DynamicDatabase } from \"./dynamic-database.service\";\n\n// export class DynamicFlatNode {\n//     constructor(public item: string, public level = 1, public expandable = false,\n//         public isLoading = false) { }\n// }\n\nexport interface DynamicFlatNode {\n    item: string;\n    level: number;\n    expandable: boolean;\n    isLoading?: boolean;\n}\n\nexport class TreeDataSource implements DataSource {\n    data: Array;\n    dataChange: BehaviorSubject>;\n    connect: (collectionVCiewer: CollectionViewer) => Observable>;\n    disconnect: (collectionViewer: CollectionViewer) =>  void;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class DynamicDataSource {\n\n    private treeDataSource: TreeDataSource;\n    dataChange = new BehaviorSubject([]);\n    get data(): Array {\n        return this.dataChange.value;\n    }\n\n    set data(value: Array) {\n        this._treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n    \n    get DataSource(): TreeDataSource {\n        return this.treeDataSource;\n    }\n    set DataSource(_treeDataSource) {\n        this._treeControl.dataNodes = _treeDataSource.data;\n        this.dataChange.next(_treeDataSource.data);\n        if(!_treeDataSource) {\n            this.treeDataSource = {\n                data: this.dataChange.value,\n                dataChange: new BehaviorSubject>([]),\n                connect: (collectionViewer: CollectionViewer) => {\n                    this._treeControl.expansionModel.changed.subscribe((change) => {\n                        if ((change as SelectionChange).added || (change as SelectionChange).removed) {\n                            this.handleTreeControl(change as SelectionChange);\n                        }\n                    });\n                    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n                },\n                disconnect: (collectionViewer: CollectionViewer) => {\n                    console.log(collectionViewer);\n                }\n            }\n        } else {\n            this.treeDataSource = _treeDataSource;\n        }\n    }\n\n    constructor(private _treeControl: FlatTreeControl, private _database: DynamicDatabase) { }\n    // connect(collectionViewer: CollectionViewer): Observable {\n    //     this._treeControl.expansionModel.changed.subscribe((change) => {\n    //         if ((change as SelectionChange).added || (change as SelectionChange).removed) {\n    //             this.handleTreeControl(change as SelectionChange);\n    //         }\n    //     });\n    //     return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    // }\n    // disconnect(collectionViewer: CollectionViewer): void {\n    //     console.log(collectionViewer);\n    // }\n    handleTreeControl(change: SelectionChange) {\n        if (change.added) {\n            change.added.forEach(node => this.toggleNode(node, true));\n        }\n        if (change.removed) {\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n        }\n    }\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\n        const children = this._database.getChildren(node.item);\n        const index = this.data.indexOf(node);\n        if (!children || index  {\n            if (expand) {\n                const nodes = children.map(name => {\n                    const obj:  DynamicFlatNode = {\n                        item: name,\n                        level: node.level + 1,\n                        expandable: this._database.isExpandable(name)\n                    }\n                    return obj;\n                });\n                // const nodes = children.map(name => new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\n                this.data.splice(index + 1, 0, ...nodes);\n            } else {\n                let count = 0;\n                for (let i = index + 1; i  node.level; i++, count++) { }\n                this.data.splice(index + 1, count);\n            }\n            this.dataChange.next(this.data);\n            node.isLoading = false;\n        }, 1000);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DynamicLoaderService.html":{"url":"injectables/DynamicLoaderService.html","title":"injectable - DynamicLoaderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DynamicLoaderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dynamic-loader/dynamic-loader.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dynamic-loader/dynamic-loader.service.ts:6\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DynamicLoaderService {\n\n  constructor() { }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FinnhubApiService.html":{"url":"injectables/FinnhubApiService.html","title":"injectable - FinnhubApiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FinnhubApiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/stocks/service/finnhub-api/finnhub-api.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _api_key\n                            \n                            \n                                    Private\n                                finnhubClient\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/stocks/service/finnhub-api/finnhub-api.service.ts:10\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _api_key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/stocks/service/finnhub-api/finnhub-api.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        finnhubClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/stocks/service/finnhub-api/finnhub-api.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport * as finnhub from 'finnhub';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinnhubApiService {\n\n  private _api_key: any;\n  private finnhubClient: any;\n\n  constructor() {\n    this._api_key = \"FH18MFFK6GR1VQ1B\"; /// Alpha vantage key\n    this._api_key = finnhub.ApiClient.instance.authentication['c7q4jmiad3i9it65vql0'];\n    this._api_key.apiKey = \"\"\n    this.finnhubClient = new finnhub.DefaultApi();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAnimateShape.html":{"url":"interfaces/IAnimateShape.html","title":"interface - IAnimateShape","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAnimateShape\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interfaces/shape-object-interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            animate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        animate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        animate:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAnimateShape {\n    animate: (frameRate: number) => void\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICenter.html":{"url":"interfaces/ICenter.html","title":"interface - ICenter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/create-js-shapes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Graphics, Shape, Text } from \"createjs-module\";\n\ninterface ICenter {\n    x: number;\n    y: number;\n}\nexport interface IStrokeStyle {\n    width: number;\n    caps?: 'round' | 'butt' | 'square';\n    joints?: 'round' | 'bevel' | 'miter';\n    miterLimit?: number\n}\nexport type IPoint = ICenter;\n\nexport class CreateJS_Shapes {\n    public static getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any): Shape {\n        const line = this.getGraphics(graphicsColors?.fillColor, graphicsColors?.strokeColor, strokeStyle).moveTo(from.x, from.y).lineTo(to.x, to.y);\n        const shape = new Shape(line);\n        return shape;\n    }\n\n    public static getCircle(x: number, y: number, radius: number, strokeStyle?: IStrokeStyle, graphicsColor?: any): Shape {\n        const graphics = this.getGraphics(graphicsColor?.fillColor, graphicsColor?.strokeColor, strokeStyle).drawCircle(x, y, radius);\n        const circle = new Shape(graphics);\n        return circle;\n    }\n\n    public static getRect(x: number, y: number, w: number, h: number) {\n        const graphics = this.getGraphics().drawRect(x, y, w, h);\n        const rect = new Shape(graphics);\n        return rect;\n    }\n\n    public static getText(n: number, position: IPoint, font?: any, textColor?: string): Text {\n        const text = new Text(n.toString(), font || '20px Arial', textColor || \"#000\");\n        text.x = position.x;\n        text.y = position.y;\n        return text;\n    }\n\n    public static getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle): Graphics {\n        const circleConfig = {\n            beginFill: fillColor || '#ddd',\n            beginStroke: strokeColor || '#000',\n        };\n        const graphics = new Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke).setStrokeStyle(strokeStyle?.width || 1, strokeStyle?.caps || 'round');\n        return graphics;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICenter-1.html":{"url":"interfaces/ICenter-1.html","title":"interface - ICenter-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/clock/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface IGraphics {\n    beginStroke: ColorGamut;\n    endStroke: ColorGamut;\n    beginFill: ColorGamut;\n    endFill: ColorGamut;\n}\n\ninterface ICircleConfig extends IGraphics {\n    radius: number;\n    center: ICenter;\n}\n\ninterface ICenter {\n    x: number;\n    y: number;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICenter-2.html":{"url":"interfaces/ICenter-2.html","title":"interface - ICenter-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/demo/demo.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Container, Graphics, Shape, Stage, Ticker } from 'createjs-module';\n\n@Component({\n  selector: 'app-demo',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.component.scss']\n})\nexport class DemoComponent implements OnInit {\n\n  stage: Stage;\n  container: Container;\n  line: Shape;\n  constructor() { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    const from = {x: 400, y: 400};\n    const to = {x: 300, y: 300};\n    // this.line = this.getRect(100, 100, 10, 100);\n    this.line = this.getLine(from, to);\n    this.container = new Container();\n    Ticker.setFPS(60);\n    this.stage.addChild(this.container.addChild(this.line));\n    Ticker.on('tick', this.onTick.bind(this));\n    this.stage.update();\n  }\n\n  private getStage(canvasConfig?: any) {\n    const stage: any = new Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  private onTick() {\n    this.line.rotation += 2;\n    this.stage.update();\n  }\n\n  private getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any) {\n    const line = this.getGraphics(graphicsColors?.fillColor, graphicsColors?.strokeColor, strokeStyle).moveTo(from.x, from.y).lineTo(to.x, to.y);\n    const shape = new Shape(line);\n    shape.regX = from.x;\n    shape.regY = from.y;\n    shape.x = 100;\n    shape.y = 100;\n    return shape;\n  }\n\n  private getRect(x: number, y: number, w: number, h: number) {\n    const graphics = this.getGraphics().drawRect(x, y, w, h);\n    const rect = new Shape(graphics);\n    rect.regX = x + w/2;\n    rect.regY = y;\n    rect.x = 100;\n    rect.y = 100;\n    return rect;\n  }\n\n  private getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle): Graphics {\n    const circleConfig = {\n      beginFill: fillColor || '#ddd',\n      beginStroke: strokeColor || '#000',\n    };\n    const graphics = new Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke).setStrokeStyle(strokeStyle?.width || 1, strokeStyle?.caps || 'round');\n    return graphics;\n  }\n\n}\n\ninterface ICenter {\n  x: number;\n  y: number;\n}\ninterface IStrokeStyle {\n  width: number;\n  caps?: 'round' | 'butt' | 'square';\n  joints?: 'round' | 'bevel' | 'miter';\n  miterLimit?: number\n}\ntype IPoint = ICenter;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICenter-3.html":{"url":"interfaces/ICenter-3.html","title":"interface - ICenter-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICenter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/draw-anim/draw-anim.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport * as createjs from 'createjs-module';\n\n@Component({\n  selector: 'app-draw-anim',\n  templateUrl: './draw-anim.component.html',\n  styleUrls: ['./draw-anim.component.css']\n})\nexport class DrawAnimComponent implements OnInit {\n  stage: createjs.Stage;\n  container: createjs.Container;\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    this.container = new createjs.Container();\n    this.animateClock();\n    // createjs.Ticker.setFPS(60);\n    // createjs.Ticker.addEventListener('tick', this.onTick.bind(this));\n  }\n\n  onTick() {\n    this.stage.update();\n  }\n\n  animateClock() {\n    const context = 'http://localhost:8080/';\n    const restName = 'api/3';\n    // this.httpClient.get(context + restName).subscribe((data: any) => {\n      Array.from({length: 2}).forEach((e: any, i: number) => {\n        setTimeout(() => {\n          this.drawObject(i, 30);\n        },i*1000, i);\n      });\n    // });\n  }\n\n  shapeObject = {\n    centroid: {\n      x: 0,\n      y: 0\n    }\n  }\n  \n  drawObject(index: number, radius: number) {\n    const draw = (i: number) => {\n      const rotation = 0;\n      const container = this.getObject(i, radius);\n      container.setTransform(radius, 0, 1, 1, rotation, 0, 0, 0, 0);\n      this.container.addChild(container);\n      this.updateStage(this.container);\n    }\n    if(!index && index !== 0) {\n      draw(0);\n    } else {\n      draw(index);\n    }\n  }\n\n  getStage(canvasConfig?: any) {\n    const stage: any = new createjs.Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  updateStage(shape: createjs.Shape | createjs.Text | createjs.Container) {\n    this.stage.addChild(shape);\n    (this.stage.canvas as any).width = window.innerWidth;\n    (this.stage.canvas as any).height = window.innerHeight;\n    this.stage.update();\n  }\n\n  getObject(i: number, radius: number): createjs.Container {\n    const circleCenter = {\n      x: 2*(i + 0.5)*radius,\n      y: 2*(i + 0.5)*radius\n    };\n    const circle1 = this.getCircle(circleCenter.x, circleCenter.y, radius);\n    const circle2 = this.getCircle(circleCenter.x, circleCenter.y, radius/40);\n    const rect2 = this.getRect((2*i)*radius,(2*i)*radius,radius,radius);\n    const rect1 = this.getRect((2*i + 1)*radius,(2*i + 1)*radius,radius,radius);\n    const container = new createjs.Container();\n    container.addChild(circle1);\n    container.addChild(circle2);\n    container.addChild(rect1);\n    container.addChild(rect2);\n    return container;\n  }\n\n  getCircle(x: number, y: number, radius: number): createjs.Shape {\n    const graphics = this.getGraphics().drawCircle(x, y, radius);\n    const circle = new createjs.Shape(graphics);\n    return circle;\n  }\n\n  getRect(x: number, y: number, w: number, h: number) {\n    const graphics = this.getGraphics().drawRect(x, y, w, h);\n    const rect = new createjs.Shape(graphics);\n    return rect;\n  }\n\n  createText() {\n    this.updateStage(this.getText(2));\n  }\n\n  getText(n: number): createjs.Text {\n    const text = new createjs.Text(n.toString(), '20px', \"#000\")\n    return text;\n  }\n  getGraphics(): createjs.Graphics {\n    const circleConfig = {\n      beginFill: '#ddd',\n      beginStroke: '#000',\n    };\n    const graphics = new createjs.Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke);\n    return graphics;\n  }\n}\n\ninterface IShapeObject {\n  centroid: ICenter;\n  rotation?: number;\n  scaleX?: number;\n  scaleY?: number\n}\n\ninterface ICenter {\n  x: number;\n  y: number;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICircleConfig.html":{"url":"interfaces/ICircleConfig.html","title":"interface - ICircleConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICircleConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/clock/interfaces.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IGraphics\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            center\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        center\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        center:         ICenter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ICenter\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface IGraphics {\n    beginStroke: ColorGamut;\n    endStroke: ColorGamut;\n    beginFill: ColorGamut;\n    endFill: ColorGamut;\n}\n\ninterface ICircleConfig extends IGraphics {\n    radius: number;\n    center: ICenter;\n}\n\ninterface ICenter {\n    x: number;\n    y: number;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IClock.html":{"url":"interfaces/IClock.html","title":"interface - IClock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IClock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/clock/clock.shape.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            container\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        container\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        container:     Container\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Container\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         IPoint\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IPoint\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Container, Shape } from \"createjs-module\";\nimport { IAnimateShape } from \"src/app/interfaces/shape-object-interfaces\";\nimport { CreateJS_Shapes, IPoint, IStrokeStyle } from \"../../classes/create-js-shapes\";\n\nexport interface IClock {\n    container: Container;\n    radius: number;\n    position: IPoint\n}\n\nexport class Clock implements IAnimateShape {\n    container: Container;\n    // private clockObj: any;\n    private name: string;\n    hands: { [key: string]: Container | Shape };\n    private radius: number;\n\n    position: IPoint;\n\n    constructor(_radius: number, _position: IPoint, _name: string) {\n        this.name = _name;\n        this.position = _position;\n        this.radius = _radius;\n        this.create();\n        // this.clockObj = _clockObj;\n    }\n\n    public animate(frameRate: number): void {\n        this.hands['secondHand'].rotation += 6/frameRate;\n        this.hands['minuteHand'].rotation += 0.1/frameRate;\n        this.hands['hourHand'].rotation += 0.5/(60 * frameRate);\n        // this.container.rotation++;\n    }\n\n    private create() {\n        this.container = new Container();\n        this.container = this.createClock();\n    }\n\n    private createClock(): Container {\n        const container = new Container();\n        const staticContainer = this.getStaticComponentContainer();\n        container.addChild(staticContainer);\n        this.hands = this.getDynamicComponentContainer();\n        this.setCurrentTime();\n        container.addChild(this.hands['secondHand']);\n        container.addChild(this.hands['minuteHand']);\n        container.addChild(this.hands['hourHand']);\n        container.name = this.name;\n        return container;\n    }\n\n    private getStaticComponentContainer(): Container {\n        const x = this.position?.x ?? window.innerHeight;\n        const y = this.position?.y ?? window.innerHeight / 2;\n        const radius = this.radius ?? 200;\n        const graphicsColors = {\n            fillColor: '#FFF',\n            strokeColor: '#000099'\n        };\n        const noOfParts = 12;\n        const circle = CreateJS_Shapes.getCircle(x, y, radius, { width: radius / 30 }, graphicsColors);\n        const center = CreateJS_Shapes.getCircle(x, y, (radius / 30), { width: radius / 30 }, { fillColor: graphicsColors.strokeColor, strokeColor: graphicsColors.strokeColor });\n        const ashokChakra = this.getAshokChakra(24, radius / 10, { x: x / 1, y: y });\n        const chakra = this.getChakra({ x, y }, radius / 2, 4 * noOfParts, graphicsColors);\n        const fontSize = radius / 6;\n        const text = this.getClockTexts(x, y, radius, fontSize, 1 * noOfParts, graphicsColors.strokeColor);\n\n        const container = new Container();\n        container.addChild(circle);\n        // container.addChild(chakra);\n        // container.addChild(ashokChakra);\n        for (let i = 0; i  = [];\n        const fontSize = radius / 6;\n        for (let i = 1; i  count) {\n                number = 1;\n            }\n            fontSizeX = number.toString().length * fontSize;\n            texts.push(CreateJS_Shapes.getText(number, { x: x - (fontSizeX / 4) - (radius - fontSizeX / 2.8) * Math.cos(i * fullAngle / count), y: y - (fontSizeY / 2.3) - (radius - fontSizeY / 2.1) * Math.sin(i * fullAngle / count) }, fontSize + 'px Cambria', textColor));\n        }\n        return texts;\n    }\n\n    private getHands(origin: IPoint, radius: number, noOfHands: number, strokeStyle?: IStrokeStyle, graphicsColors?: any) {\n        const fullAngle = 2 * Math.PI;\n        const hands = [];\n        for (let i = 1; i  12 ? hour - 12 : hour;\n        const minute = currentTime.getMinutes();\n        const second = currentTime.getSeconds();\n        let secondAngle = second * 6;\n        let minuteAngle = (minute * 6) + (second / 10);\n        let hourAngle = (hour * 30) + (minute / 2) + (second / 120);\n        return { hour: hourAngle, minute: minuteAngle, second: secondAngle };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGraphics.html":{"url":"interfaces/IGraphics.html","title":"interface - IGraphics","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IGraphics\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/clock/interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            beginFill\n                                        \n                                \n                                \n                                        \n                                            beginStroke\n                                        \n                                \n                                \n                                        \n                                            endFill\n                                        \n                                \n                                \n                                        \n                                            endStroke\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        beginFill\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beginFill:     ColorGamut\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColorGamut\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        beginStroke\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beginStroke:     ColorGamut\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColorGamut\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endFill\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endFill:     ColorGamut\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColorGamut\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endStroke\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endStroke:     ColorGamut\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColorGamut\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface IGraphics {\n    beginStroke: ColorGamut;\n    endStroke: ColorGamut;\n    beginFill: ColorGamut;\n    endFill: ColorGamut;\n}\n\ninterface ICircleConfig extends IGraphics {\n    radius: number;\n    center: ICenter;\n}\n\ninterface ICenter {\n    x: number;\n    y: number;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/INumberMatrixOps.html":{"url":"interfaces/INumberMatrixOps.html","title":"interface - INumberMatrixOps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  INumberMatrixOps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/matrix.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            adjoint\n                                        \n                                \n                                \n                                        \n                                            cofactor\n                                        \n                                \n                                \n                                        \n                                            determinant\n                                        \n                                \n                                \n                                        \n                                            inverse\n                                        \n                                \n                                \n                                        \n                                            isSingular\n                                        \n                                \n                                \n                                        \n                                            minor\n                                        \n                                \n                                \n                                        \n                                            multiply\n                                        \n                                \n                                \n                                        \n                                            subtract\n                                        \n                                \n                                \n                                        \n                                            transpose\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        adjoint\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        adjoint:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cofactor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cofactor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        determinant\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        determinant:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inverse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inverse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isSingular\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSingular:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        multiply\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        multiply:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subtract\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subtract:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transpose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transpose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type IMatrix = Array> | Array;\n\nconst DEFAULT_DEPTH = 0;\nconst DEFAULT_DIMENSION: Array = [];\n\nenum ErrorMsg {\n    INVALID_MATRIX = `Invalid Matrices`,\n    INVALID_MATRIX_DIMENSION = `Invalid matrix dimensions`,\n    MULTIPLICATION_NOT_VALID = `Multiplication is not valid`\n};\n\nclass Matrix {\n    private _depth: number;\n    private _dimension: Array;\n    private _matrix: IMatrix;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            this._depth = DEFAULT_DEPTH;\n            this._dimension = DEFAULT_DIMENSION;\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                this._depth = input1;\n                this._dimension = Array.from({length: this._depth}).fill(0) as Array;\n            }\n            if(Array.isArray(input1)) {\n                this._depth = input1.length;\n                this._dimension = input1;\n            }\n        } else {\n            this._depth = input1 as number;\n            this._dimension = input2;\n        }\n        const utilProps = Object.getPrototypeOf(MatrixUtil.getInstance());\n        for(let prop in utilProps) {\n            (this as any)[prop] = utilProps[prop];\n        }\n        // Object.assign(this, MatrixUtil.getInstance());\n        // console.log(MatrixUtil.getInstance());\n    }\n    get depth(): number {\n        return this._depth;\n    }\n    set depth(depth: number) {\n        this._depth = depth;\n    }\n    get dimension(): Array {\n        return this._dimension;\n    }\n    set dimension(dimension: Array) {\n        this._depth = this._dimension.length;\n        this._dimension = dimension;\n    }\n    get matrix(): IMatrix {\n        return this._matrix;\n    }\n    set matrix(matrix: IMatrix) {\n        this.depth = 0;\n        this.depth = this.getDepthFromMatrix(matrix);\n        this.dimension = Array.from({length: this._depth}).fill(0) as Array;\n        this.dimension = this.getDimensionFromMatrix(matrix, 0);\n        this._matrix = matrix;\n    }\n    private getDepthFromMatrix(matrix: IMatrix | T): number {\n        if (Array.isArray(matrix)) {\n            this.depth++;\n            this.getDepthFromMatrix(matrix[0]);\n        }\n        return this.depth;\n    }\n    getDimensionFromMatrix(matrix: IMatrix | T, i: number): Array {\n        if (Array.isArray(matrix)) {\n            this.dimension[i++] = matrix.length;\n            this.getDimensionFromMatrix(matrix[0], i);\n        }\n        return this.dimension;\n    }\n}\n\ninterface INumberMatrixOps {\n    add: (matrix: Matrix) => Matrix;\n    subtract: (matrix: Matrix) => Matrix;\n    multiply: (matrix: Matrix) => Matrix;\n    transpose: () => Matrix;\n    determinant: () => number;\n    inverse: () => Matrix;\n    minor: (element: number) => Matrix;\n    cofactor: (minor: Matrix | number) => number;\n    isSingular: () => boolean;\n    adjoint: () => Matrix;\n}\nclass NumberMatrix extends Matrix implements INumberMatrixOps {\n    rows: number;\n    columns: number;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            super();\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                super(input1);\n            } else {\n                super(input1);\n            }\n        } else {\n            super(input1 as number, input2);\n        }\n        // this.rows = this.matrix.length;\n    }\n    public add(matrixRef: Matrix): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        if(this.matrix.length === (matrixRef.matrix[0] as Array).length) {\n\n        } else {\n            throw ErrorMsg.MULTIPLICATION_NOT_VALID;\n        }\n        return null;\n    }\n    public transpose(): Matrix {\n        if(this.depth  number;\n    public inverse: () => Matrix;\n    public minor: (element: number) => Matrix;\n    public cofactor: (minor: number | Matrix) => number;\n    public isSingular: () => boolean;\n    public adjoint: () => Matrix;\n    private getResultant(result: IMatrix): Matrix {\n        const resultant = new Matrix(this.depth, this.dimension);\n        resultant.matrix = result;\n        return resultant;\n    }\n}\n\nclass MatrixUtil {\n    private static _instance: MatrixUtil;\n    private constructor() { }\n    public isDimensionSame(matrixRef: Matrix): boolean {\n        const that = this as any;\n        let flag = that.dimension.length === matrixRef.dimension.length;\n        if(flag) {\n            that.dimension.forEach((element: number, index: number) => {\n                flag = element === matrixRef.dimension[index];\n            });\n        }\n        return flag;\n    }\n    public addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.addArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) + (arr2[index] as number);\n            }\n        });\n    }\n    public subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.subtractArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) - (arr2[index] as number);\n            }\n        });\n    }\n    public static getInstance() {\n        if(!MatrixUtil._instance) {\n            MatrixUtil._instance = new MatrixUtil();\n        }\n        return MatrixUtil._instance;\n    }\n}\n\nclass NumberMatrixUtil {\n    private constructor() { }\n    private _instance: NumberMatrixUtil;\n}\n\nclass MatrixGenerator {\n    constructor() {}\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IShapeObject.html":{"url":"interfaces/IShapeObject.html","title":"interface - IShapeObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IShapeObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/draw-anim/draw-anim.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            centroid\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rotation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scaleX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scaleY\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        centroid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        centroid:         ICenter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ICenter\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaleX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scaleX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaleY\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scaleY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport * as createjs from 'createjs-module';\n\n@Component({\n  selector: 'app-draw-anim',\n  templateUrl: './draw-anim.component.html',\n  styleUrls: ['./draw-anim.component.css']\n})\nexport class DrawAnimComponent implements OnInit {\n  stage: createjs.Stage;\n  container: createjs.Container;\n\n  constructor(\n    private httpClient: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    this.container = new createjs.Container();\n    this.animateClock();\n    // createjs.Ticker.setFPS(60);\n    // createjs.Ticker.addEventListener('tick', this.onTick.bind(this));\n  }\n\n  onTick() {\n    this.stage.update();\n  }\n\n  animateClock() {\n    const context = 'http://localhost:8080/';\n    const restName = 'api/3';\n    // this.httpClient.get(context + restName).subscribe((data: any) => {\n      Array.from({length: 2}).forEach((e: any, i: number) => {\n        setTimeout(() => {\n          this.drawObject(i, 30);\n        },i*1000, i);\n      });\n    // });\n  }\n\n  shapeObject = {\n    centroid: {\n      x: 0,\n      y: 0\n    }\n  }\n  \n  drawObject(index: number, radius: number) {\n    const draw = (i: number) => {\n      const rotation = 0;\n      const container = this.getObject(i, radius);\n      container.setTransform(radius, 0, 1, 1, rotation, 0, 0, 0, 0);\n      this.container.addChild(container);\n      this.updateStage(this.container);\n    }\n    if(!index && index !== 0) {\n      draw(0);\n    } else {\n      draw(index);\n    }\n  }\n\n  getStage(canvasConfig?: any) {\n    const stage: any = new createjs.Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  updateStage(shape: createjs.Shape | createjs.Text | createjs.Container) {\n    this.stage.addChild(shape);\n    (this.stage.canvas as any).width = window.innerWidth;\n    (this.stage.canvas as any).height = window.innerHeight;\n    this.stage.update();\n  }\n\n  getObject(i: number, radius: number): createjs.Container {\n    const circleCenter = {\n      x: 2*(i + 0.5)*radius,\n      y: 2*(i + 0.5)*radius\n    };\n    const circle1 = this.getCircle(circleCenter.x, circleCenter.y, radius);\n    const circle2 = this.getCircle(circleCenter.x, circleCenter.y, radius/40);\n    const rect2 = this.getRect((2*i)*radius,(2*i)*radius,radius,radius);\n    const rect1 = this.getRect((2*i + 1)*radius,(2*i + 1)*radius,radius,radius);\n    const container = new createjs.Container();\n    container.addChild(circle1);\n    container.addChild(circle2);\n    container.addChild(rect1);\n    container.addChild(rect2);\n    return container;\n  }\n\n  getCircle(x: number, y: number, radius: number): createjs.Shape {\n    const graphics = this.getGraphics().drawCircle(x, y, radius);\n    const circle = new createjs.Shape(graphics);\n    return circle;\n  }\n\n  getRect(x: number, y: number, w: number, h: number) {\n    const graphics = this.getGraphics().drawRect(x, y, w, h);\n    const rect = new createjs.Shape(graphics);\n    return rect;\n  }\n\n  createText() {\n    this.updateStage(this.getText(2));\n  }\n\n  getText(n: number): createjs.Text {\n    const text = new createjs.Text(n.toString(), '20px', \"#000\")\n    return text;\n  }\n  getGraphics(): createjs.Graphics {\n    const circleConfig = {\n      beginFill: '#ddd',\n      beginStroke: '#000',\n    };\n    const graphics = new createjs.Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke);\n    return graphics;\n  }\n}\n\ninterface IShapeObject {\n  centroid: ICenter;\n  rotation?: number;\n  scaleX?: number;\n  scaleY?: number\n}\n\ninterface ICenter {\n  x: number;\n  y: number;\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrokeStyle.html":{"url":"interfaces/IStrokeStyle.html","title":"interface - IStrokeStyle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrokeStyle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/create-js-shapes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            caps\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joints\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            miterLimit\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        caps\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        caps:     \"round\" | \"butt\" | \"square\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"round\" | \"butt\" | \"square\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joints:     \"round\" | \"bevel\" | \"miter\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"round\" | \"bevel\" | \"miter\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        miterLimit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        miterLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Graphics, Shape, Text } from \"createjs-module\";\n\ninterface ICenter {\n    x: number;\n    y: number;\n}\nexport interface IStrokeStyle {\n    width: number;\n    caps?: 'round' | 'butt' | 'square';\n    joints?: 'round' | 'bevel' | 'miter';\n    miterLimit?: number\n}\nexport type IPoint = ICenter;\n\nexport class CreateJS_Shapes {\n    public static getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any): Shape {\n        const line = this.getGraphics(graphicsColors?.fillColor, graphicsColors?.strokeColor, strokeStyle).moveTo(from.x, from.y).lineTo(to.x, to.y);\n        const shape = new Shape(line);\n        return shape;\n    }\n\n    public static getCircle(x: number, y: number, radius: number, strokeStyle?: IStrokeStyle, graphicsColor?: any): Shape {\n        const graphics = this.getGraphics(graphicsColor?.fillColor, graphicsColor?.strokeColor, strokeStyle).drawCircle(x, y, radius);\n        const circle = new Shape(graphics);\n        return circle;\n    }\n\n    public static getRect(x: number, y: number, w: number, h: number) {\n        const graphics = this.getGraphics().drawRect(x, y, w, h);\n        const rect = new Shape(graphics);\n        return rect;\n    }\n\n    public static getText(n: number, position: IPoint, font?: any, textColor?: string): Text {\n        const text = new Text(n.toString(), font || '20px Arial', textColor || \"#000\");\n        text.x = position.x;\n        text.y = position.y;\n        return text;\n    }\n\n    public static getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle): Graphics {\n        const circleConfig = {\n            beginFill: fillColor || '#ddd',\n            beginStroke: strokeColor || '#000',\n        };\n        const graphics = new Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke).setStrokeStyle(strokeStyle?.width || 1, strokeStyle?.caps || 'round');\n        return graphics;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrokeStyle-1.html":{"url":"interfaces/IStrokeStyle-1.html","title":"interface - IStrokeStyle-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrokeStyle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/demo/demo.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            caps\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            joints\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            miterLimit\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        caps\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        caps:     \"round\" | \"butt\" | \"square\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"round\" | \"butt\" | \"square\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        joints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        joints:     \"round\" | \"bevel\" | \"miter\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"round\" | \"bevel\" | \"miter\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        miterLimit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        miterLimit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Container, Graphics, Shape, Stage, Ticker } from 'createjs-module';\n\n@Component({\n  selector: 'app-demo',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.component.scss']\n})\nexport class DemoComponent implements OnInit {\n\n  stage: Stage;\n  container: Container;\n  line: Shape;\n  constructor() { }\n\n  ngOnInit(): void {\n    this.stage = this.getStage();\n    const from = {x: 400, y: 400};\n    const to = {x: 300, y: 300};\n    // this.line = this.getRect(100, 100, 10, 100);\n    this.line = this.getLine(from, to);\n    this.container = new Container();\n    Ticker.setFPS(60);\n    this.stage.addChild(this.container.addChild(this.line));\n    Ticker.on('tick', this.onTick.bind(this));\n    this.stage.update();\n  }\n\n  private getStage(canvasConfig?: any) {\n    const stage: any = new Stage(canvasConfig?.id || \"demoCanvas\");\n    stage.canvas.width = canvasConfig?.width || window.innerWidth;\n    stage.canvas.height = canvasConfig?.height || window.innerHeight;\n    return stage;\n  }\n\n  private onTick() {\n    this.line.rotation += 2;\n    this.stage.update();\n  }\n\n  private getLine(from: IPoint, to: IPoint, strokeStyle?: IStrokeStyle, graphicsColors?: any) {\n    const line = this.getGraphics(graphicsColors?.fillColor, graphicsColors?.strokeColor, strokeStyle).moveTo(from.x, from.y).lineTo(to.x, to.y);\n    const shape = new Shape(line);\n    shape.regX = from.x;\n    shape.regY = from.y;\n    shape.x = 100;\n    shape.y = 100;\n    return shape;\n  }\n\n  private getRect(x: number, y: number, w: number, h: number) {\n    const graphics = this.getGraphics().drawRect(x, y, w, h);\n    const rect = new Shape(graphics);\n    rect.regX = x + w/2;\n    rect.regY = y;\n    rect.x = 100;\n    rect.y = 100;\n    return rect;\n  }\n\n  private getGraphics(fillColor?: string, strokeColor?: string, strokeStyle?: IStrokeStyle): Graphics {\n    const circleConfig = {\n      beginFill: fillColor || '#ddd',\n      beginStroke: strokeColor || '#000',\n    };\n    const graphics = new Graphics().beginFill(circleConfig.beginFill).beginStroke(circleConfig.beginStroke).setStrokeStyle(strokeStyle?.width || 1, strokeStyle?.caps || 'round');\n    return graphics;\n  }\n\n}\n\ninterface ICenter {\n  x: number;\n  y: number;\n}\ninterface IStrokeStyle {\n  width: number;\n  caps?: 'round' | 'butt' | 'square';\n  joints?: 'round' | 'bevel' | 'miter';\n  miterLimit?: number\n}\ntype IPoint = ICenter;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/map/map.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-map\n            \n\n            \n                styleUrls\n                ./map.component.css\n            \n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _map\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadMap\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/map/map.component.ts:13\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadMap\n                        \n                    \n                \n            \n            \n                \nloadMap()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/map/map.component.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/map/map.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/map/map.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _map\n                        \n                    \n                \n            \n                \n                    \n                        Type :     L.Map\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/map/map.component.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/map/map.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, OnInit } from '@angular/core';\nimport { map, tileLayer } from 'leaflet';\n// declare const google: any;\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n\n  public id: string;\n  private _map: L.Map;\n\n  constructor() {\n    this.id = 'map';\n    // this.loadGoogle();\n  }\n  ngOnInit(): void {\n    // this.loadMap();\n  }\n\n  ngAfterViewInit(): void {\n      this.loadMap();\n  }\n  \n  loadMap(): void {\n    const centroid = {\n      lat: 22.71361466327701,\n      lng: 75.9120403994733,\n    };\n    this._map = map(this.id, {\n      center: centroid,\n      zoom: 10\n    })\n    tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      \n    }).addTo(this._map);\n    // L.geoJSON({}, {} as L.GeoJSONOptions).addTo(this._map)\n    // new google.maps.Map(document.getElementById(this.id) as HTMLElement, {\n    //   center: centroid,\n    //   zoom: 15\n    // });\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./map.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MapResolver.html":{"url":"guards/MapResolver.html","title":"guard - MapResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MapResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/resolver/map.resolver.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addScriptToDOM\n                            \n                            \n                                loadGoogle\n                            \n                            \n                                loadOSM\n                            \n                            \n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/resolver/map.resolver.ts:9\n                            \n                        \n\n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addScriptToDOM\n                        \n                    \n                \n            \n            \n                \naddScriptToDOM(id: string, url: string, obs: Observer)\n                \n            \n\n\n            \n                \n                    Defined in src/app/resolver/map.resolver.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    obs\n                                    \n                                            Observer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadGoogle\n                        \n                    \n                \n            \n            \n                \nloadGoogle()\n                \n            \n\n\n            \n                \n                    Defined in src/app/resolver/map.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadOSM\n                        \n                    \n                \n            \n            \n                \nloadOSM()\n                \n            \n\n\n            \n                \n                    Defined in src/app/resolver/map.resolver.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolve\n                        \n                    \n                \n            \n            \n                \nresolve()\n                \n            \n\n\n            \n                \n                    Defined in src/app/resolver/map.resolver.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Observable\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { Observable, Observer } from 'rxjs';\n\nconst API_KEY = \"AIzaSyD_7zV9Y84sCeiijNISabociP2i9_RAHD8\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapResolver implements Resolve {\n\n  constructor() { }\n\n  loadOSM(): Observable {\n    return new Observable((obs) => {\n      const language = 'en';\n      const url = `https://www.openstreetmap.org/#map=1/22/-128&layers=H`;\n      const id = 'osm-map-script';\n      this.addScriptToDOM(id, url, obs);\n    });\n  }\n  loadGoogle(): Observable {\n    return new Observable((obs) => {\n      const language = 'en';\n      const url = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places&language=${language}`;\n      const id = 'google-map-script';\n      this.addScriptToDOM(id, url, obs);\n    });\n  }\n  addScriptToDOM(id: string, url: string, obs: Observer) {\n    let script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.id = id;\n      if (script.addEventListener) {\n        script.addEventListener(\n          'load',\n          () => {\n            obs.next(true);\n            obs.complete();\n          },\n          false\n        );\n      }\n      document.head.appendChild(script);\n  }\n  resolve(): Observable {\n      return this.loadOSM();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Matrix.html":{"url":"classes/Matrix.html","title":"class - Matrix","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Matrix\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/matrix.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _depth\n                            \n                            \n                                    Private\n                                _dimension\n                            \n                            \n                                    Private\n                                _matrix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getDepthFromMatrix\n                            \n                            \n                                getDimensionFromMatrix\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    depth\n                                \n                                \n                                    dimension\n                                \n                                \n                                    matrix\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input1?: number | Array, input2?: Array)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/matrix.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input1\n                                                  \n                                                        \n                                                                    number | Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        input2\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _depth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _dimension\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _matrix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IMatrix\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getDepthFromMatrix\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDepthFromMatrix(matrix: IMatrix | T)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrix\n                                    \n                                                IMatrix | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDimensionFromMatrix\n                        \n                    \n                \n            \n            \n                \ngetDimensionFromMatrix(matrix: IMatrix | T, i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrix\n                                    \n                                                IMatrix | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        depth\n                    \n                \n\n                \n                    \n                        getdepth()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/matrix.ts:44\n                                \n                            \n\n                \n                    \n                        setdepth(depth: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/matrix.ts:47\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            depth\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        dimension\n                    \n                \n\n                \n                    \n                        getdimension()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/matrix.ts:50\n                                \n                            \n\n                \n                    \n                        setdimension(dimension: Array)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/matrix.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            dimension\n                                                    \n                                                            \n                                                                        Array\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        matrix\n                    \n                \n\n                \n                    \n                        getmatrix()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/matrix.ts:57\n                                \n                            \n\n                \n                    \n                        setmatrix(matrix: IMatrix)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/matrix.ts:60\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            matrix\n                                                    \n                                                            \n                                                                            IMatrix\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        type IMatrix = Array> | Array;\n\nconst DEFAULT_DEPTH = 0;\nconst DEFAULT_DIMENSION: Array = [];\n\nenum ErrorMsg {\n    INVALID_MATRIX = `Invalid Matrices`,\n    INVALID_MATRIX_DIMENSION = `Invalid matrix dimensions`,\n    MULTIPLICATION_NOT_VALID = `Multiplication is not valid`\n};\n\nclass Matrix {\n    private _depth: number;\n    private _dimension: Array;\n    private _matrix: IMatrix;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            this._depth = DEFAULT_DEPTH;\n            this._dimension = DEFAULT_DIMENSION;\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                this._depth = input1;\n                this._dimension = Array.from({length: this._depth}).fill(0) as Array;\n            }\n            if(Array.isArray(input1)) {\n                this._depth = input1.length;\n                this._dimension = input1;\n            }\n        } else {\n            this._depth = input1 as number;\n            this._dimension = input2;\n        }\n        const utilProps = Object.getPrototypeOf(MatrixUtil.getInstance());\n        for(let prop in utilProps) {\n            (this as any)[prop] = utilProps[prop];\n        }\n        // Object.assign(this, MatrixUtil.getInstance());\n        // console.log(MatrixUtil.getInstance());\n    }\n    get depth(): number {\n        return this._depth;\n    }\n    set depth(depth: number) {\n        this._depth = depth;\n    }\n    get dimension(): Array {\n        return this._dimension;\n    }\n    set dimension(dimension: Array) {\n        this._depth = this._dimension.length;\n        this._dimension = dimension;\n    }\n    get matrix(): IMatrix {\n        return this._matrix;\n    }\n    set matrix(matrix: IMatrix) {\n        this.depth = 0;\n        this.depth = this.getDepthFromMatrix(matrix);\n        this.dimension = Array.from({length: this._depth}).fill(0) as Array;\n        this.dimension = this.getDimensionFromMatrix(matrix, 0);\n        this._matrix = matrix;\n    }\n    private getDepthFromMatrix(matrix: IMatrix | T): number {\n        if (Array.isArray(matrix)) {\n            this.depth++;\n            this.getDepthFromMatrix(matrix[0]);\n        }\n        return this.depth;\n    }\n    getDimensionFromMatrix(matrix: IMatrix | T, i: number): Array {\n        if (Array.isArray(matrix)) {\n            this.dimension[i++] = matrix.length;\n            this.getDimensionFromMatrix(matrix[0], i);\n        }\n        return this.dimension;\n    }\n}\n\ninterface INumberMatrixOps {\n    add: (matrix: Matrix) => Matrix;\n    subtract: (matrix: Matrix) => Matrix;\n    multiply: (matrix: Matrix) => Matrix;\n    transpose: () => Matrix;\n    determinant: () => number;\n    inverse: () => Matrix;\n    minor: (element: number) => Matrix;\n    cofactor: (minor: Matrix | number) => number;\n    isSingular: () => boolean;\n    adjoint: () => Matrix;\n}\nclass NumberMatrix extends Matrix implements INumberMatrixOps {\n    rows: number;\n    columns: number;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            super();\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                super(input1);\n            } else {\n                super(input1);\n            }\n        } else {\n            super(input1 as number, input2);\n        }\n        // this.rows = this.matrix.length;\n    }\n    public add(matrixRef: Matrix): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        if(this.matrix.length === (matrixRef.matrix[0] as Array).length) {\n\n        } else {\n            throw ErrorMsg.MULTIPLICATION_NOT_VALID;\n        }\n        return null;\n    }\n    public transpose(): Matrix {\n        if(this.depth  number;\n    public inverse: () => Matrix;\n    public minor: (element: number) => Matrix;\n    public cofactor: (minor: number | Matrix) => number;\n    public isSingular: () => boolean;\n    public adjoint: () => Matrix;\n    private getResultant(result: IMatrix): Matrix {\n        const resultant = new Matrix(this.depth, this.dimension);\n        resultant.matrix = result;\n        return resultant;\n    }\n}\n\nclass MatrixUtil {\n    private static _instance: MatrixUtil;\n    private constructor() { }\n    public isDimensionSame(matrixRef: Matrix): boolean {\n        const that = this as any;\n        let flag = that.dimension.length === matrixRef.dimension.length;\n        if(flag) {\n            that.dimension.forEach((element: number, index: number) => {\n                flag = element === matrixRef.dimension[index];\n            });\n        }\n        return flag;\n    }\n    public addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.addArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) + (arr2[index] as number);\n            }\n        });\n    }\n    public subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.subtractArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) - (arr2[index] as number);\n            }\n        });\n    }\n    public static getInstance() {\n        if(!MatrixUtil._instance) {\n            MatrixUtil._instance = new MatrixUtil();\n        }\n        return MatrixUtil._instance;\n    }\n}\n\nclass NumberMatrixUtil {\n    private constructor() { }\n    private _instance: NumberMatrixUtil;\n}\n\nclass MatrixGenerator {\n    constructor() {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatrixGenerator.html":{"url":"classes/MatrixGenerator.html","title":"class - MatrixGenerator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatrixGenerator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/matrix.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/matrix.ts:214\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        type IMatrix = Array> | Array;\n\nconst DEFAULT_DEPTH = 0;\nconst DEFAULT_DIMENSION: Array = [];\n\nenum ErrorMsg {\n    INVALID_MATRIX = `Invalid Matrices`,\n    INVALID_MATRIX_DIMENSION = `Invalid matrix dimensions`,\n    MULTIPLICATION_NOT_VALID = `Multiplication is not valid`\n};\n\nclass Matrix {\n    private _depth: number;\n    private _dimension: Array;\n    private _matrix: IMatrix;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            this._depth = DEFAULT_DEPTH;\n            this._dimension = DEFAULT_DIMENSION;\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                this._depth = input1;\n                this._dimension = Array.from({length: this._depth}).fill(0) as Array;\n            }\n            if(Array.isArray(input1)) {\n                this._depth = input1.length;\n                this._dimension = input1;\n            }\n        } else {\n            this._depth = input1 as number;\n            this._dimension = input2;\n        }\n        const utilProps = Object.getPrototypeOf(MatrixUtil.getInstance());\n        for(let prop in utilProps) {\n            (this as any)[prop] = utilProps[prop];\n        }\n        // Object.assign(this, MatrixUtil.getInstance());\n        // console.log(MatrixUtil.getInstance());\n    }\n    get depth(): number {\n        return this._depth;\n    }\n    set depth(depth: number) {\n        this._depth = depth;\n    }\n    get dimension(): Array {\n        return this._dimension;\n    }\n    set dimension(dimension: Array) {\n        this._depth = this._dimension.length;\n        this._dimension = dimension;\n    }\n    get matrix(): IMatrix {\n        return this._matrix;\n    }\n    set matrix(matrix: IMatrix) {\n        this.depth = 0;\n        this.depth = this.getDepthFromMatrix(matrix);\n        this.dimension = Array.from({length: this._depth}).fill(0) as Array;\n        this.dimension = this.getDimensionFromMatrix(matrix, 0);\n        this._matrix = matrix;\n    }\n    private getDepthFromMatrix(matrix: IMatrix | T): number {\n        if (Array.isArray(matrix)) {\n            this.depth++;\n            this.getDepthFromMatrix(matrix[0]);\n        }\n        return this.depth;\n    }\n    getDimensionFromMatrix(matrix: IMatrix | T, i: number): Array {\n        if (Array.isArray(matrix)) {\n            this.dimension[i++] = matrix.length;\n            this.getDimensionFromMatrix(matrix[0], i);\n        }\n        return this.dimension;\n    }\n}\n\ninterface INumberMatrixOps {\n    add: (matrix: Matrix) => Matrix;\n    subtract: (matrix: Matrix) => Matrix;\n    multiply: (matrix: Matrix) => Matrix;\n    transpose: () => Matrix;\n    determinant: () => number;\n    inverse: () => Matrix;\n    minor: (element: number) => Matrix;\n    cofactor: (minor: Matrix | number) => number;\n    isSingular: () => boolean;\n    adjoint: () => Matrix;\n}\nclass NumberMatrix extends Matrix implements INumberMatrixOps {\n    rows: number;\n    columns: number;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            super();\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                super(input1);\n            } else {\n                super(input1);\n            }\n        } else {\n            super(input1 as number, input2);\n        }\n        // this.rows = this.matrix.length;\n    }\n    public add(matrixRef: Matrix): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        if(this.matrix.length === (matrixRef.matrix[0] as Array).length) {\n\n        } else {\n            throw ErrorMsg.MULTIPLICATION_NOT_VALID;\n        }\n        return null;\n    }\n    public transpose(): Matrix {\n        if(this.depth  number;\n    public inverse: () => Matrix;\n    public minor: (element: number) => Matrix;\n    public cofactor: (minor: number | Matrix) => number;\n    public isSingular: () => boolean;\n    public adjoint: () => Matrix;\n    private getResultant(result: IMatrix): Matrix {\n        const resultant = new Matrix(this.depth, this.dimension);\n        resultant.matrix = result;\n        return resultant;\n    }\n}\n\nclass MatrixUtil {\n    private static _instance: MatrixUtil;\n    private constructor() { }\n    public isDimensionSame(matrixRef: Matrix): boolean {\n        const that = this as any;\n        let flag = that.dimension.length === matrixRef.dimension.length;\n        if(flag) {\n            that.dimension.forEach((element: number, index: number) => {\n                flag = element === matrixRef.dimension[index];\n            });\n        }\n        return flag;\n    }\n    public addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.addArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) + (arr2[index] as number);\n            }\n        });\n    }\n    public subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.subtractArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) - (arr2[index] as number);\n            }\n        });\n    }\n    public static getInstance() {\n        if(!MatrixUtil._instance) {\n            MatrixUtil._instance = new MatrixUtil();\n        }\n        return MatrixUtil._instance;\n    }\n}\n\nclass NumberMatrixUtil {\n    private constructor() { }\n    private _instance: NumberMatrixUtil;\n}\n\nclass MatrixGenerator {\n    constructor() {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatrixUtil.html":{"url":"classes/MatrixUtil.html","title":"class - MatrixUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatrixUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/matrix.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _instance\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addArrays\n                            \n                            \n                                    Static\n                                getInstance\n                            \n                            \n                                    Public\n                                isDimensionSame\n                            \n                            \n                                    Public\n                                subtractArrays\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/matrix.ts:169\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        _instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MatrixUtil\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:169\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addArrays\n                        \n                    \n                \n            \n            \n                \n                    \n                    addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:181\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr1\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    arr2\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    result\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     MatrixUtil\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isDimensionSame\n                        \n                    \n                \n            \n            \n                \n                    \n                    isDimensionSame(matrixRef: Matrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrixRef\n                                    \n                                                Matrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        subtractArrays\n                        \n                    \n                \n            \n            \n                \n                    \n                    subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr1\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    arr2\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    result\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        type IMatrix = Array> | Array;\n\nconst DEFAULT_DEPTH = 0;\nconst DEFAULT_DIMENSION: Array = [];\n\nenum ErrorMsg {\n    INVALID_MATRIX = `Invalid Matrices`,\n    INVALID_MATRIX_DIMENSION = `Invalid matrix dimensions`,\n    MULTIPLICATION_NOT_VALID = `Multiplication is not valid`\n};\n\nclass Matrix {\n    private _depth: number;\n    private _dimension: Array;\n    private _matrix: IMatrix;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            this._depth = DEFAULT_DEPTH;\n            this._dimension = DEFAULT_DIMENSION;\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                this._depth = input1;\n                this._dimension = Array.from({length: this._depth}).fill(0) as Array;\n            }\n            if(Array.isArray(input1)) {\n                this._depth = input1.length;\n                this._dimension = input1;\n            }\n        } else {\n            this._depth = input1 as number;\n            this._dimension = input2;\n        }\n        const utilProps = Object.getPrototypeOf(MatrixUtil.getInstance());\n        for(let prop in utilProps) {\n            (this as any)[prop] = utilProps[prop];\n        }\n        // Object.assign(this, MatrixUtil.getInstance());\n        // console.log(MatrixUtil.getInstance());\n    }\n    get depth(): number {\n        return this._depth;\n    }\n    set depth(depth: number) {\n        this._depth = depth;\n    }\n    get dimension(): Array {\n        return this._dimension;\n    }\n    set dimension(dimension: Array) {\n        this._depth = this._dimension.length;\n        this._dimension = dimension;\n    }\n    get matrix(): IMatrix {\n        return this._matrix;\n    }\n    set matrix(matrix: IMatrix) {\n        this.depth = 0;\n        this.depth = this.getDepthFromMatrix(matrix);\n        this.dimension = Array.from({length: this._depth}).fill(0) as Array;\n        this.dimension = this.getDimensionFromMatrix(matrix, 0);\n        this._matrix = matrix;\n    }\n    private getDepthFromMatrix(matrix: IMatrix | T): number {\n        if (Array.isArray(matrix)) {\n            this.depth++;\n            this.getDepthFromMatrix(matrix[0]);\n        }\n        return this.depth;\n    }\n    getDimensionFromMatrix(matrix: IMatrix | T, i: number): Array {\n        if (Array.isArray(matrix)) {\n            this.dimension[i++] = matrix.length;\n            this.getDimensionFromMatrix(matrix[0], i);\n        }\n        return this.dimension;\n    }\n}\n\ninterface INumberMatrixOps {\n    add: (matrix: Matrix) => Matrix;\n    subtract: (matrix: Matrix) => Matrix;\n    multiply: (matrix: Matrix) => Matrix;\n    transpose: () => Matrix;\n    determinant: () => number;\n    inverse: () => Matrix;\n    minor: (element: number) => Matrix;\n    cofactor: (minor: Matrix | number) => number;\n    isSingular: () => boolean;\n    adjoint: () => Matrix;\n}\nclass NumberMatrix extends Matrix implements INumberMatrixOps {\n    rows: number;\n    columns: number;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            super();\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                super(input1);\n            } else {\n                super(input1);\n            }\n        } else {\n            super(input1 as number, input2);\n        }\n        // this.rows = this.matrix.length;\n    }\n    public add(matrixRef: Matrix): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        if(this.matrix.length === (matrixRef.matrix[0] as Array).length) {\n\n        } else {\n            throw ErrorMsg.MULTIPLICATION_NOT_VALID;\n        }\n        return null;\n    }\n    public transpose(): Matrix {\n        if(this.depth  number;\n    public inverse: () => Matrix;\n    public minor: (element: number) => Matrix;\n    public cofactor: (minor: number | Matrix) => number;\n    public isSingular: () => boolean;\n    public adjoint: () => Matrix;\n    private getResultant(result: IMatrix): Matrix {\n        const resultant = new Matrix(this.depth, this.dimension);\n        resultant.matrix = result;\n        return resultant;\n    }\n}\n\nclass MatrixUtil {\n    private static _instance: MatrixUtil;\n    private constructor() { }\n    public isDimensionSame(matrixRef: Matrix): boolean {\n        const that = this as any;\n        let flag = that.dimension.length === matrixRef.dimension.length;\n        if(flag) {\n            that.dimension.forEach((element: number, index: number) => {\n                flag = element === matrixRef.dimension[index];\n            });\n        }\n        return flag;\n    }\n    public addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.addArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) + (arr2[index] as number);\n            }\n        });\n    }\n    public subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.subtractArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) - (arr2[index] as number);\n            }\n        });\n    }\n    public static getInstance() {\n        if(!MatrixUtil._instance) {\n            MatrixUtil._instance = new MatrixUtil();\n        }\n        return MatrixUtil._instance;\n    }\n}\n\nclass NumberMatrixUtil {\n    private constructor() { }\n    private _instance: NumberMatrixUtil;\n}\n\nclass MatrixGenerator {\n    constructor() {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NodeType.html":{"url":"classes/NodeType.html","title":"class - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _node_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    node_id\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/node.ts:2\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _node_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/node.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        node_id\n                    \n                \n\n                \n                    \n                        getnode_id()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/node.ts:7\n                                \n                            \n\n                \n                    \n                        setnode_id(_id)\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/node.ts:4\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            _id\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        abstract class NodeType {\n    private _node_id: number;\n    constructor() {}\n    set node_id(_id) {\n        this._node_id = _id;\n    }\n    get node_id(): number {\n        return this._node_id;\n    }\n}\n\nclass Tree {\n    private _root: TreeNode;\n    constructor();\n    constructor(data: T);\n    constructor(data?: T) {\n        if(!data) {\n            this._root = new TreeNode();\n        } else {\n            this._root = new TreeNode(data);\n        }\n    }\n}\n\nclass TreeNode {\n    private _data: T;\n    private _parent: TreeNode;\n    private _children: Array>;\n    constructor();\n    constructor(data: T);\n    constructor(data: T, parent: TreeNode, children: Array>);\n    constructor(data: T = null, parent: TreeNode = null, children: Array> = []) {\n        this._data = data;\n        this._parent = parent;\n        this._children = children;\n    }\n    get data(): T {\n        return this._data;\n    }\n    get parent(): TreeNode {\n        return this._parent;\n    }\n    get children(): Array> {\n        return this._children;\n    }\n    hasChildren(): boolean {\n        return this._children?.length > 0;\n    }\n    getLevel(): number {\n        let level = 0;\n        let currentParent = this._parent;\n        while(currentParent !== null) {\n            level++;\n            currentParent = currentParent.parent;\n        }\n        return level;\n    }\n    addChild(child: TreeNode): boolean {\n        let flag = false;\n        this._children.push(child);\n        return flag;\n    }\n    private hasNodePresentInChildren(node): boolean {\n        let flag = false;\n        const currentNode = this.children?.[0]?.parent;\n        this.iterationOverChildren(currentNode, (child, index, parent) => {\n            if(!flag && !!child) {}\n        });\n        return flag;\n    }\n    iterationOverChildren(node: TreeNode, iteratee: Function = (arg1, arg2, arg3) => {}): void {\n        let index = -1;\n        const length = node?.children?.length || 0;\n        const result = new Array(length);\n        let tempNode = null;\n        if(node.hasChildren()) {\n            tempNode = node?.children?.[index];\n            iteratee(tempNode, index, node?.parent);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberMatrix.html":{"url":"classes/NumberMatrix.html","title":"class - NumberMatrix","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberMatrix\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/matrix.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Matrix\n            \n\n            \n                Implements\n            \n            \n                            INumberMatrixOps\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                adjoint\n                            \n                            \n                                    Public\n                                cofactor\n                            \n                            \n                                columns\n                            \n                            \n                                    Public\n                                determinant\n                            \n                            \n                                    Public\n                                inverse\n                            \n                            \n                                    Public\n                                isSingular\n                            \n                            \n                                    Public\n                                minor\n                            \n                            \n                                rows\n                            \n                            \n                                    Private\n                                _depth\n                            \n                            \n                                    Private\n                                _dimension\n                            \n                            \n                                    Private\n                                _matrix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Private\n                                getResultant\n                            \n                            \n                                    Public\n                                multiply\n                            \n                            \n                                    Public\n                                subtract\n                            \n                            \n                                    Public\n                                transpose\n                            \n                            \n                                    Private\n                                getDepthFromMatrix\n                            \n                            \n                                getDimensionFromMatrix\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(input1?: number | Array, input2?: Array)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/matrix.ts:101\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        input1\n                                                  \n                                                        \n                                                                    number | Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        input2\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        adjoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:160\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cofactor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:158\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:97\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        determinant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        inverse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isSingular\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        minor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:157\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _depth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         Matrix\n\n                            \n                        \n                    \n                        \n                                Defined in         Matrix:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _dimension\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                        \n                            \n                                Inherited from         Matrix\n\n                            \n                        \n                    \n                        \n                                Defined in         Matrix:14\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _matrix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IMatrix\n\n                    \n                \n                        \n                            \n                                Inherited from         Matrix\n\n                            \n                        \n                    \n                        \n                                Defined in         Matrix:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(matrixRef: Matrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrixRef\n                                    \n                                                Matrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Matrix\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getResultant\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResultant(result: IMatrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    result\n                                    \n                                                IMatrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Matrix\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        multiply\n                        \n                    \n                \n            \n            \n                \n                    \n                    multiply(matrixRef: Matrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrixRef\n                                    \n                                                Matrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Matrix\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        subtract\n                        \n                    \n                \n            \n            \n                \n                    \n                    subtract(matrixRef: Matrix)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrixRef\n                                    \n                                                Matrix\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Matrix\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        transpose\n                        \n                    \n                \n            \n            \n                \n                    \n                    transpose()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/matrix.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Matrix\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getDepthFromMatrix\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDepthFromMatrix(matrix: IMatrix | T)\n                \n            \n\n\n            \n                \n                    Inherited from         Matrix\n\n                \n            \n            \n                \n                        Defined in         Matrix:67\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrix\n                                    \n                                                IMatrix | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDimensionFromMatrix\n                        \n                    \n                \n            \n            \n                \ngetDimensionFromMatrix(matrix: IMatrix | T, i: number)\n                \n            \n\n\n            \n                \n                    Inherited from         Matrix\n\n                \n            \n            \n                \n                        Defined in         Matrix:74\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matrix\n                                    \n                                                IMatrix | T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Array\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        type IMatrix = Array> | Array;\n\nconst DEFAULT_DEPTH = 0;\nconst DEFAULT_DIMENSION: Array = [];\n\nenum ErrorMsg {\n    INVALID_MATRIX = `Invalid Matrices`,\n    INVALID_MATRIX_DIMENSION = `Invalid matrix dimensions`,\n    MULTIPLICATION_NOT_VALID = `Multiplication is not valid`\n};\n\nclass Matrix {\n    private _depth: number;\n    private _dimension: Array;\n    private _matrix: IMatrix;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            this._depth = DEFAULT_DEPTH;\n            this._dimension = DEFAULT_DIMENSION;\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                this._depth = input1;\n                this._dimension = Array.from({length: this._depth}).fill(0) as Array;\n            }\n            if(Array.isArray(input1)) {\n                this._depth = input1.length;\n                this._dimension = input1;\n            }\n        } else {\n            this._depth = input1 as number;\n            this._dimension = input2;\n        }\n        const utilProps = Object.getPrototypeOf(MatrixUtil.getInstance());\n        for(let prop in utilProps) {\n            (this as any)[prop] = utilProps[prop];\n        }\n        // Object.assign(this, MatrixUtil.getInstance());\n        // console.log(MatrixUtil.getInstance());\n    }\n    get depth(): number {\n        return this._depth;\n    }\n    set depth(depth: number) {\n        this._depth = depth;\n    }\n    get dimension(): Array {\n        return this._dimension;\n    }\n    set dimension(dimension: Array) {\n        this._depth = this._dimension.length;\n        this._dimension = dimension;\n    }\n    get matrix(): IMatrix {\n        return this._matrix;\n    }\n    set matrix(matrix: IMatrix) {\n        this.depth = 0;\n        this.depth = this.getDepthFromMatrix(matrix);\n        this.dimension = Array.from({length: this._depth}).fill(0) as Array;\n        this.dimension = this.getDimensionFromMatrix(matrix, 0);\n        this._matrix = matrix;\n    }\n    private getDepthFromMatrix(matrix: IMatrix | T): number {\n        if (Array.isArray(matrix)) {\n            this.depth++;\n            this.getDepthFromMatrix(matrix[0]);\n        }\n        return this.depth;\n    }\n    getDimensionFromMatrix(matrix: IMatrix | T, i: number): Array {\n        if (Array.isArray(matrix)) {\n            this.dimension[i++] = matrix.length;\n            this.getDimensionFromMatrix(matrix[0], i);\n        }\n        return this.dimension;\n    }\n}\n\ninterface INumberMatrixOps {\n    add: (matrix: Matrix) => Matrix;\n    subtract: (matrix: Matrix) => Matrix;\n    multiply: (matrix: Matrix) => Matrix;\n    transpose: () => Matrix;\n    determinant: () => number;\n    inverse: () => Matrix;\n    minor: (element: number) => Matrix;\n    cofactor: (minor: Matrix | number) => number;\n    isSingular: () => boolean;\n    adjoint: () => Matrix;\n}\nclass NumberMatrix extends Matrix implements INumberMatrixOps {\n    rows: number;\n    columns: number;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            super();\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                super(input1);\n            } else {\n                super(input1);\n            }\n        } else {\n            super(input1 as number, input2);\n        }\n        // this.rows = this.matrix.length;\n    }\n    public add(matrixRef: Matrix): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        if(this.matrix.length === (matrixRef.matrix[0] as Array).length) {\n\n        } else {\n            throw ErrorMsg.MULTIPLICATION_NOT_VALID;\n        }\n        return null;\n    }\n    public transpose(): Matrix {\n        if(this.depth  number;\n    public inverse: () => Matrix;\n    public minor: (element: number) => Matrix;\n    public cofactor: (minor: number | Matrix) => number;\n    public isSingular: () => boolean;\n    public adjoint: () => Matrix;\n    private getResultant(result: IMatrix): Matrix {\n        const resultant = new Matrix(this.depth, this.dimension);\n        resultant.matrix = result;\n        return resultant;\n    }\n}\n\nclass MatrixUtil {\n    private static _instance: MatrixUtil;\n    private constructor() { }\n    public isDimensionSame(matrixRef: Matrix): boolean {\n        const that = this as any;\n        let flag = that.dimension.length === matrixRef.dimension.length;\n        if(flag) {\n            that.dimension.forEach((element: number, index: number) => {\n                flag = element === matrixRef.dimension[index];\n            });\n        }\n        return flag;\n    }\n    public addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.addArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) + (arr2[index] as number);\n            }\n        });\n    }\n    public subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.subtractArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) - (arr2[index] as number);\n            }\n        });\n    }\n    public static getInstance() {\n        if(!MatrixUtil._instance) {\n            MatrixUtil._instance = new MatrixUtil();\n        }\n        return MatrixUtil._instance;\n    }\n}\n\nclass NumberMatrixUtil {\n    private constructor() { }\n    private _instance: NumberMatrixUtil;\n}\n\nclass MatrixGenerator {\n    constructor() {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NumberMatrixUtil.html":{"url":"classes/NumberMatrixUtil.html","title":"class - NumberMatrixUtil","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NumberMatrixUtil\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/matrix.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _instance\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Private\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/matrix.ts:209\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _instance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NumberMatrixUtil\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/matrix.ts:211\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        type IMatrix = Array> | Array;\n\nconst DEFAULT_DEPTH = 0;\nconst DEFAULT_DIMENSION: Array = [];\n\nenum ErrorMsg {\n    INVALID_MATRIX = `Invalid Matrices`,\n    INVALID_MATRIX_DIMENSION = `Invalid matrix dimensions`,\n    MULTIPLICATION_NOT_VALID = `Multiplication is not valid`\n};\n\nclass Matrix {\n    private _depth: number;\n    private _dimension: Array;\n    private _matrix: IMatrix;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            this._depth = DEFAULT_DEPTH;\n            this._dimension = DEFAULT_DIMENSION;\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                this._depth = input1;\n                this._dimension = Array.from({length: this._depth}).fill(0) as Array;\n            }\n            if(Array.isArray(input1)) {\n                this._depth = input1.length;\n                this._dimension = input1;\n            }\n        } else {\n            this._depth = input1 as number;\n            this._dimension = input2;\n        }\n        const utilProps = Object.getPrototypeOf(MatrixUtil.getInstance());\n        for(let prop in utilProps) {\n            (this as any)[prop] = utilProps[prop];\n        }\n        // Object.assign(this, MatrixUtil.getInstance());\n        // console.log(MatrixUtil.getInstance());\n    }\n    get depth(): number {\n        return this._depth;\n    }\n    set depth(depth: number) {\n        this._depth = depth;\n    }\n    get dimension(): Array {\n        return this._dimension;\n    }\n    set dimension(dimension: Array) {\n        this._depth = this._dimension.length;\n        this._dimension = dimension;\n    }\n    get matrix(): IMatrix {\n        return this._matrix;\n    }\n    set matrix(matrix: IMatrix) {\n        this.depth = 0;\n        this.depth = this.getDepthFromMatrix(matrix);\n        this.dimension = Array.from({length: this._depth}).fill(0) as Array;\n        this.dimension = this.getDimensionFromMatrix(matrix, 0);\n        this._matrix = matrix;\n    }\n    private getDepthFromMatrix(matrix: IMatrix | T): number {\n        if (Array.isArray(matrix)) {\n            this.depth++;\n            this.getDepthFromMatrix(matrix[0]);\n        }\n        return this.depth;\n    }\n    getDimensionFromMatrix(matrix: IMatrix | T, i: number): Array {\n        if (Array.isArray(matrix)) {\n            this.dimension[i++] = matrix.length;\n            this.getDimensionFromMatrix(matrix[0], i);\n        }\n        return this.dimension;\n    }\n}\n\ninterface INumberMatrixOps {\n    add: (matrix: Matrix) => Matrix;\n    subtract: (matrix: Matrix) => Matrix;\n    multiply: (matrix: Matrix) => Matrix;\n    transpose: () => Matrix;\n    determinant: () => number;\n    inverse: () => Matrix;\n    minor: (element: number) => Matrix;\n    cofactor: (minor: Matrix | number) => number;\n    isSingular: () => boolean;\n    adjoint: () => Matrix;\n}\nclass NumberMatrix extends Matrix implements INumberMatrixOps {\n    rows: number;\n    columns: number;\n    constructor();\n    constructor(depth: number);\n    constructor(dimenstion: Array);\n    constructor(depth: number, dimenstion: Array);\n    constructor(input1?: number | Array, input2?: Array) {\n        if(!input1) {\n            super();\n        } else if(!input2) {\n            if(typeof input1 === 'number') {\n                super(input1);\n            } else {\n                super(input1);\n            }\n        } else {\n            super(input1 as number, input2);\n        }\n        // this.rows = this.matrix.length;\n    }\n    public add(matrixRef: Matrix): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        const result: IMatrix = [];\n        if(this.depth ): Matrix {\n        if(this.matrix.length === (matrixRef.matrix[0] as Array).length) {\n\n        } else {\n            throw ErrorMsg.MULTIPLICATION_NOT_VALID;\n        }\n        return null;\n    }\n    public transpose(): Matrix {\n        if(this.depth  number;\n    public inverse: () => Matrix;\n    public minor: (element: number) => Matrix;\n    public cofactor: (minor: number | Matrix) => number;\n    public isSingular: () => boolean;\n    public adjoint: () => Matrix;\n    private getResultant(result: IMatrix): Matrix {\n        const resultant = new Matrix(this.depth, this.dimension);\n        resultant.matrix = result;\n        return resultant;\n    }\n}\n\nclass MatrixUtil {\n    private static _instance: MatrixUtil;\n    private constructor() { }\n    public isDimensionSame(matrixRef: Matrix): boolean {\n        const that = this as any;\n        let flag = that.dimension.length === matrixRef.dimension.length;\n        if(flag) {\n            that.dimension.forEach((element: number, index: number) => {\n                flag = element === matrixRef.dimension[index];\n            });\n        }\n        return flag;\n    }\n    public addArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.addArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) + (arr2[index] as number);\n            }\n        });\n    }\n    public subtractArrays(arr1: IMatrix, arr2: IMatrix, result: IMatrix) {\n        Object.keys(arr1).forEach((value: string, index: number) => {\n            if(Array.isArray(arr1[index]) && Array.isArray(arr2[index])) {\n                if(!result[index]) result[index] = [];\n                this.subtractArrays(arr1[index] as IMatrix, arr2[index] as IMatrix, result[index] as IMatrix);\n            } else {\n                result[index] = (arr1[index] as number) - (arr2[index] as number);\n            }\n        });\n    }\n    public static getInstance() {\n        if(!MatrixUtil._instance) {\n            MatrixUtil._instance = new MatrixUtil();\n        }\n        return MatrixUtil._instance;\n    }\n}\n\nclass NumberMatrixUtil {\n    private constructor() { }\n    private _instance: NumberMatrixUtil;\n}\n\nclass MatrixGenerator {\n    constructor() {}\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StockListComponent.html":{"url":"components/StockListComponent.html","title":"component - StockListComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StockListComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/stocks/stock-list/stock-list.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-stock-list\n            \n\n            \n                styleUrls\n                ./stock-list.component.css\n            \n\n\n\n            \n                templateUrl\n                ./stock-list.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/stocks/stock-list/stock-list.component.ts:8\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/stocks/stock-list/stock-list.component.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-stock-list',\n  templateUrl: './stock-list.component.html',\n  styleUrls: ['./stock-list.component.css']\n})\nexport class StockListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n    \n\n    \n        stock-list works!\n\n    \n\n    \n                \n                    ./stock-list.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'stock-list works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StockListComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SystemOutput.html":{"url":"interfaces/SystemOutput.html","title":"interface - SystemOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SystemOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/BinarySystem.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expression\n                                        \n                                \n                                \n                                        \n                                            fn\n                                        \n                                \n                                \n                                        \n                                            ioMap\n                                        \n                                \n                                \n                                        \n                                            outputSeq\n                                        \n                                \n                                \n                                        \n                                            outputString\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expression\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expression:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ioMap\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ioMap:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputSeq\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputSeq:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputString\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputString:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type ArrayOfArray = Array>;\n\n// type ArgsType = 'inputs' | 'fnOs';\ntype SystemInputType = ArrayOfArray | Array | number | string;\ntype FnInputType = Array | number | string;\ninterface SystemOutput {\n    ioMap: {[key: string]: number},\n    outputSeq: Array,\n    outputString: string,\n    expression: string,\n    fn: string,\n}\n\nclass BinarySystem {\n    public bits: number;\n    public maxInputCombinations: ArrayOfArray;\n    public maxOutputCombinations: ArrayOfArray;\n    private _symbols: Array;\n    private _inputs: ArrayOfArray;\n    private _fnOs: Array;\n    private _output: SystemOutput;\n    constructor();\n    constructor(bits: Array | number);\n    constructor(bits: Array | number, inputs: SystemInputType);\n    constructor(bits: Array | number, inputs: SystemInputType, fnO: FnInputType);\n    constructor(_bits?: Array | number, _inputs?: SystemInputType, _fnO?: FnInputType) {\n        this._symbols = _bits ? BinaryUtil.getBitsSymbols(_bits) : null;\n        this.bits = this._symbols.length;\n        this._inputs = _inputs ? BinaryUtil.getStandardInputs(_inputs) : null;\n        this._fnOs = _fnO ? BinaryUtil.getFnList(_fnO) : [];\n    }\n\n    set symbols(_symbols: Array | number) {\n        if(!this._inputs && (_symbols === this._symbols.length || (_symbols as []).length === this._symbols.length)) {\n            this._symbols = _symbols ? BinaryUtil.getBitsSymbols(_symbols) : null;\n        }\n    }\n    get symbols(): Array {\n        return this._symbols;\n    }\n\n    set inputs(_inputs: SystemInputType) {\n        _inputs = _inputs ? BinaryUtil.getStandardInputs(_inputs) : null;\n        if(!this._symbols || _inputs?.[0]?.length === this._symbols.length) {\n            this._inputs = _inputs;\n        }\n    }\n    get inputs(): ArrayOfArray {\n        return this._inputs;\n    }\n\n    set fnOs(_fnOs: FnInputType) {\n        _fnOs = _fnOs ? BinaryUtil.getFnList(_fnOs) : [];\n        this._fnOs = _fnOs.filter((f: number) => Math.pow(2, Math.pow(2, this._symbols.length)) > f);\n    }\n    get fnOs(): Array {\n        return this._fnOs;\n    }\n\n    getMagicBox() {\n        const obj = {};\n        const maxCombinations = Math.pow(2, this._symbols.length);\n        const maxFns = Math.pow(2, maxCombinations);\n        const inputsIndexList = ((inp) => inp.map((e) => parseInt(e.join(\"\"), 2)))(this._inputs);\n        const getBinaryOutputSequence = (k: number,l: number) => {\n            const t = BinaryUtil.decimalToBitArray(k);\n            t.unshift(...Array(l-t.length).fill(0));\n            return t;\n        }\n        const calculate = (k: number) => {\n            const outputSeq = getBinaryOutputSequence(k, maxCombinations);\n        }\n    }\n}\n\nclass BinaryUtil {\n    public static binaryToBitArray = (n: number) => n.toString().split(\"\").map((e: number | string) => Number(e));\n\n    public static decimalToBitArray = (n: number) => Number(n).toString(2).split(\"\").map((e: number | string) => Number(e));\n    \n    public static isBinary = (inp: Array | string | number) => inp.toString().split(\"\").findIndex(e => !(Number(e) > 1 || Number(e)  -1;\n\n    public static isArrayOfArray = (arr: SystemInputType) => (Array.isArray(arr) && (arr as []).filter((e) => Array.isArray(e)).length === arr.length);\n\n    public static sanitizeTwoDArray = (arr: ArrayOfArray) => {\n        arr = arr.filter(e => Array.isArray(e));\n        return arr.map(a => a.map(e => Number(Boolean(Number(e)))));\n    }\n\n    public static minStandardInputsArray = (array: ArrayOfArray) => {\n        let minLength = Math.pow(2, 32) - 1;\n        array.forEach(e => minLength > e.length ? minLength = e.length : null);\n        array.forEach(e => minLength ;\n    };\n\n    public static maxStandardInputsArray = (array: ArrayOfArray) => {\n        let maxLength = 0;\n        array.forEach(e => maxLength  maxLength > e.length ? e.unshift(...Array(maxLength - e.length).fill(0)) : null);\n        return array as ArrayOfArray;\n    };\n\n    public static getBitsSymbols = (n: Array | number) => Array.isArray(n) ? n : Array(n).fill(0).map((_, idx) => String.fromCharCode('a'.charCodeAt(0) + idx));\n\n    public static getStandardInputs(inputs: SystemInputType, isMinimalSystem?: boolean) {\n        let isBinaryInput = false;\n        const convertTo2DArray = (isBinary: boolean) => {\n            if(!isBinary) {\n                inputs = (inputs as []).map((e) => BinaryUtil.decimalToBitArray(e));\n            } else {\n                inputs = (inputs as []).map((e) => BinaryUtil.binaryToBitArray(e));\n            }\n        }\n        if(!BinaryUtil.isArrayOfArray(inputs) && !Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs);\n            inputs = inputs.toString().split(\",\");\n            convertTo2DArray(isBinaryInput);\n        } else if(!BinaryUtil.isArrayOfArray(inputs) && Array.isArray(inputs)) {\n            isBinaryInput = BinaryUtil.isBinary(inputs[0]);\n            convertTo2DArray(isBinaryInput);\n        } else {\n            inputs = BinaryUtil.sanitizeTwoDArray(inputs as ArrayOfArray);\n        }\n        \n        return isMinimalSystem ? BinaryUtil.minStandardInputsArray(inputs as ArrayOfArray) : BinaryUtil.maxStandardInputsArray(inputs as ArrayOfArray);\n    }\n\n    public static getFnList(fnO: FnInputType) {\n        if(fnO && !Array.isArray(fnO)) {\n            fnO = [Number(fnO)];\n        }\n        return fnO as Array;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tree.html":{"url":"classes/Tree.html","title":"class - Tree","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _root\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data?: T)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/node.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _root\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TreeNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/node.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        abstract class NodeType {\n    private _node_id: number;\n    constructor() {}\n    set node_id(_id) {\n        this._node_id = _id;\n    }\n    get node_id(): number {\n        return this._node_id;\n    }\n}\n\nclass Tree {\n    private _root: TreeNode;\n    constructor();\n    constructor(data: T);\n    constructor(data?: T) {\n        if(!data) {\n            this._root = new TreeNode();\n        } else {\n            this._root = new TreeNode(data);\n        }\n    }\n}\n\nclass TreeNode {\n    private _data: T;\n    private _parent: TreeNode;\n    private _children: Array>;\n    constructor();\n    constructor(data: T);\n    constructor(data: T, parent: TreeNode, children: Array>);\n    constructor(data: T = null, parent: TreeNode = null, children: Array> = []) {\n        this._data = data;\n        this._parent = parent;\n        this._children = children;\n    }\n    get data(): T {\n        return this._data;\n    }\n    get parent(): TreeNode {\n        return this._parent;\n    }\n    get children(): Array> {\n        return this._children;\n    }\n    hasChildren(): boolean {\n        return this._children?.length > 0;\n    }\n    getLevel(): number {\n        let level = 0;\n        let currentParent = this._parent;\n        while(currentParent !== null) {\n            level++;\n            currentParent = currentParent.parent;\n        }\n        return level;\n    }\n    addChild(child: TreeNode): boolean {\n        let flag = false;\n        this._children.push(child);\n        return flag;\n    }\n    private hasNodePresentInChildren(node): boolean {\n        let flag = false;\n        const currentNode = this.children?.[0]?.parent;\n        this.iterationOverChildren(currentNode, (child, index, parent) => {\n            if(!flag && !!child) {}\n        });\n        return flag;\n    }\n    iterationOverChildren(node: TreeNode, iteratee: Function = (arg1, arg2, arg3) => {}): void {\n        let index = -1;\n        const length = node?.children?.length || 0;\n        const result = new Array(length);\n        let tempNode = null;\n        if(node.hasChildren()) {\n            tempNode = node?.children?.[index];\n            iteratee(tempNode, index, node?.parent);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tree-1.html":{"url":"classes/Tree-1.html","title":"class - Tree-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/tree-view/models/tree.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _root\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T)\n                    \n                \n                        \n                            \n                                Defined in src/app/components/tree-view/models/tree.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _root\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TreeNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/tree-view/models/tree.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRoot\n                        \n                    \n                \n            \n            \n                \ngetRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/models/tree.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TreeNode\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { TreeNode } from \"./tree-models\";\n\nexport class Tree {\n\n  private _root: TreeNode;\n\n  constructor(data: T) {\n    this._root = new TreeNode(data, null);\n  }\n\n  getRoot(): TreeNode {\n    return this._root;\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TreeChildComponent.html":{"url":"components/TreeChildComponent.html","title":"component - TreeChildComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TreeChildComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/tree-view/tree-child/tree-child.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-tree-child\n            \n\n            \n                styleUrls\n                ./tree-child.component.css\n            \n\n\n\n            \n                templateUrl\n                ./tree-child.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/tree-view/tree-child/tree-child.component.ts:11\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :     TreeNode\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/tree-view/tree-child/tree-child.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/tree-child/tree-child.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnInit } from '@angular/core';\nimport { TreeNode } from '../models/tree-models';\n\n@Component({\n  selector: 'app-tree-child',\n  templateUrl: './tree-child.component.html',\n  styleUrls: ['./tree-child.component.css']\n})\nexport class TreeChildComponent implements OnInit {\n  @Input()\n  node: TreeNode;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n\n    \n\n    \n        \n\n    \n      {{node.data}}\n    \n    \n          \n    \n  \n  \n    \n\n    \n                \n                    ./tree-child.component.css\n                \n                .h-line-level {\n    position: absolute;\n    left: -1px;\n    top: 8px;\n    background-color: #484747;\n    height: 1px;\n    align-items: center;\n    content: '';\n  }\n  \n  .children-container {\n    padding-left: 10px;\n  }\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '          {{node.data}}                          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TreeChildComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TreeDataSource.html":{"url":"classes/TreeDataSource.html","title":"class - TreeDataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TreeDataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        DataSource\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                connect\n                            \n                            \n                                data\n                            \n                            \n                                dataChange\n                            \n                            \n                                disconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject>\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CollectionViewer, DataSource, SelectionChange } from \"@angular/cdk/collections\";\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, map, merge, Observable } from \"rxjs\";\nimport { DynamicDatabase } from \"./dynamic-database.service\";\n\n// export class DynamicFlatNode {\n//     constructor(public item: string, public level = 1, public expandable = false,\n//         public isLoading = false) { }\n// }\n\nexport interface DynamicFlatNode {\n    item: string;\n    level: number;\n    expandable: boolean;\n    isLoading?: boolean;\n}\n\nexport class TreeDataSource implements DataSource {\n    data: Array;\n    dataChange: BehaviorSubject>;\n    connect: (collectionVCiewer: CollectionViewer) => Observable>;\n    disconnect: (collectionViewer: CollectionViewer) =>  void;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class DynamicDataSource {\n\n    private treeDataSource: TreeDataSource;\n    dataChange = new BehaviorSubject([]);\n    get data(): Array {\n        return this.dataChange.value;\n    }\n\n    set data(value: Array) {\n        this._treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n    \n    get DataSource(): TreeDataSource {\n        return this.treeDataSource;\n    }\n    set DataSource(_treeDataSource) {\n        this._treeControl.dataNodes = _treeDataSource.data;\n        this.dataChange.next(_treeDataSource.data);\n        if(!_treeDataSource) {\n            this.treeDataSource = {\n                data: this.dataChange.value,\n                dataChange: new BehaviorSubject>([]),\n                connect: (collectionViewer: CollectionViewer) => {\n                    this._treeControl.expansionModel.changed.subscribe((change) => {\n                        if ((change as SelectionChange).added || (change as SelectionChange).removed) {\n                            this.handleTreeControl(change as SelectionChange);\n                        }\n                    });\n                    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n                },\n                disconnect: (collectionViewer: CollectionViewer) => {\n                    console.log(collectionViewer);\n                }\n            }\n        } else {\n            this.treeDataSource = _treeDataSource;\n        }\n    }\n\n    constructor(private _treeControl: FlatTreeControl, private _database: DynamicDatabase) { }\n    // connect(collectionViewer: CollectionViewer): Observable {\n    //     this._treeControl.expansionModel.changed.subscribe((change) => {\n    //         if ((change as SelectionChange).added || (change as SelectionChange).removed) {\n    //             this.handleTreeControl(change as SelectionChange);\n    //         }\n    //     });\n    //     return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    // }\n    // disconnect(collectionViewer: CollectionViewer): void {\n    //     console.log(collectionViewer);\n    // }\n    handleTreeControl(change: SelectionChange) {\n        if (change.added) {\n            change.added.forEach(node => this.toggleNode(node, true));\n        }\n        if (change.removed) {\n            change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n        }\n    }\n    toggleNode(node: DynamicFlatNode, expand: boolean) {\n        const children = this._database.getChildren(node.item);\n        const index = this.data.indexOf(node);\n        if (!children || index  {\n            if (expand) {\n                const nodes = children.map(name => {\n                    const obj:  DynamicFlatNode = {\n                        item: name,\n                        level: node.level + 1,\n                        expandable: this._database.isExpandable(name)\n                    }\n                    return obj;\n                });\n                // const nodes = children.map(name => new DynamicFlatNode(name, node.level + 1, this._database.isExpandable(name)));\n                this.data.splice(index + 1, 0, ...nodes);\n            } else {\n                let count = 0;\n                for (let i = index + 1; i  node.level; i++, count++) { }\n                this.data.splice(index + 1, count);\n            }\n            this.dataChange.next(this.data);\n            node.isLoading = false;\n        }, 1000);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TreeNode.html":{"url":"classes/TreeNode.html","title":"class - TreeNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TreeNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/classes/node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _children\n                            \n                            \n                                    Private\n                                _data\n                            \n                            \n                                    Private\n                                _parent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                getLevel\n                            \n                            \n                                hasChildren\n                            \n                            \n                                    Private\n                                hasNodePresentInChildren\n                            \n                            \n                                iterationOverChildren\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    children\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T, parent: TreeNode, children: Array>)\n                    \n                \n                        \n                            \n                                Defined in src/app/classes/node.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                    TreeNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                    Array>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array>\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/node.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/node.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TreeNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/classes/node.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(child: TreeNode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/node.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            TreeNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLevel\n                        \n                    \n                \n            \n            \n                \ngetLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/node.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasChildren\n                        \n                    \n                \n            \n            \n                \nhasChildren()\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/node.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        hasNodePresentInChildren\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNodePresentInChildren(node)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/node.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iterationOverChildren\n                        \n                    \n                \n            \n            \n                \niterationOverChildren(node: TreeNode, iteratee: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/app/classes/node.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                            TreeNode\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    iteratee\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        (arg1, arg2, arg3) => {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/node.ts:37\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        children\n                    \n                \n\n                \n                    \n                        getchildren()\n                    \n                \n                            \n                                \n                                    Defined in src/app/classes/node.ts:43\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        abstract class NodeType {\n    private _node_id: number;\n    constructor() {}\n    set node_id(_id) {\n        this._node_id = _id;\n    }\n    get node_id(): number {\n        return this._node_id;\n    }\n}\n\nclass Tree {\n    private _root: TreeNode;\n    constructor();\n    constructor(data: T);\n    constructor(data?: T) {\n        if(!data) {\n            this._root = new TreeNode();\n        } else {\n            this._root = new TreeNode(data);\n        }\n    }\n}\n\nclass TreeNode {\n    private _data: T;\n    private _parent: TreeNode;\n    private _children: Array>;\n    constructor();\n    constructor(data: T);\n    constructor(data: T, parent: TreeNode, children: Array>);\n    constructor(data: T = null, parent: TreeNode = null, children: Array> = []) {\n        this._data = data;\n        this._parent = parent;\n        this._children = children;\n    }\n    get data(): T {\n        return this._data;\n    }\n    get parent(): TreeNode {\n        return this._parent;\n    }\n    get children(): Array> {\n        return this._children;\n    }\n    hasChildren(): boolean {\n        return this._children?.length > 0;\n    }\n    getLevel(): number {\n        let level = 0;\n        let currentParent = this._parent;\n        while(currentParent !== null) {\n            level++;\n            currentParent = currentParent.parent;\n        }\n        return level;\n    }\n    addChild(child: TreeNode): boolean {\n        let flag = false;\n        this._children.push(child);\n        return flag;\n    }\n    private hasNodePresentInChildren(node): boolean {\n        let flag = false;\n        const currentNode = this.children?.[0]?.parent;\n        this.iterationOverChildren(currentNode, (child, index, parent) => {\n            if(!flag && !!child) {}\n        });\n        return flag;\n    }\n    iterationOverChildren(node: TreeNode, iteratee: Function = (arg1, arg2, arg3) => {}): void {\n        let index = -1;\n        const length = node?.children?.length || 0;\n        const result = new Array(length);\n        let tempNode = null;\n        if(node.hasChildren()) {\n            tempNode = node?.children?.[index];\n            iteratee(tempNode, index, node?.parent);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TreeNode-1.html":{"url":"classes/TreeNode-1.html","title":"class - TreeNode-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TreeNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/components/tree-view/models/tree-models.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _children\n                            \n                            \n                                    Private\n                                _data\n                            \n                            \n                                    Private\n                                _parent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addChild\n                            \n                            \n                                getLevel\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    children\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T, parent: TreeNode, children: TreeNode[])\n                    \n                \n                        \n                            \n                                Defined in src/app/components/tree-view/models/tree-models.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                    TreeNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        children\n                                                  \n                                                        \n                                                                    TreeNode[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TreeNode[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/tree-view/models/tree-models.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/tree-view/models/tree-models.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TreeNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/tree-view/models/tree-models.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addChild\n                        \n                    \n                \n            \n            \n                \naddChild(child: TreeNode)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/models/tree-models.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    child\n                                    \n                                            TreeNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLevel\n                        \n                    \n                \n            \n            \n                \ngetLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/models/tree-models.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/tree-view/models/tree-models.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        children\n                    \n                \n\n                \n                    \n                        getchildren()\n                    \n                \n                            \n                                \n                                    Defined in src/app/components/tree-view/models/tree-models.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class TreeNode {\n    private _data: T;\n    private _parent: TreeNode;\n    private _children: TreeNode[];\n  \n    constructor(data: T, parent: TreeNode, children: TreeNode[] = []) {\n      this._data = data;\n      this._parent = parent;\n      this._children = children;\n    }\n  \n    get data(): T {\n      return this._data;\n    }\n  \n    get parent(): TreeNode {\n      return this._parent;\n    }\n  \n    get children(): TreeNode[] {\n      return this._children;\n    }\n  \n    addChild(child: TreeNode) {\n      this._children.push(child);\n    }\n  \n    getLevel() {\n      let level = 0;\n      let currentParent = this._parent;\n  \n      while (currentParent != null) {\n        level++;\n        currentParent = currentParent.parent;\n      }\n  \n      return level;\n    }\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TreeParentComponent.html":{"url":"components/TreeParentComponent.html","title":"component - TreeParentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TreeParentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/tree-view/tree-parent/tree-parent.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-tree-parent\n            \n\n            \n                styleUrls\n                ./tree-parent.component.css\n            \n\n\n\n            \n                templateUrl\n                ./tree-parent.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                treeNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tree\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/tree-view/tree-parent/tree-parent.component.ts:20\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        tree\n                    \n                \n                \n                    \n                        Type :     Tree\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/components/tree-view/tree-parent/tree-parent.component.ts:12\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/tree-parent/tree-parent.component.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/tree-parent/tree-parent.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        treeNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TreeNode\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/tree-view/tree-parent/tree-parent.component.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnInit, SimpleChanges } from '@angular/core';\nimport { Tree } from '../models/tree';\nimport { TreeNode } from '../models/tree-models';\n\n@Component({\n  selector: 'app-tree-parent',\n  templateUrl: './tree-parent.component.html',\n  styleUrls: ['./tree-parent.component.css']\n})\nexport class TreeParentComponent implements OnInit {\n  @Input()\n  tree: Tree;\n\n  treeNode: TreeNode;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if(changes['tree'] && this.tree != null) {\n      this.treeNode = this.tree.getRoot();\n    }\n  }\n\n  constructor() { }\n\n  ngOnInit() {}\n}\n\n    \n\n    \n        Tree data visualized \n\n \n  \n\n    \n\n    \n                \n                    ./tree-parent.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Tree data visualized    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TreeParentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TreeViewComponent.html":{"url":"components/TreeViewComponent.html","title":"component - TreeViewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TreeViewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/components/tree-view/tree-view.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-tree-view\n            \n\n            \n                styleUrls\n                ./tree-view.component.css\n            \n\n\n\n            \n                templateUrl\n                ./tree-view.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                tree\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initTreeData\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/components/tree-view/tree-view.component.ts:12\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initTreeData\n                        \n                    \n                \n            \n            \n                \ninitTreeData()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/tree-view.component.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/components/tree-view/tree-view.component.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        tree\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Tree\n\n                    \n                \n                    \n                        \n                                Defined in src/app/components/tree-view/tree-view.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { Tree } from './models/tree';\nimport { TreeNode } from './models/tree-models';\n\n@Component({\n  selector: 'app-tree-view',\n  templateUrl: './tree-view.component.html',\n  styleUrls: ['./tree-view.component.css']\n})\nexport class TreeViewComponent implements OnInit {\n\n  tree: Tree;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  initTreeData() {\n    let tree = new Tree(\"root-node-data\");\n    let root: TreeNode = tree.getRoot()\n    for(let i = 0; i  = new TreeNode(\"First Level Node \" + i, root);\n      root.addChild(node);\n\n      for(let j = 0; j  = new TreeNode(\"Second Level Node \" + i + \":\" + j, node);\n        node.addChild(innerNode);\n        \n        let innerNode2: TreeNode = new TreeNode(\"Third Level Node \" + i + \":\" + j + \":0\", innerNode);\n        innerNode.addChild(innerNode2)\n      }\n\n    }\n    this.tree = tree;\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./tree-view.component.css\n                \n                p {\n    font-family: Lato;\n  }\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CanvasComponent', 'selector': 'app-canvas'},{'name': 'ClockComponent', 'selector': 'app-clock'},{'name': 'DemoComponent', 'selector': 'app-demo'},{'name': 'DrawAnimComponent', 'selector': 'app-draw-anim'},{'name': 'MapComponent', 'selector': 'app-map'},{'name': 'StockListComponent', 'selector': 'app-stock-list'},{'name': 'TreeChildComponent', 'selector': 'app-tree-child'},{'name': 'TreeParentComponent', 'selector': 'app-tree-parent'},{'name': 'TreeViewComponent', 'selector': 'app-tree-view'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TreeViewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/classes.ts\n            \n            class\n            TreeDataSource\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/classes.ts\n            \n            injectable\n            DynamicDataSource\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/classes.ts\n            \n            interface\n            DynamicFlatNode\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/classes/AIBinarySystem.ts\n            \n            class\n            AIBInput\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/classes/AIBinarySystem.ts\n            \n            class\n            AIBOutput\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/classes/AIBinarySystem.ts\n            \n            class\n            BinUtil\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/app/classes/AIBinarySystem.ts\n            \n            class\n            BooleanMagicBox\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/classes/BinarySystem.ts\n            \n            class\n            BinarySystem\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/classes/BinarySystem.ts\n            \n            class\n            BinaryUtil\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/classes/BinarySystem.ts\n            \n            interface\n            SystemOutput\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/classes/create-js-shapes.ts\n            \n            class\n            CreateJS_Shapes\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/classes/create-js-shapes.ts\n            \n            interface\n            ICenter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/classes/create-js-shapes.ts\n            \n            interface\n            IStrokeStyle\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            extract\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            findDecimalPos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            generateRegions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            getKMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            group\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            KMapGrayCodes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/k-map-solver.ts\n            \n            variable\n            solve\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            class\n            Matrix\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            class\n            MatrixGenerator\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            class\n            MatrixUtil\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            class\n            NumberMatrix\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            class\n            NumberMatrixUtil\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            interface\n            INumberMatrixOps\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            variable\n            DEFAULT_DEPTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/matrix.ts\n            \n            variable\n            DEFAULT_DIMENSION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/classes/node.ts\n            \n            class\n            NodeType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/classes/node.ts\n            \n            class\n            Tree\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/classes/node.ts\n            \n            class\n            TreeNode\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/components/canvas/canvas.component.ts\n            \n            component\n            CanvasComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/components/clock/clock.component.ts\n            \n            component\n            ClockComponent\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/app/components/clock/clock.shape.ts\n            \n            class\n            Clock\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/app/components/clock/clock.shape.ts\n            \n            interface\n            IClock\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/components/clock/interfaces.ts\n            \n            interface\n            ICenter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/components/clock/interfaces.ts\n            \n            interface\n            ICircleConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/components/clock/interfaces.ts\n            \n            interface\n            IGraphics\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/components/demo/demo.component.ts\n            \n            component\n            DemoComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/components/demo/demo.component.ts\n            \n            interface\n            ICenter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/components/demo/demo.component.ts\n            \n            interface\n            IStrokeStyle\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/components/draw-anim/draw-anim.component.ts\n            \n            component\n            DrawAnimComponent\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/app/components/draw-anim/draw-anim.component.ts\n            \n            interface\n            ICenter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/components/draw-anim/draw-anim.component.ts\n            \n            interface\n            IShapeObject\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/components/map/map.component.ts\n            \n            component\n            MapComponent\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/components/stocks/service/finnhub-api/finnhub-api.service.ts\n            \n            injectable\n            FinnhubApiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/components/stocks/stock-list/stock-list.component.ts\n            \n            component\n            StockListComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/components/tree-view/models/tree-models.ts\n            \n            class\n            TreeNode\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/components/tree-view/models/tree.ts\n            \n            class\n            Tree\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/components/tree-view/tree-child/tree-child.component.ts\n            \n            component\n            TreeChildComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/components/tree-view/tree-parent/tree-parent.component.ts\n            \n            component\n            TreeParentComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/components/tree-view/tree-view.component.ts\n            \n            component\n            TreeViewComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/dynamic-database.service.ts\n            \n            injectable\n            DynamicDatabase\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interfaces/shape-object-interfaces.ts\n            \n            interface\n            IAnimateShape\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/resolver/map.resolver.ts\n            \n            guard\n            MapResolver\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/resolver/map.resolver.ts\n            \n            variable\n            API_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/services/dynamic-loader/dynamic-loader.service.ts\n            \n            injectable\n            DynamicLoaderService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~13.1.0\n        \n            @angular/cdk : ^13.1.1\n        \n            @angular/common : ~13.1.0\n        \n            @angular/compiler : ~13.1.0\n        \n            @angular/core : ~13.1.0\n        \n            @angular/forms : ~13.1.0\n        \n            @angular/material : ^13.1.1\n        \n            @angular/platform-browser : ~13.1.0\n        \n            @angular/platform-browser-dynamic : ~13.1.0\n        \n            @angular/router : ~13.1.0\n        \n            @types/createjs : ^0.0.29\n        \n            createjs : ^1.0.1\n        \n            createjs-module : ^0.8.3\n        \n            easeljs : ^1.0.2\n        \n            finnhub : ^1.2.10\n        \n            leaflet : ^1.7.1\n        \n            rxjs : ~7.4.0\n        \n            three : ^0.137.5\n        \n            tslib : ^2.3.0\n        \n            uuid : ^3.4.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ErrorMsg   (src/.../matrix.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/classes/matrix.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorMsg\n                    \n                \n                        \n                            \n                                 INVALID_MATRIX\n                            \n                        \n                        \n                            \n                                Value : Invalid Matrices\n                            \n                        \n                        \n                            \n                                 INVALID_MATRIX_DIMENSION\n                            \n                        \n                        \n                            \n                                Value : Invalid matrix dimensions\n                            \n                        \n                        \n                            \n                                 MULTIPLICATION_NOT_VALID\n                            \n                        \n                        \n                            \n                                Value : Multiplication is not valid\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDemoApp\nThis project was generated with Angular CLI version 13.1.2.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nDemoComponent\n\nDemoComponent\n\nAppModule -->\n\nDemoComponent->AppModule\n\n\n\n\n\nDrawAnimComponent\n\nDrawAnimComponent\n\nAppModule -->\n\nDrawAnimComponent->AppModule\n\n\n\n\n\nMapComponent\n\nMapComponent\n\nAppModule -->\n\nMapComponent->AppModule\n\n\n\n\n\nStockListComponent\n\nStockListComponent\n\nAppModule -->\n\nStockListComponent->AppModule\n\n\n\n\n\nTreeChildComponent\n\nTreeChildComponent\n\nAppModule -->\n\nTreeChildComponent->AppModule\n\n\n\n\n\nTreeParentComponent\n\nTreeParentComponent\n\nAppModule -->\n\nTreeParentComponent->AppModule\n\n\n\n\n\nTreeViewComponent\n\nTreeViewComponent\n\nAppModule -->\n\nTreeViewComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayOfArray   (src/.../BinarySystem.ts)\n                        \n                        \n                            FnInputType   (src/.../BinarySystem.ts)\n                        \n                        \n                            IMatrix   (src/.../matrix.ts)\n                        \n                        \n                            IPoint   (src/.../create-js-shapes.ts)\n                        \n                        \n                            IPoint   (src/.../demo.component.ts)\n                        \n                        \n                            KMapCell   (src/.../k-map-solver.ts)\n                        \n                        \n                            KMapGrayCode   (src/.../k-map-solver.ts)\n                        \n                        \n                            KMapResult   (src/.../k-map-solver.ts)\n                        \n                        \n                            Region   (src/.../k-map-solver.ts)\n                        \n                        \n                            SystemInputType   (src/.../BinarySystem.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/classes/BinarySystem.ts\n    \n    \n        \n            \n                \n                    \n                    ArrayOfArray\n                \n            \n            \n                \n                        Array>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FnInputType\n                \n            \n            \n                \n                        Array | number | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SystemInputType\n                \n            \n            \n                \n                            ArrayOfArray | Array | number | string\n\n                \n            \n        \n    \n    src/app/classes/matrix.ts\n    \n    \n        \n            \n                \n                    \n                    IMatrix\n                \n            \n            \n                \n                            Array> | Array\n\n                \n            \n        \n    \n    src/app/classes/create-js-shapes.ts\n    \n    \n        \n            \n                \n                    \n                    IPoint\n                \n            \n            \n                \n                            ICenter\n\n                \n            \n        \n    \n    src/app/components/demo/demo.component.ts\n    \n    \n        \n            \n                \n                    \n                    IPoint\n                \n            \n            \n                \n                            ICenter\n\n                \n            \n        \n    \n    src/app/classes/k-map-solver.ts\n    \n    \n        \n            \n                \n                    \n                    KMapCell\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KMapGrayCode\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KMapResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Region\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            API_KEY   (src/.../map.resolver.ts)\n                        \n                        \n                            DEFAULT_DEPTH   (src/.../matrix.ts)\n                        \n                        \n                            DEFAULT_DIMENSION   (src/.../matrix.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            extract   (src/.../k-map-solver.ts)\n                        \n                        \n                            findDecimalPos   (src/.../k-map-solver.ts)\n                        \n                        \n                            generateRegions   (src/.../k-map-solver.ts)\n                        \n                        \n                            getKMap   (src/.../k-map-solver.ts)\n                        \n                        \n                            group   (src/.../k-map-solver.ts)\n                        \n                        \n                            KMapGrayCodes   (src/.../k-map-solver.ts)\n                        \n                        \n                            solve   (src/.../k-map-solver.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/resolver/map.resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"AIzaSyD_7zV9Y84sCeiijNISabociP2i9_RAHD8\"\n                    \n                \n\n\n        \n    \n\n    src/app/classes/matrix.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_DEPTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_DIMENSION\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true\n}\n                    \n                \n\n\n        \n    \n\n    src/app/classes/k-map-solver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        extract\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (variables: string[], group: KMapCell[]): string => {\n    let buffer: string[] = group[0].binary.split('');\n    let expression: string = '';\n  \n    for (let i: number = 1; i \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findDecimalPos\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (decimal: number, KMap: KMapCell[][]): { row: number, col: number } => {\n    for (let row: number = 0; row \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRegions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (rowCount: number, colCount: number): Region[] => {\n    let regions: Region[] = [];\n  \n    for (let w: number = 1; w  h) {\n          regions.push({ w: -w, h });\n  \n          if (h != 1) {\n            regions.push({ w: w, h: -h });\n            regions.push({ w: -w, h: -h });\n          }\n  \n          continue;\n        }\n  \n        if (w  {\n      let area_a: number = Math.abs(a.w * a.h);\n      let area_b: number = Math.abs(b.w * b.h);\n  \n      return area_a - area_b;\n    });\n  }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKMap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (variables: string[]): KMapCell[][] => {\n   let KMap: KMapCell[][] = []; \n  \n   const grayCodes: KMapGrayCode | undefined = KMapGrayCodes.get(variables.length);\n   \n   if (!grayCodes) return KMap;\n  \n   const { rows, cols } = grayCodes;\n  \n   for (let row: number = 0; row \n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        group\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (decimal: number, terms: number[], KMap: KMapCell[][], termQueue: number[]): KMapCell[] => {\n    const rowCount: number = KMap.length;\n    const colCount: number = KMap[0].length;\n  \n    const { row, col } = findDecimalPos(decimal, KMap);\n  \n    const regions: Region[] = generateRegions(rowCount, colCount);\n  \n    const checkRegion = (w: number, h: number): KMapCell[] | false => {\n      const cells: KMapCell[] = [];\n  \n      let r: number = 0;\n  \n      while (r != h) {\n        const curRow: number = (row + r) % rowCount >= 0 ? \n          (row + r) % rowCount : \n          rowCount + ((row + r) % rowCount);\n  \n        let c: number = 0;\n  \n        while (c != w) {\n          const curCol: number = (col + c) % colCount >= 0 ?\n            (col + c) % colCount :\n            colCount + ((col + c) % colCount);\n  \n          if (terms.indexOf(KMap[curRow][curCol].decimal) == -1) return false;\n  \n          cells.push(KMap[curRow][curCol]);\n  \n          w  composedGroups[0].length) {\n        composedGroups = [ [ ...cells ] ];\n        continue;\n      }\n  \n      if (cells.length == composedGroups[0].length) {\n        composedGroups = [ ...composedGroups, [ ...cells ] ];\n        continue;\n      }\n    }\n  \n    const groupsThatContainCellsGrouppedBefore: number[] = [];\n  \n    for (let i: number = 0; i  !termQueue.includes(cell.decimal));\n  \n      if (cellsGrouppedBefore.length > 0) {\n        groupsThatContainCellsGrouppedBefore.push(i);\n      }\n    }\n  \n    if (groupsThatContainCellsGrouppedBefore.length > 0 && groupsThatContainCellsGrouppedBefore.length != composedGroups.length) {\n      return composedGroups.filter((_, i: number) => !groupsThatContainCellsGrouppedBefore.includes(i))[0]\n    }\n  \n    return composedGroups[0];\n  }\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        KMapGrayCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map\n\n                    \n                \n                \n                    \n                        Default value : new Map([\n    [ \n      2, {\n        rows: [ '0', '1' ], \n        cols: [ '0', '1' ] \n      } \n    ],\n    [ \n      3, {\n        rows: [ '00', '01', '11', '10' ], \n        cols: [ '0', '1' ] \n      } \n    ],\n    [ \n      4, {\n        rows: [ '00', '01', '11', '10' ], \n        cols: [ '00', '01', '11', '10' ]\n      } \n    ]\n  ])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        solve\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (variables: string[], minterms: number[], dontcares: number[] = []): KMapResult => {\n    const KMap: KMapCell[][] = getKMap(variables);\n  \n    const groups: KMapCell[][] = [];\n    const expressions: string[] = [];\n  \n    let termQueue: number[] = [ ...minterms ];\n  \n    while (termQueue.length > 0) {\n      const term = termQueue[0];\n  \n      if (term  variables.length * variables.length - 1) {\n        termQueue = termQueue.filter((_term: number) => _term != term);\n        continue;\n      }\n  \n      let cells: KMapCell[] = group(term, minterms, KMap, termQueue);\n  \n      if (dontcares.length > 0) {\n        const dc_cells: KMapCell[] = group(term, [...minterms, ...dontcares], KMap, termQueue);\n        if (dc_cells.length > cells.length) cells = dc_cells;\n      }\n  \n      groups.push(cells);\n  \n      termQueue = termQueue.filter((term: number) => !cells.map((cell: KMapCell) => cell.decimal).includes(term));\n  \n      const expression: string = extract(variables, cells);\n      expressions.push(expression);\n    }\n  \n    const total_expression: string = expressions.join('+');\n  \n    return {\n      groups,\n      expression: total_expression == '' ? '1' : total_expression\n    }\n  }\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
